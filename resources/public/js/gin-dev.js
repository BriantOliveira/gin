var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2173";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__19823__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__19823 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__19823__delegate.call(this, args);
    };
    G__19823.cljs$lang$maxFixedArity = 0;
    G__19823.cljs$lang$applyTo = function(arglist__19824) {
      var args = cljs.core.seq(arglist__19824);
      return G__19823__delegate(args);
    };
    G__19823.cljs$core$IFn$_invoke$arity$variadic = G__19823__delegate;
    return G__19823;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__16649__auto__ = ty;
    if (cljs.core.truth_(and__16649__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__16649__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__17509__auto___19825 = len;
  var i_19826 = 0;
  while (true) {
    if (i_19826 < n__17509__auto___19825) {
      new_arr[i_19826] = arr[i_19826];
      var G__19827 = i_19826 + 1;
      i_19826 = G__19827;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__19828__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__19828 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19828__delegate.call(this, array, i, idxs);
    };
    G__19828.cljs$lang$maxFixedArity = 2;
    G__19828.cljs$lang$applyTo = function(arglist__19829) {
      var array = cljs.core.first(arglist__19829);
      arglist__19829 = cljs.core.next(arglist__19829);
      var i = cljs.core.first(arglist__19829);
      var idxs = cljs.core.rest(arglist__19829);
      return G__19828__delegate(array, i, idxs);
    };
    G__19828.cljs$core$IFn$_invoke$arity$variadic = G__19828__delegate;
    return G__19828;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__19830__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__19830 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__19830__delegate.call(this, array, idx, idx2, idxv);
    };
    G__19830.cljs$lang$maxFixedArity = 3;
    G__19830.cljs$lang$applyTo = function(arglist__19831) {
      var array = cljs.core.first(arglist__19831);
      arglist__19831 = cljs.core.next(arglist__19831);
      var idx = cljs.core.first(arglist__19831);
      arglist__19831 = cljs.core.next(arglist__19831);
      var idx2 = cljs.core.first(arglist__19831);
      var idxv = cljs.core.rest(arglist__19831);
      return G__19830__delegate(array, idx, idx2, idxv);
    };
    G__19830.cljs$core$IFn$_invoke$arity$variadic = G__19830__delegate;
    return G__19830;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj19833 = {};
  return obj19833;
}();
cljs.core.IFn = function() {
  var obj19835 = {};
  return obj19835;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__16649__auto__ = this$;
      if (and__16649__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__17288__auto__ = this$ == null ? null : this$;
      return function() {
        var or__16661__auto__ = cljs.core._invoke[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._invoke["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj19837 = {};
  return obj19837;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__16649__auto__ = value;
    if (and__16649__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__17288__auto__ = value == null ? null : value;
    return function() {
      var or__16661__auto__ = cljs.core._clone[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._clone["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj19839 = {};
  return obj19839;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._count[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._count["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj19841 = {};
  return obj19841;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._empty[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._empty["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj19843 = {};
  return obj19843;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._conj[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._conj["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj19845 = {};
  return obj19845;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__16649__auto__ = coll;
      if (and__16649__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__17288__auto__ = coll == null ? null : coll;
      return function() {
        var or__16661__auto__ = cljs.core._nth[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._nth["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__16649__auto__ = coll;
      if (and__16649__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__17288__auto__ = coll == null ? null : coll;
      return function() {
        var or__16661__auto__ = cljs.core._nth[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._nth["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj19847 = {};
  return obj19847;
}();
cljs.core.ISeq = function() {
  var obj19849 = {};
  return obj19849;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._first[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._first["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._rest[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._rest["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj19851 = {};
  return obj19851;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._next[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._next["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj19853 = {};
  return obj19853;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__16649__auto__ = o;
      if (and__16649__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__17288__auto__ = o == null ? null : o;
      return function() {
        var or__16661__auto__ = cljs.core._lookup[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._lookup["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__16649__auto__ = o;
      if (and__16649__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__17288__auto__ = o == null ? null : o;
      return function() {
        var or__16661__auto__ = cljs.core._lookup[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._lookup["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj19855 = {};
  return obj19855;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._assoc[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._assoc["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj19857 = {};
  return obj19857;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._dissoc[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._dissoc["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj19859 = {};
  return obj19859;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._key[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._key["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._val[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._val["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj19861 = {};
  return obj19861;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._disjoin[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._disjoin["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj19863 = {};
  return obj19863;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._peek[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._peek["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._pop[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._pop["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj19865 = {};
  return obj19865;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._assoc_n[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._assoc_n["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj19867 = {};
  return obj19867;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__16649__auto__ = o;
    if (and__16649__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__17288__auto__ = o == null ? null : o;
    return function() {
      var or__16661__auto__ = cljs.core._deref[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._deref["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj19869 = {};
  return obj19869;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__16649__auto__ = o;
    if (and__16649__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__17288__auto__ = o == null ? null : o;
    return function() {
      var or__16661__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj19871 = {};
  return obj19871;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__16649__auto__ = o;
    if (and__16649__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__17288__auto__ = o == null ? null : o;
    return function() {
      var or__16661__auto__ = cljs.core._meta[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._meta["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj19873 = {};
  return obj19873;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__16649__auto__ = o;
    if (and__16649__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__17288__auto__ = o == null ? null : o;
    return function() {
      var or__16661__auto__ = cljs.core._with_meta[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._with_meta["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj19875 = {};
  return obj19875;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__16649__auto__ = coll;
      if (and__16649__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__17288__auto__ = coll == null ? null : coll;
      return function() {
        var or__16661__auto__ = cljs.core._reduce[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._reduce["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__16649__auto__ = coll;
      if (and__16649__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__17288__auto__ = coll == null ? null : coll;
      return function() {
        var or__16661__auto__ = cljs.core._reduce[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._reduce["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj19877 = {};
  return obj19877;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._kv_reduce[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj19879 = {};
  return obj19879;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__16649__auto__ = o;
    if (and__16649__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__17288__auto__ = o == null ? null : o;
    return function() {
      var or__16661__auto__ = cljs.core._equiv[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._equiv["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj19881 = {};
  return obj19881;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__16649__auto__ = o;
    if (and__16649__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__17288__auto__ = o == null ? null : o;
    return function() {
      var or__16661__auto__ = cljs.core._hash[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._hash["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj19883 = {};
  return obj19883;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__16649__auto__ = o;
    if (and__16649__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__17288__auto__ = o == null ? null : o;
    return function() {
      var or__16661__auto__ = cljs.core._seq[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._seq["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj19885 = {};
  return obj19885;
}();
cljs.core.IList = function() {
  var obj19887 = {};
  return obj19887;
}();
cljs.core.IRecord = function() {
  var obj19889 = {};
  return obj19889;
}();
cljs.core.IReversible = function() {
  var obj19891 = {};
  return obj19891;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._rseq[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._rseq["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj19893 = {};
  return obj19893;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._sorted_seq[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._entry_key[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._entry_key["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._comparator[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._comparator["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj19895 = {};
  return obj19895;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__16649__auto__ = writer;
    if (and__16649__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__17288__auto__ = writer == null ? null : writer;
    return function() {
      var or__16661__auto__ = cljs.core._write[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._write["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__16649__auto__ = writer;
    if (and__16649__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__17288__auto__ = writer == null ? null : writer;
    return function() {
      var or__16661__auto__ = cljs.core._flush[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._flush["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj19897 = {};
  return obj19897;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__16649__auto__ = o;
    if (and__16649__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__17288__auto__ = o == null ? null : o;
    return function() {
      var or__16661__auto__ = cljs.core._pr_writer[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._pr_writer["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj19899 = {};
  return obj19899;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__16649__auto__ = d;
    if (and__16649__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__17288__auto__ = d == null ? null : d;
    return function() {
      var or__16661__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj19901 = {};
  return obj19901;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__16649__auto__ = this$;
    if (and__16649__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__17288__auto__ = this$ == null ? null : this$;
    return function() {
      var or__16661__auto__ = cljs.core._notify_watches[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._notify_watches["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__16649__auto__ = this$;
    if (and__16649__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__17288__auto__ = this$ == null ? null : this$;
    return function() {
      var or__16661__auto__ = cljs.core._add_watch[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._add_watch["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__16649__auto__ = this$;
    if (and__16649__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__17288__auto__ = this$ == null ? null : this$;
    return function() {
      var or__16661__auto__ = cljs.core._remove_watch[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._remove_watch["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj19903 = {};
  return obj19903;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._as_transient[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._as_transient["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj19905 = {};
  return obj19905;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__16649__auto__ = tcoll;
    if (and__16649__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__17288__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__16661__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__16649__auto__ = tcoll;
    if (and__16649__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__17288__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__16661__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj19907 = {};
  return obj19907;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__16649__auto__ = tcoll;
    if (and__16649__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__17288__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__16661__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj19909 = {};
  return obj19909;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__16649__auto__ = tcoll;
    if (and__16649__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__17288__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__16661__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj19911 = {};
  return obj19911;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__16649__auto__ = tcoll;
    if (and__16649__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__17288__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__16661__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__16649__auto__ = tcoll;
    if (and__16649__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__17288__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__16661__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj19913 = {};
  return obj19913;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__16649__auto__ = tcoll;
    if (and__16649__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__17288__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__16661__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj19915 = {};
  return obj19915;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__16649__auto__ = x;
    if (and__16649__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__17288__auto__ = x == null ? null : x;
    return function() {
      var or__16661__auto__ = cljs.core._compare[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._compare["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj19917 = {};
  return obj19917;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._drop_first[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._drop_first["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj19919 = {};
  return obj19919;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._chunked_first[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._chunked_first["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._chunked_rest[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj19921 = {};
  return obj19921;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__16649__auto__ = coll;
    if (and__16649__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__17288__auto__ = coll == null ? null : coll;
    return function() {
      var or__16661__auto__ = cljs.core._chunked_next[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._chunked_next["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj19923 = {};
  return obj19923;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__16649__auto__ = x;
    if (and__16649__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__17288__auto__ = x == null ? null : x;
    return function() {
      var or__16661__auto__ = cljs.core._name[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._name["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__16649__auto__ = x;
    if (and__16649__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__17288__auto__ = x == null ? null : x;
    return function() {
      var or__16661__auto__ = cljs.core._namespace[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._namespace["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__16649__auto__ = cljs.core.not.call(null, a.ns);
      if (and__16649__auto__) {
        return b.ns;
      } else {
        return and__16649__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__17072__auto__ = self__._hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__19925 = null;
  var G__19925__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__19925__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__19925 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19925__2.call(this, self__, coll);
      case 3:
        return G__19925__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__19925;
}();
cljs.core.Symbol.prototype.apply = function(self__, args19924) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args19924)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__19927 = value;
  if (G__19927) {
    var bit__17311__auto__ = G__19927.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__17311__auto__ || G__19927.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__19927.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__19927);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__19927);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__19929 = coll;
      if (G__19929) {
        var bit__17304__auto__ = G__19929.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__17304__auto__ || G__19929.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__19931 = coll;
      if (G__19931) {
        var bit__17304__auto__ = G__19931.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__17304__auto__ || G__19931.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__19933 = coll;
      if (G__19933) {
        var bit__17304__auto__ = G__19933.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__17304__auto__ || G__19933.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__19935 = coll;
      if (G__19935) {
        var bit__17304__auto__ = G__19935.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__17304__auto__ || G__19935.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__19936__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__19937 = y;
            var G__19938 = cljs.core.first.call(null, more);
            var G__19939 = cljs.core.next.call(null, more);
            x = G__19937;
            y = G__19938;
            more = G__19939;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__19936 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19936__delegate.call(this, x, y, more);
    };
    G__19936.cljs$lang$maxFixedArity = 2;
    G__19936.cljs$lang$applyTo = function(arglist__19940) {
      var x = cljs.core.first(arglist__19940);
      arglist__19940 = cljs.core.next(arglist__19940);
      var y = cljs.core.first(arglist__19940);
      var more = cljs.core.rest(arglist__19940);
      return G__19936__delegate(x, y, more);
    };
    G__19936.cljs$core$IFn$_invoke$arity$variadic = G__19936__delegate;
    return G__19936;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__19941 = nval;
            var G__19942 = n + 1;
            val = G__19941;
            n = G__19942;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__19943 = nval;
          var G__19944 = n + 1;
          val__$1 = G__19943;
          n = G__19944;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__19945 = nval;
          var G__19946 = n + 1;
          val__$1 = G__19945;
          n = G__19946;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__19947 = nval;
            var G__19948 = n + 1;
            val = G__19947;
            n = G__19948;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__19949 = nval;
          var G__19950 = n + 1;
          val__$1 = G__19949;
          n = G__19950;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__19951 = nval;
          var G__19952 = n + 1;
          val__$1 = G__19951;
          n = G__19952;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__19954 = x;
  if (G__19954) {
    var bit__17311__auto__ = G__19954.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__17311__auto__ || G__19954.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__19954.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__19954);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__19954);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__19956 = x;
  if (G__19956) {
    var bit__17311__auto__ = G__19956.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__17311__auto__ || G__19956.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__19956.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__19956);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__19956);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__19957 = sn;
      s = G__19957;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__19958__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__19959 = conj.call(null, coll, x);
          var G__19960 = cljs.core.first.call(null, xs);
          var G__19961 = cljs.core.next.call(null, xs);
          coll = G__19959;
          x = G__19960;
          xs = G__19961;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__19958 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19958__delegate.call(this, coll, x, xs);
    };
    G__19958.cljs$lang$maxFixedArity = 2;
    G__19958.cljs$lang$applyTo = function(arglist__19962) {
      var coll = cljs.core.first(arglist__19962);
      arglist__19962 = cljs.core.next(arglist__19962);
      var x = cljs.core.first(arglist__19962);
      var xs = cljs.core.rest(arglist__19962);
      return G__19958__delegate(coll, x, xs);
    };
    G__19958.cljs$core$IFn$_invoke$arity$variadic = G__19958__delegate;
    return G__19958;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__19963 = cljs.core.next.call(null, s);
      var G__19964 = acc + 1;
      s = G__19963;
      acc = G__19964;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__19966 = coll;
      if (G__19966) {
        var bit__17304__auto__ = G__19966.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__17304__auto__ || G__19966.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__19967 = cljs.core.next.call(null, coll);
              var G__19968 = n - 1;
              coll = G__19967;
              n = G__19968;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__19969 = cljs.core.next.call(null, coll);
              var G__19970 = n - 1;
              var G__19971 = not_found;
              coll = G__19969;
              n = G__19970;
              not_found = G__19971;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__19976 = coll;
        if (G__19976) {
          var bit__17304__auto__ = G__19976.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__17304__auto__ || G__19976.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__19977 = coll;
                  if (G__19977) {
                    var bit__17311__auto__ = G__19977.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__17311__auto__ || G__19977.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__19977.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__19977);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__19977);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__19978 = coll;
        if (G__19978) {
          var bit__17304__auto__ = G__19978.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__17304__auto__ || G__19978.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__19979 = coll;
                  if (G__19979) {
                    var bit__17311__auto__ = G__19979.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__17311__auto__ || G__19979.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__19979.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__19979);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__19979);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__19982 = o;
        if (G__19982) {
          var bit__17304__auto__ = G__19982.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__17304__auto__ || G__19982.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__19983 = o;
        if (G__19983) {
          var bit__17304__auto__ = G__19983.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__17304__auto__ || G__19983.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__19984__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__19985 = ret;
          var G__19986 = cljs.core.first.call(null, kvs);
          var G__19987 = cljs.core.second.call(null, kvs);
          var G__19988 = cljs.core.nnext.call(null, kvs);
          coll = G__19985;
          k = G__19986;
          v = G__19987;
          kvs = G__19988;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__19984 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__19984__delegate.call(this, coll, k, v, kvs);
    };
    G__19984.cljs$lang$maxFixedArity = 3;
    G__19984.cljs$lang$applyTo = function(arglist__19989) {
      var coll = cljs.core.first(arglist__19989);
      arglist__19989 = cljs.core.next(arglist__19989);
      var k = cljs.core.first(arglist__19989);
      arglist__19989 = cljs.core.next(arglist__19989);
      var v = cljs.core.first(arglist__19989);
      var kvs = cljs.core.rest(arglist__19989);
      return G__19984__delegate(coll, k, v, kvs);
    };
    G__19984.cljs$core$IFn$_invoke$arity$variadic = G__19984__delegate;
    return G__19984;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__19990__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__19991 = ret;
            var G__19992 = cljs.core.first.call(null, ks);
            var G__19993 = cljs.core.next.call(null, ks);
            coll = G__19991;
            k = G__19992;
            ks = G__19993;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__19990 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19990__delegate.call(this, coll, k, ks);
    };
    G__19990.cljs$lang$maxFixedArity = 2;
    G__19990.cljs$lang$applyTo = function(arglist__19994) {
      var coll = cljs.core.first(arglist__19994);
      arglist__19994 = cljs.core.next(arglist__19994);
      var k = cljs.core.first(arglist__19994);
      var ks = cljs.core.rest(arglist__19994);
      return G__19990__delegate(coll, k, ks);
    };
    G__19990.cljs$core$IFn$_invoke$arity$variadic = G__19990__delegate;
    return G__19990;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__16661__auto__ = goog.isFunction(f);
  if (or__16661__auto__) {
    return or__16661__auto__;
  } else {
    var G__19998 = f;
    if (G__19998) {
      var bit__17311__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__16661__auto____$1 = bit__17311__auto__;
        if (cljs.core.truth_(or__16661__auto____$1)) {
          return or__16661__auto____$1;
        } else {
          return G__19998.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__19998.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__19998);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__19998);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__20006 = o;
    if (G__20006) {
      var bit__17311__auto__ = G__20006.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__17311__auto__ || G__20006.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__20006.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__20006);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__20006);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t20007 !== "undefined") {
      } else {
        cljs.core.t20007 = function(meta, o, with_meta, meta20008) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta20008 = meta20008;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t20007.cljs$lang$type = true;
        cljs.core.t20007.cljs$lang$ctorStr = "cljs.core/t20007";
        cljs.core.t20007.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
          return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/t20007");
        };
        cljs.core.t20007.prototype.call = function() {
          var G__20011__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__20011 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__20011__delegate.call(this, self__, args);
          };
          G__20011.cljs$lang$maxFixedArity = 1;
          G__20011.cljs$lang$applyTo = function(arglist__20012) {
            var self__ = cljs.core.first(arglist__20012);
            var args = cljs.core.rest(arglist__20012);
            return G__20011__delegate(self__, args);
          };
          G__20011.cljs$core$IFn$_invoke$arity$variadic = G__20011__delegate;
          return G__20011;
        }();
        cljs.core.t20007.prototype.apply = function(self__, args20010) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20010)));
        };
        cljs.core.t20007.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__20013__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__20013 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__20013__delegate.call(this, args);
          };
          G__20013.cljs$lang$maxFixedArity = 0;
          G__20013.cljs$lang$applyTo = function(arglist__20014) {
            var args = cljs.core.seq(arglist__20014);
            return G__20013__delegate(args);
          };
          G__20013.cljs$core$IFn$_invoke$arity$variadic = G__20013__delegate;
          return G__20013;
        }();
        cljs.core.t20007.prototype.cljs$core$Fn$ = true;
        cljs.core.t20007.prototype.cljs$core$IMeta$_meta$arity$1 = function(_20009) {
          var self__ = this;
          var _20009__$1 = this;
          return self__.meta20008;
        };
        cljs.core.t20007.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_20009, meta20008__$1) {
          var self__ = this;
          var _20009__$1 = this;
          return new cljs.core.t20007(self__.meta, self__.o, self__.with_meta, meta20008__$1);
        };
        cljs.core.__GT_t20007 = function __GT_t20007(meta__$1, o__$1, with_meta__$1, meta20008) {
          return new cljs.core.t20007(meta__$1, o__$1, with_meta__$1, meta20008);
        };
      }
      return new cljs.core.t20007(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__16649__auto__ = !(o == null);
    if (and__16649__auto__) {
      var G__20018 = o;
      if (G__20018) {
        var bit__17311__auto__ = G__20018.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__17311__auto__ || G__20018.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__20018.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__20018);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__20018);
      }
    } else {
      return and__16649__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__20019__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__20020 = ret;
            var G__20021 = cljs.core.first.call(null, ks);
            var G__20022 = cljs.core.next.call(null, ks);
            coll = G__20020;
            k = G__20021;
            ks = G__20022;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__20019 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20019__delegate.call(this, coll, k, ks);
    };
    G__20019.cljs$lang$maxFixedArity = 2;
    G__20019.cljs$lang$applyTo = function(arglist__20023) {
      var coll = cljs.core.first(arglist__20023);
      arglist__20023 = cljs.core.next(arglist__20023);
      var k = cljs.core.first(arglist__20023);
      var ks = cljs.core.rest(arglist__20023);
      return G__20019__delegate(coll, k, ks);
    };
    G__20019.cljs$core$IFn$_invoke$arity$variadic = G__20019__delegate;
    return G__20019;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj20025 = {};
  return obj20025;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj20029 = {};
      return obj20029;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__20031 = o;
    if (G__20031) {
      var bit__17304__auto__ = G__20031.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__17304__auto__ || G__20031.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__20033 = x;
    if (G__20033) {
      var bit__17311__auto__ = G__20033.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__17311__auto__ || G__20033.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__20033.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__20033);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__20033);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__20035 = x;
    if (G__20035) {
      var bit__17311__auto__ = G__20035.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__17311__auto__ || G__20035.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__20035.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__20035);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__20035);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__20037 = x;
  if (G__20037) {
    var bit__17311__auto__ = G__20037.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__17311__auto__ || G__20037.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__20037.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__20037);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__20037);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__20039 = x;
  if (G__20039) {
    var bit__17311__auto__ = G__20039.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__17311__auto__ || G__20039.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__20039.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__20039);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__20039);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__20041 = x;
  if (G__20041) {
    var bit__17311__auto__ = G__20041.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__17311__auto__ || G__20041.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__20041.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__20041);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__20041);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__20043 = x;
  if (G__20043) {
    var bit__17311__auto__ = G__20043.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__17311__auto__ || G__20043.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__20043.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__20043);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__20043);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__20045 = x;
    if (G__20045) {
      var bit__17311__auto__ = G__20045.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__17311__auto__ || G__20045.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__20045.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__20045);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__20045);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__20047 = x;
  if (G__20047) {
    var bit__17311__auto__ = G__20047.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__17311__auto__ || G__20047.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__20047.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__20047);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__20047);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__20049 = x;
  if (G__20049) {
    var bit__17304__auto__ = G__20049.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__17304__auto__ || G__20049.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj20053 = {};
    return obj20053;
  };
  var js_obj__1 = function() {
    var G__20054__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__20054 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__20054__delegate.call(this, keyvals);
    };
    G__20054.cljs$lang$maxFixedArity = 0;
    G__20054.cljs$lang$applyTo = function(arglist__20055) {
      var keyvals = cljs.core.seq(arglist__20055);
      return G__20054__delegate(keyvals);
    };
    G__20054.cljs$core$IFn$_invoke$arity$variadic = G__20054__delegate;
    return G__20054;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__20056 = i__$1 + 1;
      var G__20057 = j__$1 + 1;
      var G__20058 = len__$1 - 1;
      i__$1 = G__20056;
      j__$1 = G__20057;
      len__$1 = G__20058;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__20059 = i__$1 - 1;
      var G__20060 = j__$1 - 1;
      var G__20061 = len__$1 - 1;
      i__$1 = G__20059;
      j__$1 = G__20060;
      len__$1 = G__20061;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj20063 = {};
  return obj20063;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__20065 = s;
    if (G__20065) {
      var bit__17311__auto__ = G__20065.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__17311__auto__ || G__20065.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__20065.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__20065);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__20065);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__20067 = s;
  if (G__20067) {
    var bit__17311__auto__ = G__20067.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__17311__auto__ || G__20067.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__20067.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__20067);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__20067);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__16661__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__16661__auto__) {
    return or__16661__auto__;
  } else {
    var G__20071 = f;
    if (G__20071) {
      var bit__17311__auto__ = G__20071.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__17311__auto__ || G__20071.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__20071.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__20071);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__20071);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__20072__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__20073 = cljs.core.conj.call(null, s, x__$1);
              var G__20074 = etc;
              s = G__20073;
              xs = G__20074;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__20072 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20072__delegate.call(this, x, y, more);
    };
    G__20072.cljs$lang$maxFixedArity = 2;
    G__20072.cljs$lang$applyTo = function(arglist__20075) {
      var x = cljs.core.first(arglist__20075);
      arglist__20075 = cljs.core.next(arglist__20075);
      var y = cljs.core.first(arglist__20075);
      var more = cljs.core.rest(arglist__20075);
      return G__20072__delegate(x, y, more);
    };
    G__20072.cljs$core$IFn$_invoke$arity$variadic = G__20072__delegate;
    return G__20072;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__16661__auto__ = cljs.core.seq.call(null, coll);
    if (or__16661__auto__) {
      return or__16661__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__20077 = x;
            if (G__20077) {
              var bit__17304__auto__ = G__20077.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__17304__auto__ || G__20077.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__20078 = xs;
        var G__20079 = ys;
        var G__20080 = len;
        var G__20081 = n + 1;
        xs = G__20078;
        ys = G__20079;
        len = G__20080;
        n = G__20081;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__20082 = nval;
          var G__20083 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__20082;
          coll__$1 = G__20083;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__20086 = coll;
      if (G__20086) {
        var bit__17304__auto__ = G__20086.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__17304__auto__ || G__20086.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__20087 = coll;
      if (G__20087) {
        var bit__17304__auto__ = G__20087.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__17304__auto__ || G__20087.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__20088__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__20088 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20088__delegate.call(this, x, y, more);
    };
    G__20088.cljs$lang$maxFixedArity = 2;
    G__20088.cljs$lang$applyTo = function(arglist__20089) {
      var x = cljs.core.first(arglist__20089);
      arglist__20089 = cljs.core.next(arglist__20089);
      var y = cljs.core.first(arglist__20089);
      var more = cljs.core.rest(arglist__20089);
      return G__20088__delegate(x, y, more);
    };
    G__20088.cljs$core$IFn$_invoke$arity$variadic = G__20088__delegate;
    return G__20088;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__20090__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__20090 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20090__delegate.call(this, x, y, more);
    };
    G__20090.cljs$lang$maxFixedArity = 2;
    G__20090.cljs$lang$applyTo = function(arglist__20091) {
      var x = cljs.core.first(arglist__20091);
      arglist__20091 = cljs.core.next(arglist__20091);
      var y = cljs.core.first(arglist__20091);
      var more = cljs.core.rest(arglist__20091);
      return G__20090__delegate(x, y, more);
    };
    G__20090.cljs$core$IFn$_invoke$arity$variadic = G__20090__delegate;
    return G__20090;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__20092__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__20092 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20092__delegate.call(this, x, y, more);
    };
    G__20092.cljs$lang$maxFixedArity = 2;
    G__20092.cljs$lang$applyTo = function(arglist__20093) {
      var x = cljs.core.first(arglist__20093);
      arglist__20093 = cljs.core.next(arglist__20093);
      var y = cljs.core.first(arglist__20093);
      var more = cljs.core.rest(arglist__20093);
      return G__20092__delegate(x, y, more);
    };
    G__20092.cljs$core$IFn$_invoke$arity$variadic = G__20092__delegate;
    return G__20092;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__20094__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__20094 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20094__delegate.call(this, x, y, more);
    };
    G__20094.cljs$lang$maxFixedArity = 2;
    G__20094.cljs$lang$applyTo = function(arglist__20095) {
      var x = cljs.core.first(arglist__20095);
      arglist__20095 = cljs.core.next(arglist__20095);
      var y = cljs.core.first(arglist__20095);
      var more = cljs.core.rest(arglist__20095);
      return G__20094__delegate(x, y, more);
    };
    G__20094.cljs$core$IFn$_invoke$arity$variadic = G__20094__delegate;
    return G__20094;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__20096__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__20097 = y;
            var G__20098 = cljs.core.first.call(null, more);
            var G__20099 = cljs.core.next.call(null, more);
            x = G__20097;
            y = G__20098;
            more = G__20099;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__20096 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20096__delegate.call(this, x, y, more);
    };
    G__20096.cljs$lang$maxFixedArity = 2;
    G__20096.cljs$lang$applyTo = function(arglist__20100) {
      var x = cljs.core.first(arglist__20100);
      arglist__20100 = cljs.core.next(arglist__20100);
      var y = cljs.core.first(arglist__20100);
      var more = cljs.core.rest(arglist__20100);
      return G__20096__delegate(x, y, more);
    };
    G__20096.cljs$core$IFn$_invoke$arity$variadic = G__20096__delegate;
    return G__20096;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__20101__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__20102 = y;
            var G__20103 = cljs.core.first.call(null, more);
            var G__20104 = cljs.core.next.call(null, more);
            x = G__20102;
            y = G__20103;
            more = G__20104;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__20101 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20101__delegate.call(this, x, y, more);
    };
    G__20101.cljs$lang$maxFixedArity = 2;
    G__20101.cljs$lang$applyTo = function(arglist__20105) {
      var x = cljs.core.first(arglist__20105);
      arglist__20105 = cljs.core.next(arglist__20105);
      var y = cljs.core.first(arglist__20105);
      var more = cljs.core.rest(arglist__20105);
      return G__20101__delegate(x, y, more);
    };
    G__20101.cljs$core$IFn$_invoke$arity$variadic = G__20101__delegate;
    return G__20101;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__20106__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__20107 = y;
            var G__20108 = cljs.core.first.call(null, more);
            var G__20109 = cljs.core.next.call(null, more);
            x = G__20107;
            y = G__20108;
            more = G__20109;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__20106 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20106__delegate.call(this, x, y, more);
    };
    G__20106.cljs$lang$maxFixedArity = 2;
    G__20106.cljs$lang$applyTo = function(arglist__20110) {
      var x = cljs.core.first(arglist__20110);
      arglist__20110 = cljs.core.next(arglist__20110);
      var y = cljs.core.first(arglist__20110);
      var more = cljs.core.rest(arglist__20110);
      return G__20106__delegate(x, y, more);
    };
    G__20106.cljs$core$IFn$_invoke$arity$variadic = G__20106__delegate;
    return G__20106;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__20111__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__20112 = y;
            var G__20113 = cljs.core.first.call(null, more);
            var G__20114 = cljs.core.next.call(null, more);
            x = G__20112;
            y = G__20113;
            more = G__20114;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__20111 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20111__delegate.call(this, x, y, more);
    };
    G__20111.cljs$lang$maxFixedArity = 2;
    G__20111.cljs$lang$applyTo = function(arglist__20115) {
      var x = cljs.core.first(arglist__20115);
      arglist__20115 = cljs.core.next(arglist__20115);
      var y = cljs.core.first(arglist__20115);
      var more = cljs.core.rest(arglist__20115);
      return G__20111__delegate(x, y, more);
    };
    G__20111.cljs$core$IFn$_invoke$arity$variadic = G__20111__delegate;
    return G__20111;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__16968__auto__ = x;
    var y__16969__auto__ = y;
    return x__16968__auto__ > y__16969__auto__ ? x__16968__auto__ : y__16969__auto__;
  };
  var max__3 = function() {
    var G__20116__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__16968__auto__ = x;
        var y__16969__auto__ = y;
        return x__16968__auto__ > y__16969__auto__ ? x__16968__auto__ : y__16969__auto__;
      }(), more);
    };
    var G__20116 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20116__delegate.call(this, x, y, more);
    };
    G__20116.cljs$lang$maxFixedArity = 2;
    G__20116.cljs$lang$applyTo = function(arglist__20117) {
      var x = cljs.core.first(arglist__20117);
      arglist__20117 = cljs.core.next(arglist__20117);
      var y = cljs.core.first(arglist__20117);
      var more = cljs.core.rest(arglist__20117);
      return G__20116__delegate(x, y, more);
    };
    G__20116.cljs$core$IFn$_invoke$arity$variadic = G__20116__delegate;
    return G__20116;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__16975__auto__ = x;
    var y__16976__auto__ = y;
    return x__16975__auto__ < y__16976__auto__ ? x__16975__auto__ : y__16976__auto__;
  };
  var min__3 = function() {
    var G__20118__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__16975__auto__ = x;
        var y__16976__auto__ = y;
        return x__16975__auto__ < y__16976__auto__ ? x__16975__auto__ : y__16976__auto__;
      }(), more);
    };
    var G__20118 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20118__delegate.call(this, x, y, more);
    };
    G__20118.cljs$lang$maxFixedArity = 2;
    G__20118.cljs$lang$applyTo = function(arglist__20119) {
      var x = cljs.core.first(arglist__20119);
      arglist__20119 = cljs.core.next(arglist__20119);
      var y = cljs.core.first(arglist__20119);
      var more = cljs.core.rest(arglist__20119);
      return G__20118__delegate(x, y, more);
    };
    G__20118.cljs$core$IFn$_invoke$arity$variadic = G__20118__delegate;
    return G__20118;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__20120__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__20120 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20120__delegate.call(this, x, y, more);
    };
    G__20120.cljs$lang$maxFixedArity = 2;
    G__20120.cljs$lang$applyTo = function(arglist__20121) {
      var x = cljs.core.first(arglist__20121);
      arglist__20121 = cljs.core.next(arglist__20121);
      var y = cljs.core.first(arglist__20121);
      var more = cljs.core.rest(arglist__20121);
      return G__20120__delegate(x, y, more);
    };
    G__20120.cljs$core$IFn$_invoke$arity$variadic = G__20120__delegate;
    return G__20120;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__20122__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__20122 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20122__delegate.call(this, x, y, more);
    };
    G__20122.cljs$lang$maxFixedArity = 2;
    G__20122.cljs$lang$applyTo = function(arglist__20123) {
      var x = cljs.core.first(arglist__20123);
      arglist__20123 = cljs.core.next(arglist__20123);
      var y = cljs.core.first(arglist__20123);
      var more = cljs.core.rest(arglist__20123);
      return G__20122__delegate(x, y, more);
    };
    G__20122.cljs$core$IFn$_invoke$arity$variadic = G__20122__delegate;
    return G__20122;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__20124__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__20124 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20124__delegate.call(this, x, y, more);
    };
    G__20124.cljs$lang$maxFixedArity = 2;
    G__20124.cljs$lang$applyTo = function(arglist__20125) {
      var x = cljs.core.first(arglist__20125);
      arglist__20125 = cljs.core.next(arglist__20125);
      var y = cljs.core.first(arglist__20125);
      var more = cljs.core.rest(arglist__20125);
      return G__20124__delegate(x, y, more);
    };
    G__20124.cljs$core$IFn$_invoke$arity$variadic = G__20124__delegate;
    return G__20124;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__20126__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__20126 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20126__delegate.call(this, x, y, more);
    };
    G__20126.cljs$lang$maxFixedArity = 2;
    G__20126.cljs$lang$applyTo = function(arglist__20127) {
      var x = cljs.core.first(arglist__20127);
      arglist__20127 = cljs.core.next(arglist__20127);
      var y = cljs.core.first(arglist__20127);
      var more = cljs.core.rest(arglist__20127);
      return G__20126__delegate(x, y, more);
    };
    G__20126.cljs$core$IFn$_invoke$arity$variadic = G__20126__delegate;
    return G__20126;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__20128__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__20128 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20128__delegate.call(this, x, y, more);
    };
    G__20128.cljs$lang$maxFixedArity = 2;
    G__20128.cljs$lang$applyTo = function(arglist__20129) {
      var x = cljs.core.first(arglist__20129);
      arglist__20129 = cljs.core.next(arglist__20129);
      var y = cljs.core.first(arglist__20129);
      var more = cljs.core.rest(arglist__20129);
      return G__20128__delegate(x, y, more);
    };
    G__20128.cljs$core$IFn$_invoke$arity$variadic = G__20128__delegate;
    return G__20128;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__20130__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__20130 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20130__delegate.call(this, x, y, more);
    };
    G__20130.cljs$lang$maxFixedArity = 2;
    G__20130.cljs$lang$applyTo = function(arglist__20131) {
      var x = cljs.core.first(arglist__20131);
      arglist__20131 = cljs.core.next(arglist__20131);
      var y = cljs.core.first(arglist__20131);
      var more = cljs.core.rest(arglist__20131);
      return G__20130__delegate(x, y, more);
    };
    G__20130.cljs$core$IFn$_invoke$arity$variadic = G__20130__delegate;
    return G__20130;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__20132__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__20132 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20132__delegate.call(this, x, y, more);
    };
    G__20132.cljs$lang$maxFixedArity = 2;
    G__20132.cljs$lang$applyTo = function(arglist__20133) {
      var x = cljs.core.first(arglist__20133);
      arglist__20133 = cljs.core.next(arglist__20133);
      var y = cljs.core.first(arglist__20133);
      var more = cljs.core.rest(arglist__20133);
      return G__20132__delegate(x, y, more);
    };
    G__20132.cljs$core$IFn$_invoke$arity$variadic = G__20132__delegate;
    return G__20132;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__20134__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__20135 = y;
            var G__20136 = cljs.core.first.call(null, more);
            var G__20137 = cljs.core.next.call(null, more);
            x = G__20135;
            y = G__20136;
            more = G__20137;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__20134 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20134__delegate.call(this, x, y, more);
    };
    G__20134.cljs$lang$maxFixedArity = 2;
    G__20134.cljs$lang$applyTo = function(arglist__20138) {
      var x = cljs.core.first(arglist__20138);
      arglist__20138 = cljs.core.next(arglist__20138);
      var y = cljs.core.first(arglist__20138);
      var more = cljs.core.rest(arglist__20138);
      return G__20134__delegate(x, y, more);
    };
    G__20134.cljs$core$IFn$_invoke$arity$variadic = G__20134__delegate;
    return G__20134;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__20139 = n__$1 - 1;
      var G__20140 = cljs.core.next.call(null, xs);
      n__$1 = G__20139;
      xs = G__20140;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__20141__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__20142 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__20143 = cljs.core.next.call(null, more);
          sb = G__20142;
          more = G__20143;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__20141 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__20141__delegate.call(this, x, ys);
    };
    G__20141.cljs$lang$maxFixedArity = 1;
    G__20141.cljs$lang$applyTo = function(arglist__20144) {
      var x = cljs.core.first(arglist__20144);
      var ys = cljs.core.rest(arglist__20144);
      return G__20141__delegate(x, ys);
    };
    G__20141.cljs$core$IFn$_invoke$arity$variadic = G__20141__delegate;
    return G__20141;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__20145 = cljs.core.next.call(null, xs);
            var G__20146 = cljs.core.next.call(null, ys);
            xs = G__20145;
            ys = G__20146;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__20147 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__20148 = cljs.core.next.call(null, s);
        res = G__20147;
        s = G__20148;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__20149 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__20150 = cljs.core.next.call(null, s);
      h = G__20149;
      s = G__20150;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__20151 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__20152 = cljs.core.next.call(null, s__$1);
      h = G__20151;
      s__$1 = G__20152;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__20159_20165 = cljs.core.seq.call(null, fn_map);
  var chunk__20160_20166 = null;
  var count__20161_20167 = 0;
  var i__20162_20168 = 0;
  while (true) {
    if (i__20162_20168 < count__20161_20167) {
      var vec__20163_20169 = cljs.core._nth.call(null, chunk__20160_20166, i__20162_20168);
      var key_name_20170 = cljs.core.nth.call(null, vec__20163_20169, 0, null);
      var f_20171 = cljs.core.nth.call(null, vec__20163_20169, 1, null);
      var str_name_20172 = cljs.core.name.call(null, key_name_20170);
      obj[str_name_20172] = f_20171;
      var G__20173 = seq__20159_20165;
      var G__20174 = chunk__20160_20166;
      var G__20175 = count__20161_20167;
      var G__20176 = i__20162_20168 + 1;
      seq__20159_20165 = G__20173;
      chunk__20160_20166 = G__20174;
      count__20161_20167 = G__20175;
      i__20162_20168 = G__20176;
      continue;
    } else {
      var temp__4092__auto___20177 = cljs.core.seq.call(null, seq__20159_20165);
      if (temp__4092__auto___20177) {
        var seq__20159_20178__$1 = temp__4092__auto___20177;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__20159_20178__$1)) {
          var c__17409__auto___20179 = cljs.core.chunk_first.call(null, seq__20159_20178__$1);
          var G__20180 = cljs.core.chunk_rest.call(null, seq__20159_20178__$1);
          var G__20181 = c__17409__auto___20179;
          var G__20182 = cljs.core.count.call(null, c__17409__auto___20179);
          var G__20183 = 0;
          seq__20159_20165 = G__20180;
          chunk__20160_20166 = G__20181;
          count__20161_20167 = G__20182;
          i__20162_20168 = G__20183;
          continue;
        } else {
          var vec__20164_20184 = cljs.core.first.call(null, seq__20159_20178__$1);
          var key_name_20185 = cljs.core.nth.call(null, vec__20164_20184, 0, null);
          var f_20186 = cljs.core.nth.call(null, vec__20164_20184, 1, null);
          var str_name_20187 = cljs.core.name.call(null, key_name_20185);
          obj[str_name_20187] = f_20186;
          var G__20188 = cljs.core.next.call(null, seq__20159_20178__$1);
          var G__20189 = null;
          var G__20190 = 0;
          var G__20191 = 0;
          seq__20159_20165 = G__20188;
          chunk__20160_20166 = G__20189;
          count__20161_20167 = G__20190;
          i__20162_20168 = G__20191;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__20193 = coll;
  if (G__20193) {
    var bit__17311__auto__ = G__20193.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__17311__auto__ || G__20193.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__20193.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__20193);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__20193);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__20194 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__20194;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__20195 = i - 1;
        var G__20196 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__20195;
        r = G__20196;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__20197) {
    var xs = cljs.core.seq(arglist__20197);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__16661__auto__ = coll == null;
    if (or__16661__auto__) {
      return or__16661__auto__;
    } else {
      var G__20201 = coll;
      if (G__20201) {
        var bit__17304__auto__ = G__20201.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__17304__auto__ || G__20201.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__20203 = x;
  if (G__20203) {
    var bit__17311__auto__ = G__20203.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__17311__auto__ || G__20203.cljs$core$IList$) {
      return true;
    } else {
      if (!G__20203.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__20203);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__20203);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__20205 = null;
  var G__20205__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__20205__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__20205 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20205__2.call(this, self__, coll);
      case 3:
        return G__20205__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20205;
}();
cljs.core.Keyword.prototype.apply = function(self__, args20204) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20204)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__20207 = x;
    if (G__20207) {
      var bit__17304__auto__ = G__20207.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__17304__auto__ || G__20207.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__20208 = ls.sval();
        ls = G__20208;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__20210 = s;
    if (G__20210) {
      var bit__17304__auto__ = G__20210.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__17304__auto__ || G__20210.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__20211 = cljs.core.next.call(null, s__$1);
      s__$1 = G__20211;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_20212 = 0;
  var xs_20213 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_20213) {
      ret[i_20212] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_20213));
      var G__20214 = i_20212 + 1;
      var G__20215 = cljs.core.next.call(null, xs_20213);
      i_20212 = G__20214;
      xs_20213 = G__20215;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__20216 = i + 1;
          var G__20217 = cljs.core.next.call(null, s__$1);
          i = G__20216;
          s__$1 = G__20217;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__17509__auto___20218 = size;
      var i_20219 = 0;
      while (true) {
        if (i_20219 < n__17509__auto___20218) {
          a[i_20219] = init_val_or_seq;
          var G__20220 = i_20219 + 1;
          i_20219 = G__20220;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__20221 = i + 1;
          var G__20222 = cljs.core.next.call(null, s__$1);
          i = G__20221;
          s__$1 = G__20222;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__17509__auto___20223 = size;
      var i_20224 = 0;
      while (true) {
        if (i_20224 < n__17509__auto___20223) {
          a[i_20224] = init_val_or_seq;
          var G__20225 = i_20224 + 1;
          i_20224 = G__20225;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__20226 = i + 1;
          var G__20227 = cljs.core.next.call(null, s__$1);
          i = G__20226;
          s__$1 = G__20227;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__17509__auto___20228 = size;
      var i_20229 = 0;
      while (true) {
        if (i_20229 < n__17509__auto___20228) {
          a[i_20229] = init_val_or_seq;
          var G__20230 = i_20229 + 1;
          i_20229 = G__20230;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__20231 = i + 1;
          var G__20232 = cljs.core.next.call(null, s__$1);
          i = G__20231;
          s__$1 = G__20232;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__17509__auto___20233 = size;
      var i_20234 = 0;
      while (true) {
        if (i_20234 < n__17509__auto___20233) {
          a[i_20234] = init_val_or_seq;
          var G__20235 = i_20234 + 1;
          i_20234 = G__20235;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__20236 = cljs.core.next.call(null, s__$1);
        var G__20237 = i - 1;
        var G__20238 = sum + 1;
        s__$1 = G__20236;
        i = G__20237;
        sum = G__20238;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__20239__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__20239 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20239__delegate.call(this, x, y, zs);
    };
    G__20239.cljs$lang$maxFixedArity = 2;
    G__20239.cljs$lang$applyTo = function(arglist__20240) {
      var x = cljs.core.first(arglist__20240);
      arglist__20240 = cljs.core.next(arglist__20240);
      var y = cljs.core.first(arglist__20240);
      var zs = cljs.core.rest(arglist__20240);
      return G__20239__delegate(x, y, zs);
    };
    G__20239.cljs$core$IFn$_invoke$arity$variadic = G__20239__delegate;
    return G__20239;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__20241__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__20241 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__20241__delegate.call(this, a, b, c, d, more);
    };
    G__20241.cljs$lang$maxFixedArity = 4;
    G__20241.cljs$lang$applyTo = function(arglist__20242) {
      var a = cljs.core.first(arglist__20242);
      arglist__20242 = cljs.core.next(arglist__20242);
      var b = cljs.core.first(arglist__20242);
      arglist__20242 = cljs.core.next(arglist__20242);
      var c = cljs.core.first(arglist__20242);
      arglist__20242 = cljs.core.next(arglist__20242);
      var d = cljs.core.first(arglist__20242);
      var more = cljs.core.rest(arglist__20242);
      return G__20241__delegate(a, b, c, d, more);
    };
    G__20241.cljs$core$IFn$_invoke$arity$variadic = G__20241__delegate;
    return G__20241;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__20243__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__20244 = ntcoll;
          var G__20245 = cljs.core.first.call(null, vals);
          var G__20246 = cljs.core.next.call(null, vals);
          tcoll = G__20244;
          val = G__20245;
          vals = G__20246;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__20243 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20243__delegate.call(this, tcoll, val, vals);
    };
    G__20243.cljs$lang$maxFixedArity = 2;
    G__20243.cljs$lang$applyTo = function(arglist__20247) {
      var tcoll = cljs.core.first(arglist__20247);
      arglist__20247 = cljs.core.next(arglist__20247);
      var val = cljs.core.first(arglist__20247);
      var vals = cljs.core.rest(arglist__20247);
      return G__20243__delegate(tcoll, val, vals);
    };
    G__20243.cljs$core$IFn$_invoke$arity$variadic = G__20243__delegate;
    return G__20243;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__20248__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__20249 = ntcoll;
          var G__20250 = cljs.core.first.call(null, kvs);
          var G__20251 = cljs.core.second.call(null, kvs);
          var G__20252 = cljs.core.nnext.call(null, kvs);
          tcoll = G__20249;
          key = G__20250;
          val = G__20251;
          kvs = G__20252;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__20248 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__20248__delegate.call(this, tcoll, key, val, kvs);
    };
    G__20248.cljs$lang$maxFixedArity = 3;
    G__20248.cljs$lang$applyTo = function(arglist__20253) {
      var tcoll = cljs.core.first(arglist__20253);
      arglist__20253 = cljs.core.next(arglist__20253);
      var key = cljs.core.first(arglist__20253);
      arglist__20253 = cljs.core.next(arglist__20253);
      var val = cljs.core.first(arglist__20253);
      var kvs = cljs.core.rest(arglist__20253);
      return G__20248__delegate(tcoll, key, val, kvs);
    };
    G__20248.cljs$core$IFn$_invoke$arity$variadic = G__20248__delegate;
    return G__20248;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__20254__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__20255 = ntcoll;
          var G__20256 = cljs.core.first.call(null, ks);
          var G__20257 = cljs.core.next.call(null, ks);
          tcoll = G__20255;
          key = G__20256;
          ks = G__20257;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__20254 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20254__delegate.call(this, tcoll, key, ks);
    };
    G__20254.cljs$lang$maxFixedArity = 2;
    G__20254.cljs$lang$applyTo = function(arglist__20258) {
      var tcoll = cljs.core.first(arglist__20258);
      arglist__20258 = cljs.core.next(arglist__20258);
      var key = cljs.core.first(arglist__20258);
      var ks = cljs.core.rest(arglist__20258);
      return G__20254__delegate(tcoll, key, ks);
    };
    G__20254.cljs$core$IFn$_invoke$arity$variadic = G__20254__delegate;
    return G__20254;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__20259__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__20260 = ntcoll;
          var G__20261 = cljs.core.first.call(null, vals);
          var G__20262 = cljs.core.next.call(null, vals);
          tcoll = G__20260;
          val = G__20261;
          vals = G__20262;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__20259 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20259__delegate.call(this, tcoll, val, vals);
    };
    G__20259.cljs$lang$maxFixedArity = 2;
    G__20259.cljs$lang$applyTo = function(arglist__20263) {
      var tcoll = cljs.core.first(arglist__20263);
      arglist__20263 = cljs.core.next(arglist__20263);
      var val = cljs.core.first(arglist__20263);
      var vals = cljs.core.rest(arglist__20263);
      return G__20259__delegate(tcoll, val, vals);
    };
    G__20259.cljs$core$IFn$_invoke$arity$variadic = G__20259__delegate;
    return G__20259;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__20264__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__20264 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__20264__delegate.call(this, f, a, b, c, d, args);
    };
    G__20264.cljs$lang$maxFixedArity = 5;
    G__20264.cljs$lang$applyTo = function(arglist__20265) {
      var f = cljs.core.first(arglist__20265);
      arglist__20265 = cljs.core.next(arglist__20265);
      var a = cljs.core.first(arglist__20265);
      arglist__20265 = cljs.core.next(arglist__20265);
      var b = cljs.core.first(arglist__20265);
      arglist__20265 = cljs.core.next(arglist__20265);
      var c = cljs.core.first(arglist__20265);
      arglist__20265 = cljs.core.next(arglist__20265);
      var d = cljs.core.first(arglist__20265);
      var args = cljs.core.rest(arglist__20265);
      return G__20264__delegate(f, a, b, c, d, args);
    };
    G__20264.cljs$core$IFn$_invoke$arity$variadic = G__20264__delegate;
    return G__20264;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__20266__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__20266 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__20266__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__20266.cljs$lang$maxFixedArity = 6;
    G__20266.cljs$lang$applyTo = function(arglist__20267) {
      var obj = cljs.core.first(arglist__20267);
      arglist__20267 = cljs.core.next(arglist__20267);
      var f = cljs.core.first(arglist__20267);
      arglist__20267 = cljs.core.next(arglist__20267);
      var a = cljs.core.first(arglist__20267);
      arglist__20267 = cljs.core.next(arglist__20267);
      var b = cljs.core.first(arglist__20267);
      arglist__20267 = cljs.core.next(arglist__20267);
      var c = cljs.core.first(arglist__20267);
      arglist__20267 = cljs.core.next(arglist__20267);
      var d = cljs.core.first(arglist__20267);
      var args = cljs.core.rest(arglist__20267);
      return G__20266__delegate(obj, f, a, b, c, d, args);
    };
    G__20266.cljs$core$IFn$_invoke$arity$variadic = G__20266__delegate;
    return G__20266;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__20268__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__20268 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20268__delegate.call(this, x, y, more);
    };
    G__20268.cljs$lang$maxFixedArity = 2;
    G__20268.cljs$lang$applyTo = function(arglist__20269) {
      var x = cljs.core.first(arglist__20269);
      arglist__20269 = cljs.core.next(arglist__20269);
      var y = cljs.core.first(arglist__20269);
      var more = cljs.core.rest(arglist__20269);
      return G__20268__delegate(x, y, more);
    };
    G__20268.cljs$core$IFn$_invoke$arity$variadic = G__20268__delegate;
    return G__20268;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__20270 = pred;
        var G__20271 = cljs.core.next.call(null, coll);
        pred = G__20270;
        coll = G__20271;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__16661__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        var G__20272 = pred;
        var G__20273 = cljs.core.next.call(null, coll);
        pred = G__20272;
        coll = G__20273;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__20274 = null;
    var G__20274__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__20274__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__20274__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__20274__3 = function() {
      var G__20275__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__20275 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__20275__delegate.call(this, x, y, zs);
      };
      G__20275.cljs$lang$maxFixedArity = 2;
      G__20275.cljs$lang$applyTo = function(arglist__20276) {
        var x = cljs.core.first(arglist__20276);
        arglist__20276 = cljs.core.next(arglist__20276);
        var y = cljs.core.first(arglist__20276);
        var zs = cljs.core.rest(arglist__20276);
        return G__20275__delegate(x, y, zs);
      };
      G__20275.cljs$core$IFn$_invoke$arity$variadic = G__20275__delegate;
      return G__20275;
    }();
    G__20274 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__20274__0.call(this);
        case 1:
          return G__20274__1.call(this, x);
        case 2:
          return G__20274__2.call(this, x, y);
        default:
          return G__20274__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__20274.cljs$lang$maxFixedArity = 2;
    G__20274.cljs$lang$applyTo = G__20274__3.cljs$lang$applyTo;
    return G__20274;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__20277__delegate = function(args) {
      return x;
    };
    var G__20277 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__20277__delegate.call(this, args);
    };
    G__20277.cljs$lang$maxFixedArity = 0;
    G__20277.cljs$lang$applyTo = function(arglist__20278) {
      var args = cljs.core.seq(arglist__20278);
      return G__20277__delegate(args);
    };
    G__20277.cljs$core$IFn$_invoke$arity$variadic = G__20277__delegate;
    return G__20277;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__20279 = null;
      var G__20279__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__20279__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__20279__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__20279__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__20279__4 = function() {
        var G__20280__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__20280 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20280__delegate.call(this, x, y, z, args);
        };
        G__20280.cljs$lang$maxFixedArity = 3;
        G__20280.cljs$lang$applyTo = function(arglist__20281) {
          var x = cljs.core.first(arglist__20281);
          arglist__20281 = cljs.core.next(arglist__20281);
          var y = cljs.core.first(arglist__20281);
          arglist__20281 = cljs.core.next(arglist__20281);
          var z = cljs.core.first(arglist__20281);
          var args = cljs.core.rest(arglist__20281);
          return G__20280__delegate(x, y, z, args);
        };
        G__20280.cljs$core$IFn$_invoke$arity$variadic = G__20280__delegate;
        return G__20280;
      }();
      G__20279 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__20279__0.call(this);
          case 1:
            return G__20279__1.call(this, x);
          case 2:
            return G__20279__2.call(this, x, y);
          case 3:
            return G__20279__3.call(this, x, y, z);
          default:
            return G__20279__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20279.cljs$lang$maxFixedArity = 3;
      G__20279.cljs$lang$applyTo = G__20279__4.cljs$lang$applyTo;
      return G__20279;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__20282 = null;
      var G__20282__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__20282__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__20282__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__20282__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__20282__4 = function() {
        var G__20283__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__20283 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20283__delegate.call(this, x, y, z, args);
        };
        G__20283.cljs$lang$maxFixedArity = 3;
        G__20283.cljs$lang$applyTo = function(arglist__20284) {
          var x = cljs.core.first(arglist__20284);
          arglist__20284 = cljs.core.next(arglist__20284);
          var y = cljs.core.first(arglist__20284);
          arglist__20284 = cljs.core.next(arglist__20284);
          var z = cljs.core.first(arglist__20284);
          var args = cljs.core.rest(arglist__20284);
          return G__20283__delegate(x, y, z, args);
        };
        G__20283.cljs$core$IFn$_invoke$arity$variadic = G__20283__delegate;
        return G__20283;
      }();
      G__20282 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__20282__0.call(this);
          case 1:
            return G__20282__1.call(this, x);
          case 2:
            return G__20282__2.call(this, x, y);
          case 3:
            return G__20282__3.call(this, x, y, z);
          default:
            return G__20282__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20282.cljs$lang$maxFixedArity = 3;
      G__20282.cljs$lang$applyTo = G__20282__4.cljs$lang$applyTo;
      return G__20282;
    }();
  };
  var comp__4 = function() {
    var G__20285__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__20286__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__20287 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__20288 = cljs.core.next.call(null, fs__$2);
              ret = G__20287;
              fs__$2 = G__20288;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__20286 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__20286__delegate.call(this, args);
        };
        G__20286.cljs$lang$maxFixedArity = 0;
        G__20286.cljs$lang$applyTo = function(arglist__20289) {
          var args = cljs.core.seq(arglist__20289);
          return G__20286__delegate(args);
        };
        G__20286.cljs$core$IFn$_invoke$arity$variadic = G__20286__delegate;
        return G__20286;
      }();
    };
    var G__20285 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__20285__delegate.call(this, f1, f2, f3, fs);
    };
    G__20285.cljs$lang$maxFixedArity = 3;
    G__20285.cljs$lang$applyTo = function(arglist__20290) {
      var f1 = cljs.core.first(arglist__20290);
      arglist__20290 = cljs.core.next(arglist__20290);
      var f2 = cljs.core.first(arglist__20290);
      arglist__20290 = cljs.core.next(arglist__20290);
      var f3 = cljs.core.first(arglist__20290);
      var fs = cljs.core.rest(arglist__20290);
      return G__20285__delegate(f1, f2, f3, fs);
    };
    G__20285.cljs$core$IFn$_invoke$arity$variadic = G__20285__delegate;
    return G__20285;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__20291__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__20291 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__20291__delegate.call(this, args);
      };
      G__20291.cljs$lang$maxFixedArity = 0;
      G__20291.cljs$lang$applyTo = function(arglist__20292) {
        var args = cljs.core.seq(arglist__20292);
        return G__20291__delegate(args);
      };
      G__20291.cljs$core$IFn$_invoke$arity$variadic = G__20291__delegate;
      return G__20291;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__20293__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__20293 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__20293__delegate.call(this, args);
      };
      G__20293.cljs$lang$maxFixedArity = 0;
      G__20293.cljs$lang$applyTo = function(arglist__20294) {
        var args = cljs.core.seq(arglist__20294);
        return G__20293__delegate(args);
      };
      G__20293.cljs$core$IFn$_invoke$arity$variadic = G__20293__delegate;
      return G__20293;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__20295__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__20295 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__20295__delegate.call(this, args);
      };
      G__20295.cljs$lang$maxFixedArity = 0;
      G__20295.cljs$lang$applyTo = function(arglist__20296) {
        var args = cljs.core.seq(arglist__20296);
        return G__20295__delegate(args);
      };
      G__20295.cljs$core$IFn$_invoke$arity$variadic = G__20295__delegate;
      return G__20295;
    }();
  };
  var partial__5 = function() {
    var G__20297__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__20298__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__20298 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__20298__delegate.call(this, args);
        };
        G__20298.cljs$lang$maxFixedArity = 0;
        G__20298.cljs$lang$applyTo = function(arglist__20299) {
          var args = cljs.core.seq(arglist__20299);
          return G__20298__delegate(args);
        };
        G__20298.cljs$core$IFn$_invoke$arity$variadic = G__20298__delegate;
        return G__20298;
      }();
    };
    var G__20297 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__20297__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__20297.cljs$lang$maxFixedArity = 4;
    G__20297.cljs$lang$applyTo = function(arglist__20300) {
      var f = cljs.core.first(arglist__20300);
      arglist__20300 = cljs.core.next(arglist__20300);
      var arg1 = cljs.core.first(arglist__20300);
      arglist__20300 = cljs.core.next(arglist__20300);
      var arg2 = cljs.core.first(arglist__20300);
      arglist__20300 = cljs.core.next(arglist__20300);
      var arg3 = cljs.core.first(arglist__20300);
      var more = cljs.core.rest(arglist__20300);
      return G__20297__delegate(f, arg1, arg2, arg3, more);
    };
    G__20297.cljs$core$IFn$_invoke$arity$variadic = G__20297__delegate;
    return G__20297;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__20301 = null;
      var G__20301__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__20301__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__20301__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__20301__4 = function() {
        var G__20302__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__20302 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20302__delegate.call(this, a, b, c, ds);
        };
        G__20302.cljs$lang$maxFixedArity = 3;
        G__20302.cljs$lang$applyTo = function(arglist__20303) {
          var a = cljs.core.first(arglist__20303);
          arglist__20303 = cljs.core.next(arglist__20303);
          var b = cljs.core.first(arglist__20303);
          arglist__20303 = cljs.core.next(arglist__20303);
          var c = cljs.core.first(arglist__20303);
          var ds = cljs.core.rest(arglist__20303);
          return G__20302__delegate(a, b, c, ds);
        };
        G__20302.cljs$core$IFn$_invoke$arity$variadic = G__20302__delegate;
        return G__20302;
      }();
      G__20301 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__20301__1.call(this, a);
          case 2:
            return G__20301__2.call(this, a, b);
          case 3:
            return G__20301__3.call(this, a, b, c);
          default:
            return G__20301__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20301.cljs$lang$maxFixedArity = 3;
      G__20301.cljs$lang$applyTo = G__20301__4.cljs$lang$applyTo;
      return G__20301;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__20304 = null;
      var G__20304__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__20304__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__20304__4 = function() {
        var G__20305__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__20305 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20305__delegate.call(this, a, b, c, ds);
        };
        G__20305.cljs$lang$maxFixedArity = 3;
        G__20305.cljs$lang$applyTo = function(arglist__20306) {
          var a = cljs.core.first(arglist__20306);
          arglist__20306 = cljs.core.next(arglist__20306);
          var b = cljs.core.first(arglist__20306);
          arglist__20306 = cljs.core.next(arglist__20306);
          var c = cljs.core.first(arglist__20306);
          var ds = cljs.core.rest(arglist__20306);
          return G__20305__delegate(a, b, c, ds);
        };
        G__20305.cljs$core$IFn$_invoke$arity$variadic = G__20305__delegate;
        return G__20305;
      }();
      G__20304 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__20304__2.call(this, a, b);
          case 3:
            return G__20304__3.call(this, a, b, c);
          default:
            return G__20304__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20304.cljs$lang$maxFixedArity = 3;
      G__20304.cljs$lang$applyTo = G__20304__4.cljs$lang$applyTo;
      return G__20304;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__20307 = null;
      var G__20307__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__20307__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__20307__4 = function() {
        var G__20308__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__20308 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20308__delegate.call(this, a, b, c, ds);
        };
        G__20308.cljs$lang$maxFixedArity = 3;
        G__20308.cljs$lang$applyTo = function(arglist__20309) {
          var a = cljs.core.first(arglist__20309);
          arglist__20309 = cljs.core.next(arglist__20309);
          var b = cljs.core.first(arglist__20309);
          arglist__20309 = cljs.core.next(arglist__20309);
          var c = cljs.core.first(arglist__20309);
          var ds = cljs.core.rest(arglist__20309);
          return G__20308__delegate(a, b, c, ds);
        };
        G__20308.cljs$core$IFn$_invoke$arity$variadic = G__20308__delegate;
        return G__20308;
      }();
      G__20307 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__20307__2.call(this, a, b);
          case 3:
            return G__20307__3.call(this, a, b, c);
          default:
            return G__20307__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20307.cljs$lang$maxFixedArity = 3;
      G__20307.cljs$lang$applyTo = G__20307__4.cljs$lang$applyTo;
      return G__20307;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__17509__auto___20310 = size;
          var i_20311 = 0;
          while (true) {
            if (i_20311 < n__17509__auto___20310) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_20311, cljs.core._nth.call(null, c, i_20311)));
              var G__20312 = i_20311 + 1;
              i_20311 = G__20312;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__17509__auto___20313 = size;
        var i_20314 = 0;
        while (true) {
          if (i_20314 < n__17509__auto___20313) {
            var x_20315 = f.call(null, cljs.core._nth.call(null, c, i_20314));
            if (x_20315 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_20315);
            }
            var G__20316 = i_20314 + 1;
            i_20314 = G__20316;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__17509__auto___20317 = size;
          var i_20318 = 0;
          while (true) {
            if (i_20318 < n__17509__auto___20317) {
              var x_20319 = f.call(null, idx + i_20318, cljs.core._nth.call(null, c, i_20318));
              if (x_20319 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_20319);
              }
              var G__20320 = i_20318 + 1;
              i_20318 = G__20320;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__16649__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__16649__auto__)) {
            return p.call(null, y);
          } else {
            return and__16649__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__16649__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__16649__auto__)) {
            var and__16649__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__16649__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__16649__auto____$1;
            }
          } else {
            return and__16649__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__20327__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__20327 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20327__delegate.call(this, x, y, z, args);
        };
        G__20327.cljs$lang$maxFixedArity = 3;
        G__20327.cljs$lang$applyTo = function(arglist__20328) {
          var x = cljs.core.first(arglist__20328);
          arglist__20328 = cljs.core.next(arglist__20328);
          var y = cljs.core.first(arglist__20328);
          arglist__20328 = cljs.core.next(arglist__20328);
          var z = cljs.core.first(arglist__20328);
          var args = cljs.core.rest(arglist__20328);
          return G__20327__delegate(x, y, z, args);
        };
        G__20327.cljs$core$IFn$_invoke$arity$variadic = G__20327__delegate;
        return G__20327;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__16649__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__16649__auto__)) {
            return p2.call(null, x);
          } else {
            return and__16649__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__16649__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__16649__auto__)) {
            var and__16649__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__16649__auto____$1)) {
              var and__16649__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__16649__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__16649__auto____$2;
              }
            } else {
              return and__16649__auto____$1;
            }
          } else {
            return and__16649__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__16649__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__16649__auto__)) {
            var and__16649__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__16649__auto____$1)) {
              var and__16649__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__16649__auto____$2)) {
                var and__16649__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__16649__auto____$3)) {
                  var and__16649__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__16649__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__16649__auto____$4;
                  }
                } else {
                  return and__16649__auto____$3;
                }
              } else {
                return and__16649__auto____$2;
              }
            } else {
              return and__16649__auto____$1;
            }
          } else {
            return and__16649__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__20329__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__20321_SHARP_) {
            var and__16649__auto__ = p1.call(null, p1__20321_SHARP_);
            if (cljs.core.truth_(and__16649__auto__)) {
              return p2.call(null, p1__20321_SHARP_);
            } else {
              return and__16649__auto__;
            }
          }, args));
        };
        var G__20329 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20329__delegate.call(this, x, y, z, args);
        };
        G__20329.cljs$lang$maxFixedArity = 3;
        G__20329.cljs$lang$applyTo = function(arglist__20330) {
          var x = cljs.core.first(arglist__20330);
          arglist__20330 = cljs.core.next(arglist__20330);
          var y = cljs.core.first(arglist__20330);
          arglist__20330 = cljs.core.next(arglist__20330);
          var z = cljs.core.first(arglist__20330);
          var args = cljs.core.rest(arglist__20330);
          return G__20329__delegate(x, y, z, args);
        };
        G__20329.cljs$core$IFn$_invoke$arity$variadic = G__20329__delegate;
        return G__20329;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__16649__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__16649__auto__)) {
            var and__16649__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__16649__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__16649__auto____$1;
            }
          } else {
            return and__16649__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__16649__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__16649__auto__)) {
            var and__16649__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__16649__auto____$1)) {
              var and__16649__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__16649__auto____$2)) {
                var and__16649__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__16649__auto____$3)) {
                  var and__16649__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__16649__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__16649__auto____$4;
                  }
                } else {
                  return and__16649__auto____$3;
                }
              } else {
                return and__16649__auto____$2;
              }
            } else {
              return and__16649__auto____$1;
            }
          } else {
            return and__16649__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__16649__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__16649__auto__)) {
            var and__16649__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__16649__auto____$1)) {
              var and__16649__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__16649__auto____$2)) {
                var and__16649__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__16649__auto____$3)) {
                  var and__16649__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__16649__auto____$4)) {
                    var and__16649__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__16649__auto____$5)) {
                      var and__16649__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__16649__auto____$6)) {
                        var and__16649__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__16649__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__16649__auto____$7;
                        }
                      } else {
                        return and__16649__auto____$6;
                      }
                    } else {
                      return and__16649__auto____$5;
                    }
                  } else {
                    return and__16649__auto____$4;
                  }
                } else {
                  return and__16649__auto____$3;
                }
              } else {
                return and__16649__auto____$2;
              }
            } else {
              return and__16649__auto____$1;
            }
          } else {
            return and__16649__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__20331__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__20322_SHARP_) {
            var and__16649__auto__ = p1.call(null, p1__20322_SHARP_);
            if (cljs.core.truth_(and__16649__auto__)) {
              var and__16649__auto____$1 = p2.call(null, p1__20322_SHARP_);
              if (cljs.core.truth_(and__16649__auto____$1)) {
                return p3.call(null, p1__20322_SHARP_);
              } else {
                return and__16649__auto____$1;
              }
            } else {
              return and__16649__auto__;
            }
          }, args));
        };
        var G__20331 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20331__delegate.call(this, x, y, z, args);
        };
        G__20331.cljs$lang$maxFixedArity = 3;
        G__20331.cljs$lang$applyTo = function(arglist__20332) {
          var x = cljs.core.first(arglist__20332);
          arglist__20332 = cljs.core.next(arglist__20332);
          var y = cljs.core.first(arglist__20332);
          arglist__20332 = cljs.core.next(arglist__20332);
          var z = cljs.core.first(arglist__20332);
          var args = cljs.core.rest(arglist__20332);
          return G__20331__delegate(x, y, z, args);
        };
        G__20331.cljs$core$IFn$_invoke$arity$variadic = G__20331__delegate;
        return G__20331;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__20333__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__20323_SHARP_) {
            return p1__20323_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__20324_SHARP_) {
            var and__16649__auto__ = p1__20324_SHARP_.call(null, x);
            if (cljs.core.truth_(and__16649__auto__)) {
              return p1__20324_SHARP_.call(null, y);
            } else {
              return and__16649__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__20325_SHARP_) {
            var and__16649__auto__ = p1__20325_SHARP_.call(null, x);
            if (cljs.core.truth_(and__16649__auto__)) {
              var and__16649__auto____$1 = p1__20325_SHARP_.call(null, y);
              if (cljs.core.truth_(and__16649__auto____$1)) {
                return p1__20325_SHARP_.call(null, z);
              } else {
                return and__16649__auto____$1;
              }
            } else {
              return and__16649__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__20334__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__20326_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__20326_SHARP_, args);
            }, ps__$1));
          };
          var G__20334 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__20334__delegate.call(this, x, y, z, args);
          };
          G__20334.cljs$lang$maxFixedArity = 3;
          G__20334.cljs$lang$applyTo = function(arglist__20335) {
            var x = cljs.core.first(arglist__20335);
            arglist__20335 = cljs.core.next(arglist__20335);
            var y = cljs.core.first(arglist__20335);
            arglist__20335 = cljs.core.next(arglist__20335);
            var z = cljs.core.first(arglist__20335);
            var args = cljs.core.rest(arglist__20335);
            return G__20334__delegate(x, y, z, args);
          };
          G__20334.cljs$core$IFn$_invoke$arity$variadic = G__20334__delegate;
          return G__20334;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__20333 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__20333__delegate.call(this, p1, p2, p3, ps);
    };
    G__20333.cljs$lang$maxFixedArity = 3;
    G__20333.cljs$lang$applyTo = function(arglist__20336) {
      var p1 = cljs.core.first(arglist__20336);
      arglist__20336 = cljs.core.next(arglist__20336);
      var p2 = cljs.core.first(arglist__20336);
      arglist__20336 = cljs.core.next(arglist__20336);
      var p3 = cljs.core.first(arglist__20336);
      var ps = cljs.core.rest(arglist__20336);
      return G__20333__delegate(p1, p2, p3, ps);
    };
    G__20333.cljs$core$IFn$_invoke$arity$variadic = G__20333__delegate;
    return G__20333;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__16661__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__16661__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__16661__auto____$1)) {
            return or__16661__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__20343__delegate = function(x, y, z, args) {
          var or__16661__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__16661__auto__)) {
            return or__16661__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__20343 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20343__delegate.call(this, x, y, z, args);
        };
        G__20343.cljs$lang$maxFixedArity = 3;
        G__20343.cljs$lang$applyTo = function(arglist__20344) {
          var x = cljs.core.first(arglist__20344);
          arglist__20344 = cljs.core.next(arglist__20344);
          var y = cljs.core.first(arglist__20344);
          arglist__20344 = cljs.core.next(arglist__20344);
          var z = cljs.core.first(arglist__20344);
          var args = cljs.core.rest(arglist__20344);
          return G__20343__delegate(x, y, z, args);
        };
        G__20343.cljs$core$IFn$_invoke$arity$variadic = G__20343__delegate;
        return G__20343;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__16661__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__16661__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__16661__auto____$1)) {
            return or__16661__auto____$1;
          } else {
            var or__16661__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__16661__auto____$2)) {
              return or__16661__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__16661__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__16661__auto____$1)) {
            return or__16661__auto____$1;
          } else {
            var or__16661__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__16661__auto____$2)) {
              return or__16661__auto____$2;
            } else {
              var or__16661__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__16661__auto____$3)) {
                return or__16661__auto____$3;
              } else {
                var or__16661__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__16661__auto____$4)) {
                  return or__16661__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__20345__delegate = function(x, y, z, args) {
          var or__16661__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__16661__auto__)) {
            return or__16661__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__20337_SHARP_) {
              var or__16661__auto____$1 = p1.call(null, p1__20337_SHARP_);
              if (cljs.core.truth_(or__16661__auto____$1)) {
                return or__16661__auto____$1;
              } else {
                return p2.call(null, p1__20337_SHARP_);
              }
            }, args);
          }
        };
        var G__20345 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20345__delegate.call(this, x, y, z, args);
        };
        G__20345.cljs$lang$maxFixedArity = 3;
        G__20345.cljs$lang$applyTo = function(arglist__20346) {
          var x = cljs.core.first(arglist__20346);
          arglist__20346 = cljs.core.next(arglist__20346);
          var y = cljs.core.first(arglist__20346);
          arglist__20346 = cljs.core.next(arglist__20346);
          var z = cljs.core.first(arglist__20346);
          var args = cljs.core.rest(arglist__20346);
          return G__20345__delegate(x, y, z, args);
        };
        G__20345.cljs$core$IFn$_invoke$arity$variadic = G__20345__delegate;
        return G__20345;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__16661__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__16661__auto____$1)) {
            return or__16661__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__16661__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__16661__auto____$1)) {
            return or__16661__auto____$1;
          } else {
            var or__16661__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__16661__auto____$2)) {
              return or__16661__auto____$2;
            } else {
              var or__16661__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__16661__auto____$3)) {
                return or__16661__auto____$3;
              } else {
                var or__16661__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__16661__auto____$4)) {
                  return or__16661__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__16661__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__16661__auto____$1)) {
            return or__16661__auto____$1;
          } else {
            var or__16661__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__16661__auto____$2)) {
              return or__16661__auto____$2;
            } else {
              var or__16661__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__16661__auto____$3)) {
                return or__16661__auto____$3;
              } else {
                var or__16661__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__16661__auto____$4)) {
                  return or__16661__auto____$4;
                } else {
                  var or__16661__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__16661__auto____$5)) {
                    return or__16661__auto____$5;
                  } else {
                    var or__16661__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__16661__auto____$6)) {
                      return or__16661__auto____$6;
                    } else {
                      var or__16661__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__16661__auto____$7)) {
                        return or__16661__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__20347__delegate = function(x, y, z, args) {
          var or__16661__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__16661__auto__)) {
            return or__16661__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__20338_SHARP_) {
              var or__16661__auto____$1 = p1.call(null, p1__20338_SHARP_);
              if (cljs.core.truth_(or__16661__auto____$1)) {
                return or__16661__auto____$1;
              } else {
                var or__16661__auto____$2 = p2.call(null, p1__20338_SHARP_);
                if (cljs.core.truth_(or__16661__auto____$2)) {
                  return or__16661__auto____$2;
                } else {
                  return p3.call(null, p1__20338_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__20347 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20347__delegate.call(this, x, y, z, args);
        };
        G__20347.cljs$lang$maxFixedArity = 3;
        G__20347.cljs$lang$applyTo = function(arglist__20348) {
          var x = cljs.core.first(arglist__20348);
          arglist__20348 = cljs.core.next(arglist__20348);
          var y = cljs.core.first(arglist__20348);
          arglist__20348 = cljs.core.next(arglist__20348);
          var z = cljs.core.first(arglist__20348);
          var args = cljs.core.rest(arglist__20348);
          return G__20347__delegate(x, y, z, args);
        };
        G__20347.cljs$core$IFn$_invoke$arity$variadic = G__20347__delegate;
        return G__20347;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__20349__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__20339_SHARP_) {
            return p1__20339_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__20340_SHARP_) {
            var or__16661__auto__ = p1__20340_SHARP_.call(null, x);
            if (cljs.core.truth_(or__16661__auto__)) {
              return or__16661__auto__;
            } else {
              return p1__20340_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__20341_SHARP_) {
            var or__16661__auto__ = p1__20341_SHARP_.call(null, x);
            if (cljs.core.truth_(or__16661__auto__)) {
              return or__16661__auto__;
            } else {
              var or__16661__auto____$1 = p1__20341_SHARP_.call(null, y);
              if (cljs.core.truth_(or__16661__auto____$1)) {
                return or__16661__auto____$1;
              } else {
                return p1__20341_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__20350__delegate = function(x, y, z, args) {
            var or__16661__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__16661__auto__)) {
              return or__16661__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__20342_SHARP_) {
                return cljs.core.some.call(null, p1__20342_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__20350 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__20350__delegate.call(this, x, y, z, args);
          };
          G__20350.cljs$lang$maxFixedArity = 3;
          G__20350.cljs$lang$applyTo = function(arglist__20351) {
            var x = cljs.core.first(arglist__20351);
            arglist__20351 = cljs.core.next(arglist__20351);
            var y = cljs.core.first(arglist__20351);
            arglist__20351 = cljs.core.next(arglist__20351);
            var z = cljs.core.first(arglist__20351);
            var args = cljs.core.rest(arglist__20351);
            return G__20350__delegate(x, y, z, args);
          };
          G__20350.cljs$core$IFn$_invoke$arity$variadic = G__20350__delegate;
          return G__20350;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__20349 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__20349__delegate.call(this, p1, p2, p3, ps);
    };
    G__20349.cljs$lang$maxFixedArity = 3;
    G__20349.cljs$lang$applyTo = function(arglist__20352) {
      var p1 = cljs.core.first(arglist__20352);
      arglist__20352 = cljs.core.next(arglist__20352);
      var p2 = cljs.core.first(arglist__20352);
      arglist__20352 = cljs.core.next(arglist__20352);
      var p3 = cljs.core.first(arglist__20352);
      var ps = cljs.core.rest(arglist__20352);
      return G__20349__delegate(p1, p2, p3, ps);
    };
    G__20349.cljs$core$IFn$_invoke$arity$variadic = G__20349__delegate;
    return G__20349;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__17509__auto___20354 = size;
          var i_20355 = 0;
          while (true) {
            if (i_20355 < n__17509__auto___20354) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_20355)));
              var G__20356 = i_20355 + 1;
              i_20355 = G__20356;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__20357__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__20353_SHARP_) {
        return cljs.core.apply.call(null, f, p1__20353_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__20357 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__20357__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__20357.cljs$lang$maxFixedArity = 4;
    G__20357.cljs$lang$applyTo = function(arglist__20358) {
      var f = cljs.core.first(arglist__20358);
      arglist__20358 = cljs.core.next(arglist__20358);
      var c1 = cljs.core.first(arglist__20358);
      arglist__20358 = cljs.core.next(arglist__20358);
      var c2 = cljs.core.first(arglist__20358);
      arglist__20358 = cljs.core.next(arglist__20358);
      var c3 = cljs.core.first(arglist__20358);
      var colls = cljs.core.rest(arglist__20358);
      return G__20357__delegate(f, c1, c2, c3, colls);
    };
    G__20357.cljs$core$IFn$_invoke$arity$variadic = G__20357__delegate;
    return G__20357;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__20359 = n__$1 - 1;
        var G__20360 = cljs.core.rest.call(null, s);
        n__$1 = G__20359;
        coll__$1 = G__20360;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__20361 = cljs.core.next.call(null, s);
      var G__20362 = cljs.core.next.call(null, lead);
      s = G__20361;
      lead = G__20362;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__16649__auto__ = s;
        if (and__16649__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__16649__auto__;
        }
      }())) {
        var G__20363 = pred__$1;
        var G__20364 = cljs.core.rest.call(null, s);
        pred__$1 = G__20363;
        coll__$1 = G__20364;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__20365__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__20365 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20365__delegate.call(this, c1, c2, colls);
    };
    G__20365.cljs$lang$maxFixedArity = 2;
    G__20365.cljs$lang$applyTo = function(arglist__20366) {
      var c1 = cljs.core.first(arglist__20366);
      arglist__20366 = cljs.core.next(arglist__20366);
      var c2 = cljs.core.first(arglist__20366);
      var colls = cljs.core.rest(arglist__20366);
      return G__20365__delegate(c1, c2, colls);
    };
    G__20365.cljs$core$IFn$_invoke$arity$variadic = G__20365__delegate;
    return G__20365;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__20367__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__20367 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__20367__delegate.call(this, f, coll, colls);
    };
    G__20367.cljs$lang$maxFixedArity = 2;
    G__20367.cljs$lang$applyTo = function(arglist__20368) {
      var f = cljs.core.first(arglist__20368);
      arglist__20368 = cljs.core.next(arglist__20368);
      var coll = cljs.core.first(arglist__20368);
      var colls = cljs.core.rest(arglist__20368);
      return G__20367__delegate(f, coll, colls);
    };
    G__20367.cljs$core$IFn$_invoke$arity$variadic = G__20367__delegate;
    return G__20367;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__17509__auto___20369 = size;
        var i_20370 = 0;
        while (true) {
          if (i_20370 < n__17509__auto___20369) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_20370)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_20370));
            } else {
            }
            var G__20371 = i_20370 + 1;
            i_20370 = G__20371;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__20372_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__20372_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__20374 = to;
      if (G__20374) {
        var bit__17304__auto__ = G__20374.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__17304__auto__ || G__20374.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__20375__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__20375 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__20375__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__20375.cljs$lang$maxFixedArity = 4;
    G__20375.cljs$lang$applyTo = function(arglist__20376) {
      var f = cljs.core.first(arglist__20376);
      arglist__20376 = cljs.core.next(arglist__20376);
      var c1 = cljs.core.first(arglist__20376);
      arglist__20376 = cljs.core.next(arglist__20376);
      var c2 = cljs.core.first(arglist__20376);
      arglist__20376 = cljs.core.next(arglist__20376);
      var c3 = cljs.core.first(arglist__20376);
      var colls = cljs.core.rest(arglist__20376);
      return G__20375__delegate(f, c1, c2, c3, colls);
    };
    G__20375.cljs$core$IFn$_invoke$arity$variadic = G__20375__delegate;
    return G__20375;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__20378 = m__$1;
          if (G__20378) {
            var bit__17311__auto__ = G__20378.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__17311__auto__ || G__20378.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__20378.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__20378);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__20378);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__20379 = sentinel;
            var G__20380 = m__$2;
            var G__20381 = cljs.core.next.call(null, ks__$1);
            sentinel = G__20379;
            m__$1 = G__20380;
            ks__$1 = G__20381;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__20382, v) {
  var vec__20384 = p__20382;
  var k = cljs.core.nth.call(null, vec__20384, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__20384, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__20385, f) {
    var vec__20395 = p__20385;
    var k = cljs.core.nth.call(null, vec__20395, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__20395, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__20386, f, a) {
    var vec__20396 = p__20386;
    var k = cljs.core.nth.call(null, vec__20396, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__20396, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__20387, f, a, b) {
    var vec__20397 = p__20387;
    var k = cljs.core.nth.call(null, vec__20397, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__20397, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__20388, f, a, b, c) {
    var vec__20398 = p__20388;
    var k = cljs.core.nth.call(null, vec__20398, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__20398, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__20400__delegate = function(m, p__20389, f, a, b, c, args) {
      var vec__20399 = p__20389;
      var k = cljs.core.nth.call(null, vec__20399, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__20399, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__20400 = function(m, p__20389, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__20400__delegate.call(this, m, p__20389, f, a, b, c, args);
    };
    G__20400.cljs$lang$maxFixedArity = 6;
    G__20400.cljs$lang$applyTo = function(arglist__20401) {
      var m = cljs.core.first(arglist__20401);
      arglist__20401 = cljs.core.next(arglist__20401);
      var p__20389 = cljs.core.first(arglist__20401);
      arglist__20401 = cljs.core.next(arglist__20401);
      var f = cljs.core.first(arglist__20401);
      arglist__20401 = cljs.core.next(arglist__20401);
      var a = cljs.core.first(arglist__20401);
      arglist__20401 = cljs.core.next(arglist__20401);
      var b = cljs.core.first(arglist__20401);
      arglist__20401 = cljs.core.next(arglist__20401);
      var c = cljs.core.first(arglist__20401);
      var args = cljs.core.rest(arglist__20401);
      return G__20400__delegate(m, p__20389, f, a, b, c, args);
    };
    G__20400.cljs$core$IFn$_invoke$arity$variadic = G__20400__delegate;
    return G__20400;
  }();
  update_in = function(m, p__20389, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__20389, f);
      case 4:
        return update_in__4.call(this, m, p__20389, f, a);
      case 5:
        return update_in__5.call(this, m, p__20389, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__20389, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__20389, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__17231__auto__, writer__17232__auto__, opts__17233__auto__) {
  return cljs.core._write.call(null, writer__17232__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__20402 = ll - 5;
      var G__20403 = r;
      ll = G__20402;
      ret = G__20403;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__20404 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__20405 = level - 5;
          node = G__20404;
          level = G__20405;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__20407 = null;
  var G__20407__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__20407__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__20407 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20407__2.call(this, self__, k);
      case 3:
        return G__20407__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20407;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args20406) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20406)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__20408 = j + 1;
              var G__20409 = init__$2;
              j = G__20408;
              init__$1 = G__20409;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__20410 = i + step_init[0];
        i = G__20410;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__17509__auto___20411 = len;
    var i_20412 = 0;
    while (true) {
      if (i_20412 < n__17509__auto___20411) {
        new_tail[i_20412] = self__.tail[i_20412];
        var G__20413 = i_20412 + 1;
        i_20412 = G__20413;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__20414 = i + 1;
        var G__20415 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__20414;
        out = G__20415;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__20416) {
    var args = cljs.core.seq(arglist__20416);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.call = function() {
  var G__20418 = null;
  var G__20418__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__20418__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__20418 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20418__2.call(this, self__, k);
      case 3:
        return G__20418__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20418;
}();
cljs.core.Subvec.prototype.apply = function(self__, args20417) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20417)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__16968__auto__ = self__.end;
    var y__16969__auto__ = v_pos + 1;
    return x__16968__auto__ > y__16969__auto__ ? x__16968__auto__ : y__16969__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__20419 = meta;
      var G__20420 = v.v;
      var G__20421 = v.start + start;
      var G__20422 = v.start + end;
      var G__20423 = __hash;
      meta = G__20419;
      v = G__20420;
      start = G__20421;
      end = G__20422;
      __hash = G__20423;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj20427 = {};
    return obj20427;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__20428 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__20429 = level - 5;
          node = G__20428;
          level = G__20429;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__20431 = null;
  var G__20431__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20431__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20431 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20431__2.call(this, self__, k);
      case 3:
        return G__20431__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20431;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args20430) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20430)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__16661__auto__ = self__.rear;
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__16661__auto__ = self__.front;
    if (cljs.core.truth_(or__16661__auto__)) {
      return or__16661__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__20432 = i + incr;
        i = G__20432;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__20433 = i + 1;
      var G__20434 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__20433;
      out = G__20434;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj20438 = {};
    return obj20438;
  }();
  var l = ks.length;
  var i_20439 = 0;
  while (true) {
    if (i_20439 < l) {
      var k_20440 = ks[i_20439];
      new_obj[k_20440] = obj[k_20440];
      var G__20441 = i_20439 + 1;
      i_20439 = G__20441;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__20444 = null;
  var G__20444__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20444__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20444 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20444__2.call(this, self__, k);
      case 3:
        return G__20444__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20444;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args20443) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20443)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__20445 = cljs.core.rest.call(null, keys__$1);
        var G__20446 = init__$2;
        keys__$1 = G__20445;
        init__$1 = G__20446;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__20442_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__20442_SHARP_, self__.strobj[p1__20442_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj20448 = {};
  return obj20448;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__20449 = i + 2;
          i = G__20449;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__20450 = i + 2;
          i = G__20450;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__20451 = i + 2;
          i = G__20451;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__20452 = i + 2;
          i = G__20452;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__20453 = i + 2;
          i = G__20453;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_20454 = 0;
  while (true) {
    if (i_20454 < l) {
      narr[i_20454] = arr[i_20454];
      var G__20455 = i_20454 + 1;
      i_20454 = G__20455;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj20458 = {};
    return obj20458;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__20459 = cljs.core.aclone.call(null, self__.arr);
          G__20459[idx + 1] = v;
          return G__20459;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__20460 = null;
  var G__20460__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20460__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20460 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20460__2.call(this, self__, k);
      case 3:
        return G__20460__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20460;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args20456) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20456)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__20461 = i + 2;
        var G__20462 = init__$2;
        i = G__20461;
        init__$1 = G__20462;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__20463 = s + 2;
            var G__20464 = d;
            s = G__20463;
            d = G__20464;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__20465 = s + 2;
              var G__20466 = d + 2;
              s = G__20465;
              d = G__20466;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__20467 = i + 2;
        var G__20468 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__20467;
        ret = G__20468;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__20469_20471 = self__.arr;
      G__20469_20471.pop();
      G__20469_20471.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__20470 = o;
      if (G__20470) {
        var bit__17311__auto__ = G__20470.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__17311__auto__ || G__20470.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__20470.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__20470);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__20470);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__20472 = cljs.core.next.call(null, es);
          var G__20473 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__20472;
          tcoll__$2 = G__20473;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__20474 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__20475 = i + 2;
      out = G__20474;
      i = G__20475;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__17231__auto__, writer__17232__auto__, opts__17233__auto__) {
  return cljs.core._write.call(null, writer__17232__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__20478 = cljs.core.aclone.call(null, arr);
    G__20478[i] = a;
    return G__20478;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__20479 = cljs.core.aclone.call(null, arr);
    G__20479[i] = a;
    G__20479[j] = b;
    return G__20479;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__20480 = i + 2;
        var G__20481 = init__$2;
        i = G__20480;
        init__$1 = G__20481;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_20482 = 0;
        var j_20483 = 0;
        while (true) {
          if (i_20482 < 32) {
            if ((self__.bitmap >>> i_20482 & 1) === 0) {
              var G__20484 = i_20482 + 1;
              var G__20485 = j_20483;
              i_20482 = G__20484;
              j_20483 = G__20485;
              continue;
            } else {
              nodes[i_20482] = !(self__.arr[j_20483] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_20483]), self__.arr[j_20483], self__.arr[j_20483 + 1], added_leaf_QMARK_) : self__.arr[j_20483 + 1];
              var G__20486 = i_20482 + 1;
              var G__20487 = j_20483 + 2;
              i_20482 = G__20486;
              j_20483 = G__20487;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_20488 = 0;
      var j_20489 = 0;
      while (true) {
        if (i_20488 < 32) {
          if ((self__.bitmap >>> i_20488 & 1) === 0) {
            var G__20490 = i_20488 + 1;
            var G__20491 = j_20489;
            i_20488 = G__20490;
            j_20489 = G__20491;
            continue;
          } else {
            nodes[i_20488] = !(self__.arr[j_20489] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_20489]), self__.arr[j_20489], self__.arr[j_20489 + 1], added_leaf_QMARK_) : self__.arr[j_20489 + 1];
            var G__20492 = i_20488 + 1;
            var G__20493 = j_20489 + 2;
            i_20488 = G__20492;
            j_20489 = G__20493;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__20494 = i + 1;
        var G__20495 = j + 2;
        var G__20496 = bitmap | 1 << i;
        i = G__20494;
        j = G__20495;
        bitmap = G__20496;
        continue;
      } else {
        var G__20497 = i + 1;
        var G__20498 = j;
        var G__20499 = bitmap;
        i = G__20497;
        j = G__20498;
        bitmap = G__20499;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__20500 = i + 1;
          var G__20501 = init__$2;
          i = G__20500;
          init__$1 = G__20501;
          continue;
        }
      } else {
        var G__20502 = i + 1;
        var G__20503 = init__$1;
        i = G__20502;
        init__$1 = G__20503;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__20504 = i + 2;
        i = G__20504;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__20505 = j + 2;
                j = G__20505;
                continue;
              }
            } else {
              var G__20506 = j + 2;
              j = G__20506;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__20507 = j + 1;
              j = G__20507;
              continue;
            }
          } else {
            var G__20508 = j + 1;
            j = G__20508;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj20511 = {};
    return obj20511;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__20512 = null;
  var G__20512__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20512__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20512 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20512__2.call(this, self__, k);
      case 3:
        return G__20512__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20512;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args20509) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20509)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__20513 = i + 1;
      var G__20514 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__20513;
      out = G__20514;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__20515 = o;
      if (G__20515) {
        var bit__17311__auto__ = G__20515.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__17311__auto__ || G__20515.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__20515.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__20515);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__20515);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__20516 = cljs.core.next.call(null, es);
          var G__20517 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__20516;
          tcoll__$1 = G__20517;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__20518 = ascending_QMARK_ ? t.left : t.right;
      var G__20519 = cljs.core.conj.call(null, stack__$1, t);
      t = G__20518;
      stack__$1 = G__20519;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__20521 = null;
  var G__20521__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20521__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20521 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20521__2.call(this, self__, k);
      case 3:
        return G__20521__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20521;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args20520) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20520)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__20523 = null;
  var G__20523__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20523__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20523 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20523__2.call(this, self__, k);
      case 3:
        return G__20523__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20523;
}();
cljs.core.RedNode.prototype.apply = function(self__, args20522) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20522)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__20525 = null;
  var G__20525__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20525__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20525 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20525__2.call(this, self__, k);
      case 3:
        return G__20525__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20525;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args20524) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20524)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__20526 = t.left;
          t = G__20526;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__20527 = t.right;
            t = G__20527;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__20528 = cljs.core.conj.call(null, stack, t);
              var G__20529 = t.left;
              stack = G__20528;
              t = G__20529;
              continue;
            } else {
              var G__20530 = stack;
              var G__20531 = t.right;
              stack = G__20530;
              t = G__20531;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__20532 = cljs.core.conj.call(null, stack, t);
                var G__20533 = t.right;
                stack = G__20532;
                t = G__20533;
                continue;
              } else {
                var G__20534 = stack;
                var G__20535 = t.left;
                stack = G__20534;
                t = G__20535;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__20536 = cljs.core.nnext.call(null, in$);
        var G__20537 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__20536;
        out = G__20537;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__20538) {
    var keyvals = cljs.core.seq(arglist__20538);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__20539) {
    var keyvals = cljs.core.seq(arglist__20539);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj20543 = {};
      return obj20543;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__20544 = cljs.core.nnext.call(null, kvs);
        kvs = G__20544;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__20545) {
    var keyvals = cljs.core.seq(arglist__20545);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__20546 = cljs.core.nnext.call(null, in$);
        var G__20547 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__20546;
        out = G__20547;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__20548) {
    var keyvals = cljs.core.seq(arglist__20548);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__20549 = cljs.core.nnext.call(null, in$);
        var G__20550 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__20549;
        out = G__20550;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__20551) {
    var comparator = cljs.core.first(arglist__20551);
    var keyvals = cljs.core.rest(arglist__20551);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__20552 = self__.mseq;
    if (G__20552) {
      var bit__17311__auto__ = G__20552.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__17311__auto__ || G__20552.cljs$core$INext$) {
        return true;
      } else {
        if (!G__20552.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__20552);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__20552);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__20553 = self__.mseq;
    if (G__20553) {
      var bit__17311__auto__ = G__20553.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__17311__auto__ || G__20553.cljs$core$INext$) {
        return true;
      } else {
        if (!G__20553.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__20553);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__20553);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__20554 = self__.mseq;
    if (G__20554) {
      var bit__17311__auto__ = G__20554.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__17311__auto__ || G__20554.cljs$core$INext$) {
        return true;
      } else {
        if (!G__20554.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__20554);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__20554);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__20555 = self__.mseq;
    if (G__20555) {
      var bit__17311__auto__ = G__20555.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__17311__auto__ || G__20555.cljs$core$INext$) {
        return true;
      } else {
        if (!G__20555.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__20555);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__20555);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__20556_SHARP_, p2__20557_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__16661__auto__ = p1__20556_SHARP_;
          if (cljs.core.truth_(or__16661__auto__)) {
            return or__16661__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__20557_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__20558) {
    var maps = cljs.core.seq(arglist__20558);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__16661__auto__ = m1;
            if (cljs.core.truth_(or__16661__auto__)) {
              return or__16661__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__20559) {
    var f = cljs.core.first(arglist__20559);
    var maps = cljs.core.rest(arglist__20559);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__20560 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__20561 = cljs.core.next.call(null, keys);
      ret = G__20560;
      keys = G__20561;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__20564 = null;
  var G__20564__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20564__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20564 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20564__2.call(this, self__, k);
      case 3:
        return G__20564__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20564;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args20563) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20563)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__20562_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__20562_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__20565 = i + 1;
        var G__20566 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__20565;
        out = G__20566;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__20567 = i + 1;
        var G__20568 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__20567;
        out = G__20568;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__20570 = null;
  var G__20570__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__20570__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__20570 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20570__2.call(this, self__, k);
      case 3:
        return G__20570__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20570;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args20569) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20569)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__20573 = null;
  var G__20573__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20573__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20573 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20573__2.call(this, self__, k);
      case 3:
        return G__20573__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__20573;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args20572) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args20572)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__20571_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__20571_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__17503__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__17503__auto__.length) {
        var G__20574 = i + 1;
        var G__20575 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__20574;
        res = G__20575;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__20576 = cljs.core._next.call(null, in$__$1);
            var G__20577 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__20576;
            out = G__20577;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__20578__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__20578 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__20578__delegate.call(this, keys);
    };
    G__20578.cljs$lang$maxFixedArity = 0;
    G__20578.cljs$lang$applyTo = function(arglist__20579) {
      var keys = cljs.core.seq(arglist__20579);
      return G__20578__delegate(keys);
    };
    G__20578.cljs$core$IFn$_invoke$arity$variadic = G__20578__delegate;
    return G__20578;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__20580) {
    var keys = cljs.core.seq(arglist__20580);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__20581) {
    var comparator = cljs.core.first(arglist__20581);
    var keys = cljs.core.rest(arglist__20581);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__20582_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__20582_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__20582_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__20589, seen__$1) {
        while (true) {
          var vec__20590 = p__20589;
          var f = cljs.core.nth.call(null, vec__20590, 0, null);
          var xs__$1 = vec__20590;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__20591 = cljs.core.rest.call(null, s);
              var G__20592 = seen__$1;
              p__20589 = G__20591;
              seen__$1 = G__20592;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__20593 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__20594 = cljs.core.next.call(null, s__$1);
      ret = G__20593;
      s__$1 = G__20594;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__20596 = x;
    if (G__20596) {
      var bit__17304__auto__ = G__20596.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__17304__auto__ || G__20596.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__20597 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__20598 = cljs.core.next.call(null, ks);
      var G__20599 = cljs.core.next.call(null, vs);
      map = G__20597;
      ks = G__20598;
      vs = G__20599;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__20602__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__20600_SHARP_, p2__20601_SHARP_) {
        return max_key.call(null, k, p1__20600_SHARP_, p2__20601_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__20602 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__20602__delegate.call(this, k, x, y, more);
    };
    G__20602.cljs$lang$maxFixedArity = 3;
    G__20602.cljs$lang$applyTo = function(arglist__20603) {
      var k = cljs.core.first(arglist__20603);
      arglist__20603 = cljs.core.next(arglist__20603);
      var x = cljs.core.first(arglist__20603);
      arglist__20603 = cljs.core.next(arglist__20603);
      var y = cljs.core.first(arglist__20603);
      var more = cljs.core.rest(arglist__20603);
      return G__20602__delegate(k, x, y, more);
    };
    G__20602.cljs$core$IFn$_invoke$arity$variadic = G__20602__delegate;
    return G__20602;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__20606__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__20604_SHARP_, p2__20605_SHARP_) {
        return min_key.call(null, k, p1__20604_SHARP_, p2__20605_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__20606 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__20606__delegate.call(this, k, x, y, more);
    };
    G__20606.cljs$lang$maxFixedArity = 3;
    G__20606.cljs$lang$applyTo = function(arglist__20607) {
      var k = cljs.core.first(arglist__20607);
      arglist__20607 = cljs.core.next(arglist__20607);
      var x = cljs.core.first(arglist__20607);
      arglist__20607 = cljs.core.next(arglist__20607);
      var y = cljs.core.first(arglist__20607);
      var more = cljs.core.rest(arglist__20607);
      return G__20606__delegate(k, x, y, more);
    };
    G__20606.cljs$core$IFn$_invoke$arity$variadic = G__20606__delegate;
    return G__20606;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__20610 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__20610, 0, null);
        var s = vec__20610;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__20611 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__20611, 0, null);
      var s = vec__20611;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__20614 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__20614, 0, null);
        var s = vec__20614;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__20615 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__20615, 0, null);
      var s = vec__20615;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__20616_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__20616_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__20627 = null;
      var G__20627__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__20627__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__20627__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__20627__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__20627__4 = function() {
        var G__20628__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__20628 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20628__delegate.call(this, x, y, z, args);
        };
        G__20628.cljs$lang$maxFixedArity = 3;
        G__20628.cljs$lang$applyTo = function(arglist__20629) {
          var x = cljs.core.first(arglist__20629);
          arglist__20629 = cljs.core.next(arglist__20629);
          var y = cljs.core.first(arglist__20629);
          arglist__20629 = cljs.core.next(arglist__20629);
          var z = cljs.core.first(arglist__20629);
          var args = cljs.core.rest(arglist__20629);
          return G__20628__delegate(x, y, z, args);
        };
        G__20628.cljs$core$IFn$_invoke$arity$variadic = G__20628__delegate;
        return G__20628;
      }();
      G__20627 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__20627__0.call(this);
          case 1:
            return G__20627__1.call(this, x);
          case 2:
            return G__20627__2.call(this, x, y);
          case 3:
            return G__20627__3.call(this, x, y, z);
          default:
            return G__20627__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20627.cljs$lang$maxFixedArity = 3;
      G__20627.cljs$lang$applyTo = G__20627__4.cljs$lang$applyTo;
      return G__20627;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__20630 = null;
      var G__20630__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__20630__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__20630__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__20630__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__20630__4 = function() {
        var G__20631__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__20631 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20631__delegate.call(this, x, y, z, args);
        };
        G__20631.cljs$lang$maxFixedArity = 3;
        G__20631.cljs$lang$applyTo = function(arglist__20632) {
          var x = cljs.core.first(arglist__20632);
          arglist__20632 = cljs.core.next(arglist__20632);
          var y = cljs.core.first(arglist__20632);
          arglist__20632 = cljs.core.next(arglist__20632);
          var z = cljs.core.first(arglist__20632);
          var args = cljs.core.rest(arglist__20632);
          return G__20631__delegate(x, y, z, args);
        };
        G__20631.cljs$core$IFn$_invoke$arity$variadic = G__20631__delegate;
        return G__20631;
      }();
      G__20630 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__20630__0.call(this);
          case 1:
            return G__20630__1.call(this, x);
          case 2:
            return G__20630__2.call(this, x, y);
          case 3:
            return G__20630__3.call(this, x, y, z);
          default:
            return G__20630__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20630.cljs$lang$maxFixedArity = 3;
      G__20630.cljs$lang$applyTo = G__20630__4.cljs$lang$applyTo;
      return G__20630;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__20633 = null;
      var G__20633__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__20633__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__20633__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__20633__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__20633__4 = function() {
        var G__20634__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__20634 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__20634__delegate.call(this, x, y, z, args);
        };
        G__20634.cljs$lang$maxFixedArity = 3;
        G__20634.cljs$lang$applyTo = function(arglist__20635) {
          var x = cljs.core.first(arglist__20635);
          arglist__20635 = cljs.core.next(arglist__20635);
          var y = cljs.core.first(arglist__20635);
          arglist__20635 = cljs.core.next(arglist__20635);
          var z = cljs.core.first(arglist__20635);
          var args = cljs.core.rest(arglist__20635);
          return G__20634__delegate(x, y, z, args);
        };
        G__20634.cljs$core$IFn$_invoke$arity$variadic = G__20634__delegate;
        return G__20634;
      }();
      G__20633 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__20633__0.call(this);
          case 1:
            return G__20633__1.call(this, x);
          case 2:
            return G__20633__2.call(this, x, y);
          case 3:
            return G__20633__3.call(this, x, y, z);
          default:
            return G__20633__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20633.cljs$lang$maxFixedArity = 3;
      G__20633.cljs$lang$applyTo = G__20633__4.cljs$lang$applyTo;
      return G__20633;
    }();
  };
  var juxt__4 = function() {
    var G__20636__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__20637 = null;
        var G__20637__0 = function() {
          return cljs.core.reduce.call(null, function(p1__20617_SHARP_, p2__20618_SHARP_) {
            return cljs.core.conj.call(null, p1__20617_SHARP_, p2__20618_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__20637__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__20619_SHARP_, p2__20620_SHARP_) {
            return cljs.core.conj.call(null, p1__20619_SHARP_, p2__20620_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__20637__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__20621_SHARP_, p2__20622_SHARP_) {
            return cljs.core.conj.call(null, p1__20621_SHARP_, p2__20622_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__20637__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__20623_SHARP_, p2__20624_SHARP_) {
            return cljs.core.conj.call(null, p1__20623_SHARP_, p2__20624_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__20637__4 = function() {
          var G__20638__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__20625_SHARP_, p2__20626_SHARP_) {
              return cljs.core.conj.call(null, p1__20625_SHARP_, cljs.core.apply.call(null, p2__20626_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__20638 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__20638__delegate.call(this, x, y, z, args);
          };
          G__20638.cljs$lang$maxFixedArity = 3;
          G__20638.cljs$lang$applyTo = function(arglist__20639) {
            var x = cljs.core.first(arglist__20639);
            arglist__20639 = cljs.core.next(arglist__20639);
            var y = cljs.core.first(arglist__20639);
            arglist__20639 = cljs.core.next(arglist__20639);
            var z = cljs.core.first(arglist__20639);
            var args = cljs.core.rest(arglist__20639);
            return G__20638__delegate(x, y, z, args);
          };
          G__20638.cljs$core$IFn$_invoke$arity$variadic = G__20638__delegate;
          return G__20638;
        }();
        G__20637 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__20637__0.call(this);
            case 1:
              return G__20637__1.call(this, x);
            case 2:
              return G__20637__2.call(this, x, y);
            case 3:
              return G__20637__3.call(this, x, y, z);
            default:
              return G__20637__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20637.cljs$lang$maxFixedArity = 3;
        G__20637.cljs$lang$applyTo = G__20637__4.cljs$lang$applyTo;
        return G__20637;
      }();
    };
    var G__20636 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__20636__delegate.call(this, f, g, h, fs);
    };
    G__20636.cljs$lang$maxFixedArity = 3;
    G__20636.cljs$lang$applyTo = function(arglist__20640) {
      var f = cljs.core.first(arglist__20640);
      arglist__20640 = cljs.core.next(arglist__20640);
      var g = cljs.core.first(arglist__20640);
      arglist__20640 = cljs.core.next(arglist__20640);
      var h = cljs.core.first(arglist__20640);
      var fs = cljs.core.rest(arglist__20640);
      return G__20636__delegate(f, g, h, fs);
    };
    G__20636.cljs$core$IFn$_invoke$arity$variadic = G__20636__delegate;
    return G__20636;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__20641 = cljs.core.next.call(null, coll);
        coll = G__20641;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__20642 = n - 1;
        var G__20643 = cljs.core.next.call(null, coll);
        n = G__20642;
        coll = G__20643;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__20645 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__20645, 0, null);
  var flags = cljs.core.nth.call(null, vec__20645, 1, null);
  var pattern = cljs.core.nth.call(null, vec__20645, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_20647 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_20648__$1 = cljs.core.next.call(null, coll);
      var n_20649 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_20648__$1 && (n_20649 == null || !(n_20649 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_20648__$1), writer, opts);
          var G__20650 = cljs.core.next.call(null, coll_20648__$1);
          var G__20651 = n_20649 - 1;
          coll_20648__$1 = G__20650;
          n_20649 = G__20651;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_20647;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__20656 = cljs.core.seq.call(null, ss);
    var chunk__20657 = null;
    var count__20658 = 0;
    var i__20659 = 0;
    while (true) {
      if (i__20659 < count__20658) {
        var s = cljs.core._nth.call(null, chunk__20657, i__20659);
        cljs.core._write.call(null, writer, s);
        var G__20660 = seq__20656;
        var G__20661 = chunk__20657;
        var G__20662 = count__20658;
        var G__20663 = i__20659 + 1;
        seq__20656 = G__20660;
        chunk__20657 = G__20661;
        count__20658 = G__20662;
        i__20659 = G__20663;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__20656);
        if (temp__4092__auto__) {
          var seq__20656__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20656__$1)) {
            var c__17409__auto__ = cljs.core.chunk_first.call(null, seq__20656__$1);
            var G__20664 = cljs.core.chunk_rest.call(null, seq__20656__$1);
            var G__20665 = c__17409__auto__;
            var G__20666 = cljs.core.count.call(null, c__17409__auto__);
            var G__20667 = 0;
            seq__20656 = G__20664;
            chunk__20657 = G__20665;
            count__20658 = G__20666;
            i__20659 = G__20667;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__20656__$1);
            cljs.core._write.call(null, writer, s);
            var G__20668 = cljs.core.next.call(null, seq__20656__$1);
            var G__20669 = null;
            var G__20670 = 0;
            var G__20671 = 0;
            seq__20656 = G__20668;
            chunk__20657 = G__20669;
            count__20658 = G__20670;
            i__20659 = G__20671;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__20672) {
    var writer = cljs.core.first(arglist__20672);
    var ss = cljs.core.rest(arglist__20672);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj20674 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj20674;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__16649__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__16649__auto__)) {
            var and__16649__auto____$1 = function() {
              var G__20680 = obj;
              if (G__20680) {
                var bit__17311__auto__ = G__20680.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__17311__auto__ || G__20680.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__20680.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__20680);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__20680);
              }
            }();
            if (and__16649__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__16649__auto____$1;
            }
          } else {
            return and__16649__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__20681 = obj;
              if (G__20681) {
                var bit__17304__auto__ = G__20681.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__17304__auto__ || G__20681.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__20683 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__20683;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__20682 = obj;
                              if (G__20682) {
                                var bit__17311__auto__ = G__20682.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__17311__auto__ || G__20682.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__20682.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__20682);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__20682);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__20688 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__20689 = null;
  var count__20690 = 0;
  var i__20691 = 0;
  while (true) {
    if (i__20691 < count__20690) {
      var obj = cljs.core._nth.call(null, chunk__20689, i__20691);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__20692 = seq__20688;
      var G__20693 = chunk__20689;
      var G__20694 = count__20690;
      var G__20695 = i__20691 + 1;
      seq__20688 = G__20692;
      chunk__20689 = G__20693;
      count__20690 = G__20694;
      i__20691 = G__20695;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__20688);
      if (temp__4092__auto__) {
        var seq__20688__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__20688__$1)) {
          var c__17409__auto__ = cljs.core.chunk_first.call(null, seq__20688__$1);
          var G__20696 = cljs.core.chunk_rest.call(null, seq__20688__$1);
          var G__20697 = c__17409__auto__;
          var G__20698 = cljs.core.count.call(null, c__17409__auto__);
          var G__20699 = 0;
          seq__20688 = G__20696;
          chunk__20689 = G__20697;
          count__20690 = G__20698;
          i__20691 = G__20699;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__20688__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__20700 = cljs.core.next.call(null, seq__20688__$1);
          var G__20701 = null;
          var G__20702 = 0;
          var G__20703 = 0;
          seq__20688 = G__20700;
          chunk__20689 = G__20701;
          count__20690 = G__20702;
          i__20691 = G__20703;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__20704) {
    var objs = cljs.core.seq(arglist__20704);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__20705) {
    var objs = cljs.core.seq(arglist__20705);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__20706) {
    var objs = cljs.core.seq(arglist__20706);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__20707) {
    var objs = cljs.core.seq(arglist__20707);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__20708) {
    var objs = cljs.core.seq(arglist__20708);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__20709) {
    var objs = cljs.core.seq(arglist__20709);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__20710) {
    var objs = cljs.core.seq(arglist__20710);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__20711) {
    var objs = cljs.core.seq(arglist__20711);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj20713 = {};
  return obj20713;
}();
cljs.core.IReset = function() {
  var obj20715 = {};
  return obj20715;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__16649__auto__ = o;
    if (and__16649__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__17288__auto__ = o == null ? null : o;
    return function() {
      var or__16661__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj20717 = {};
  return obj20717;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__16649__auto__ = o;
      if (and__16649__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__17288__auto__ = o == null ? null : o;
      return function() {
        var or__16661__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__16649__auto__ = o;
      if (and__16649__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__17288__auto__ = o == null ? null : o;
      return function() {
        var or__16661__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__16649__auto__ = o;
      if (and__16649__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__17288__auto__ = o == null ? null : o;
      return function() {
        var or__16661__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__16649__auto__ = o;
      if (and__16649__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__16649__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__17288__auto__ = o == null ? null : o;
      return function() {
        var or__16661__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__17288__auto__)];
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          var or__16661__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__16661__auto____$1) {
            return or__16661__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__20718 = cljs.core.seq.call(null, self__.watches);
  var chunk__20719 = null;
  var count__20720 = 0;
  var i__20721 = 0;
  while (true) {
    if (i__20721 < count__20720) {
      var vec__20722 = cljs.core._nth.call(null, chunk__20719, i__20721);
      var key = cljs.core.nth.call(null, vec__20722, 0, null);
      var f = cljs.core.nth.call(null, vec__20722, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__20724 = seq__20718;
      var G__20725 = chunk__20719;
      var G__20726 = count__20720;
      var G__20727 = i__20721 + 1;
      seq__20718 = G__20724;
      chunk__20719 = G__20725;
      count__20720 = G__20726;
      i__20721 = G__20727;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__20718);
      if (temp__4092__auto__) {
        var seq__20718__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__20718__$1)) {
          var c__17409__auto__ = cljs.core.chunk_first.call(null, seq__20718__$1);
          var G__20728 = cljs.core.chunk_rest.call(null, seq__20718__$1);
          var G__20729 = c__17409__auto__;
          var G__20730 = cljs.core.count.call(null, c__17409__auto__);
          var G__20731 = 0;
          seq__20718 = G__20728;
          chunk__20719 = G__20729;
          count__20720 = G__20730;
          i__20721 = G__20731;
          continue;
        } else {
          var vec__20723 = cljs.core.first.call(null, seq__20718__$1);
          var key = cljs.core.nth.call(null, vec__20723, 0, null);
          var f = cljs.core.nth.call(null, vec__20723, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__20732 = cljs.core.next.call(null, seq__20718__$1);
          var G__20733 = null;
          var G__20734 = 0;
          var G__20735 = 0;
          seq__20718 = G__20732;
          chunk__20719 = G__20733;
          count__20720 = G__20734;
          i__20721 = G__20735;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__20739__delegate = function(x, p__20736) {
      var map__20738 = p__20736;
      var map__20738__$1 = cljs.core.seq_QMARK_.call(null, map__20738) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20738) : map__20738;
      var validator = cljs.core.get.call(null, map__20738__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__20738__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__20739 = function(x, var_args) {
      var p__20736 = null;
      if (arguments.length > 1) {
        p__20736 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__20739__delegate.call(this, x, p__20736);
    };
    G__20739.cljs$lang$maxFixedArity = 1;
    G__20739.cljs$lang$applyTo = function(arglist__20740) {
      var x = cljs.core.first(arglist__20740);
      var p__20736 = cljs.core.rest(arglist__20740);
      return G__20739__delegate(x, p__20736);
    };
    G__20739.cljs$core$IFn$_invoke$arity$variadic = G__20739__delegate;
    return G__20739;
  }();
  atom = function(x, var_args) {
    var p__20736 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__20741__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__20741 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__20741__delegate.call(this, a, f, x, y, more);
    };
    G__20741.cljs$lang$maxFixedArity = 4;
    G__20741.cljs$lang$applyTo = function(arglist__20742) {
      var a = cljs.core.first(arglist__20742);
      arglist__20742 = cljs.core.next(arglist__20742);
      var f = cljs.core.first(arglist__20742);
      arglist__20742 = cljs.core.next(arglist__20742);
      var x = cljs.core.first(arglist__20742);
      arglist__20742 = cljs.core.next(arglist__20742);
      var y = cljs.core.first(arglist__20742);
      var more = cljs.core.rest(arglist__20742);
      return G__20741__delegate(a, f, x, y, more);
    };
    G__20741.cljs$core$IFn$_invoke$arity$variadic = G__20741__delegate;
    return G__20741;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__20743) {
    var iref = cljs.core.first(arglist__20743);
    arglist__20743 = cljs.core.next(arglist__20743);
    var f = cljs.core.first(arglist__20743);
    var args = cljs.core.rest(arglist__20743);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__20744) {
    var map__20745 = p__20744;
    var map__20745__$1 = cljs.core.seq_QMARK_.call(null, map__20745) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20745) : map__20745;
    var curr_state = map__20745__$1;
    var done = cljs.core.get.call(null, map__20745__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj20747 = {};
  return obj20747;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__16649__auto__ = x;
    if (and__16649__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__17288__auto__ = x == null ? null : x;
    return function() {
      var or__16661__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__16649__auto__ = x;
    if (and__16649__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__17288__auto__ = x == null ? null : x;
    return function() {
      var or__16661__auto__ = cljs.core._key__GT_js[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__20749 = k;
    if (G__20749) {
      var bit__17311__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__16661__auto__ = bit__17311__auto__;
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          return G__20749.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__20749.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__20749);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__20749);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__20763 = x;
      if (G__20763) {
        var bit__17311__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__16661__auto__ = bit__17311__auto__;
          if (cljs.core.truth_(or__16661__auto__)) {
            return or__16661__auto__;
          } else {
            return G__20763.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__20763.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__20763);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__20763);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj20765 = {};
              return obj20765;
            }();
            var seq__20766_20776 = cljs.core.seq.call(null, x);
            var chunk__20767_20777 = null;
            var count__20768_20778 = 0;
            var i__20769_20779 = 0;
            while (true) {
              if (i__20769_20779 < count__20768_20778) {
                var vec__20770_20780 = cljs.core._nth.call(null, chunk__20767_20777, i__20769_20779);
                var k_20781 = cljs.core.nth.call(null, vec__20770_20780, 0, null);
                var v_20782 = cljs.core.nth.call(null, vec__20770_20780, 1, null);
                m[cljs.core.key__GT_js.call(null, k_20781)] = clj__GT_js.call(null, v_20782);
                var G__20783 = seq__20766_20776;
                var G__20784 = chunk__20767_20777;
                var G__20785 = count__20768_20778;
                var G__20786 = i__20769_20779 + 1;
                seq__20766_20776 = G__20783;
                chunk__20767_20777 = G__20784;
                count__20768_20778 = G__20785;
                i__20769_20779 = G__20786;
                continue;
              } else {
                var temp__4092__auto___20787 = cljs.core.seq.call(null, seq__20766_20776);
                if (temp__4092__auto___20787) {
                  var seq__20766_20788__$1 = temp__4092__auto___20787;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__20766_20788__$1)) {
                    var c__17409__auto___20789 = cljs.core.chunk_first.call(null, seq__20766_20788__$1);
                    var G__20790 = cljs.core.chunk_rest.call(null, seq__20766_20788__$1);
                    var G__20791 = c__17409__auto___20789;
                    var G__20792 = cljs.core.count.call(null, c__17409__auto___20789);
                    var G__20793 = 0;
                    seq__20766_20776 = G__20790;
                    chunk__20767_20777 = G__20791;
                    count__20768_20778 = G__20792;
                    i__20769_20779 = G__20793;
                    continue;
                  } else {
                    var vec__20771_20794 = cljs.core.first.call(null, seq__20766_20788__$1);
                    var k_20795 = cljs.core.nth.call(null, vec__20771_20794, 0, null);
                    var v_20796 = cljs.core.nth.call(null, vec__20771_20794, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_20795)] = clj__GT_js.call(null, v_20796);
                    var G__20797 = cljs.core.next.call(null, seq__20766_20788__$1);
                    var G__20798 = null;
                    var G__20799 = 0;
                    var G__20800 = 0;
                    seq__20766_20776 = G__20797;
                    chunk__20767_20777 = G__20798;
                    count__20768_20778 = G__20799;
                    i__20769_20779 = G__20800;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__20772_20801 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__20773_20802 = null;
              var count__20774_20803 = 0;
              var i__20775_20804 = 0;
              while (true) {
                if (i__20775_20804 < count__20774_20803) {
                  var x_20805__$1 = cljs.core._nth.call(null, chunk__20773_20802, i__20775_20804);
                  arr.push(x_20805__$1);
                  var G__20806 = seq__20772_20801;
                  var G__20807 = chunk__20773_20802;
                  var G__20808 = count__20774_20803;
                  var G__20809 = i__20775_20804 + 1;
                  seq__20772_20801 = G__20806;
                  chunk__20773_20802 = G__20807;
                  count__20774_20803 = G__20808;
                  i__20775_20804 = G__20809;
                  continue;
                } else {
                  var temp__4092__auto___20810 = cljs.core.seq.call(null, seq__20772_20801);
                  if (temp__4092__auto___20810) {
                    var seq__20772_20811__$1 = temp__4092__auto___20810;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__20772_20811__$1)) {
                      var c__17409__auto___20812 = cljs.core.chunk_first.call(null, seq__20772_20811__$1);
                      var G__20813 = cljs.core.chunk_rest.call(null, seq__20772_20811__$1);
                      var G__20814 = c__17409__auto___20812;
                      var G__20815 = cljs.core.count.call(null, c__17409__auto___20812);
                      var G__20816 = 0;
                      seq__20772_20801 = G__20813;
                      chunk__20773_20802 = G__20814;
                      count__20774_20803 = G__20815;
                      i__20775_20804 = G__20816;
                      continue;
                    } else {
                      var x_20817__$1 = cljs.core.first.call(null, seq__20772_20811__$1);
                      arr.push(x_20817__$1);
                      var G__20818 = cljs.core.next.call(null, seq__20772_20811__$1);
                      var G__20819 = null;
                      var G__20820 = 0;
                      var G__20821 = 0;
                      seq__20772_20801 = G__20818;
                      chunk__20773_20802 = G__20819;
                      count__20774_20803 = G__20820;
                      i__20775_20804 = G__20821;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj20823 = {};
  return obj20823;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__16649__auto__ = x;
    if (and__16649__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__17288__auto__ = x == null ? null : x;
    return function() {
      var or__16661__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__20844__delegate = function(x, opts) {
      if (function() {
        var G__20834 = x;
        if (G__20834) {
          var bit__17311__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__16661__auto__ = bit__17311__auto__;
            if (cljs.core.truth_(or__16661__auto__)) {
              return or__16661__auto__;
            } else {
              return G__20834.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__20834.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__20834);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__20834);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__20835 = opts;
          var map__20835__$1 = cljs.core.seq_QMARK_.call(null, map__20835) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20835) : map__20835;
          var keywordize_keys = cljs.core.get.call(null, map__20835__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__20835, map__20835__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__17378__auto__ = function(map__20835, map__20835__$1, keywordize_keys, keyfn) {
                          return function iter__20840(s__20841) {
                            return new cljs.core.LazySeq(null, function(map__20835, map__20835__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__20841__$1 = s__20841;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__20841__$1);
                                  if (temp__4092__auto__) {
                                    var s__20841__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__20841__$2)) {
                                      var c__17376__auto__ = cljs.core.chunk_first.call(null, s__20841__$2);
                                      var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
                                      var b__20843 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
                                      if (function() {
                                        var i__20842 = 0;
                                        while (true) {
                                          if (i__20842 < size__17377__auto__) {
                                            var k = cljs.core._nth.call(null, c__17376__auto__, i__20842);
                                            cljs.core.chunk_append.call(null, b__20843, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__20845 = i__20842 + 1;
                                            i__20842 = G__20845;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__20843), iter__20840.call(null, cljs.core.chunk_rest.call(null, s__20841__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__20843), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__20841__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__20840.call(null, cljs.core.rest.call(null, s__20841__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__20835, map__20835__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__20835, map__20835__$1, keywordize_keys, keyfn);
                        return iter__17378__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__20835, map__20835__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__20844 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__20844__delegate.call(this, x, opts);
    };
    G__20844.cljs$lang$maxFixedArity = 1;
    G__20844.cljs$lang$applyTo = function(arglist__20846) {
      var x = cljs.core.first(arglist__20846);
      var opts = cljs.core.rest(arglist__20846);
      return G__20844__delegate(x, opts);
    };
    G__20844.cljs$core$IFn$_invoke$arity$variadic = G__20844__delegate;
    return G__20844;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__20847__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__20847 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__20847__delegate.call(this, args);
    };
    G__20847.cljs$lang$maxFixedArity = 0;
    G__20847.cljs$lang$applyTo = function(arglist__20848) {
      var args = cljs.core.seq(arglist__20848);
      return G__20847__delegate(args);
    };
    G__20847.cljs$core$IFn$_invoke$arity$variadic = G__20847__delegate;
    return G__20847;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__20849 = ret;
        f = G__20849;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__20850__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__20850 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__20850__delegate.call(this, f, args);
    };
    G__20850.cljs$lang$maxFixedArity = 1;
    G__20850.cljs$lang$applyTo = function(arglist__20851) {
      var f = cljs.core.first(arglist__20851);
      var args = cljs.core.rest(arglist__20851);
      return G__20850__delegate(f, args);
    };
    G__20850.cljs$core$IFn$_invoke$arity$variadic = G__20850__delegate;
    return G__20850;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__20852) {
    var f = cljs.core.first(arglist__20852);
    var args = cljs.core.rest(arglist__20852);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__16661__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__16661__auto__) {
      return or__16661__auto__;
    } else {
      var or__16661__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__16661__auto____$1) {
        return or__16661__auto____$1;
      } else {
        var and__16649__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__16649__auto__) {
          var and__16649__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__16649__auto____$1) {
            var and__16649__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__16649__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__20853 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__20854 = i + 1;
                  ret = G__20853;
                  i = G__20854;
                  continue;
                }
                break;
              }
            } else {
              return and__16649__auto____$2;
            }
          } else {
            return and__16649__auto____$1;
          }
        } else {
          return and__16649__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__16661__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__16661__auto__)) {
      return or__16661__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__20855_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__20855_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__20855_SHARP_), cljs.core.second.call(null, p1__20855_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__20856_SHARP_, p2__20857_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__20856_SHARP_, p2__20857_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__16661__auto__ = cljs.core.truth_(function() {
    var and__16649__auto__ = xprefs;
    if (cljs.core.truth_(and__16649__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__16649__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__16661__auto__)) {
    return or__16661__auto__;
  } else {
    var or__16661__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__20858 = cljs.core.rest.call(null, ps);
          ps = G__20858;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__16661__auto____$1)) {
      return or__16661__auto____$1;
    } else {
      var or__16661__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__20859 = cljs.core.rest.call(null, ps);
            ps = G__20859;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__16661__auto____$2)) {
        return or__16661__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__16661__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__16661__auto__)) {
    return or__16661__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__20862) {
    var vec__20863 = p__20862;
    var k = cljs.core.nth.call(null, vec__20863, 0, null);
    var _ = cljs.core.nth.call(null, vec__20863, 1, null);
    var e = vec__20863;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__16661__auto__ = be == null;
        if (or__16661__auto__) {
          return or__16661__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj20865 = {};
  return obj20865;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__16649__auto__ = mf;
    if (and__16649__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__17288__auto__ = mf == null ? null : mf;
    return function() {
      var or__16661__auto__ = cljs.core._reset[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._reset["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__16649__auto__ = mf;
    if (and__16649__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__17288__auto__ = mf == null ? null : mf;
    return function() {
      var or__16661__auto__ = cljs.core._add_method[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._add_method["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__16649__auto__ = mf;
    if (and__16649__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__17288__auto__ = mf == null ? null : mf;
    return function() {
      var or__16661__auto__ = cljs.core._remove_method[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._remove_method["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__16649__auto__ = mf;
    if (and__16649__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__17288__auto__ = mf == null ? null : mf;
    return function() {
      var or__16661__auto__ = cljs.core._prefer_method[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._prefer_method["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__16649__auto__ = mf;
    if (and__16649__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__17288__auto__ = mf == null ? null : mf;
    return function() {
      var or__16661__auto__ = cljs.core._get_method[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._get_method["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__16649__auto__ = mf;
    if (and__16649__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__17288__auto__ = mf == null ? null : mf;
    return function() {
      var or__16661__auto__ = cljs.core._methods[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._methods["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__16649__auto__ = mf;
    if (and__16649__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__17288__auto__ = mf == null ? null : mf;
    return function() {
      var or__16661__auto__ = cljs.core._prefers[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._prefers["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__16649__auto__ = mf;
    if (and__16649__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__17288__auto__ = mf == null ? null : mf;
    return function() {
      var or__16661__auto__ = cljs.core._dispatch[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.core._dispatch["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__20866__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__20866 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__20866__delegate.call(this, _, args);
  };
  G__20866.cljs$lang$maxFixedArity = 1;
  G__20866.cljs$lang$applyTo = function(arglist__20867) {
    var _ = cljs.core.first(arglist__20867);
    var args = cljs.core.rest(arglist__20867);
    return G__20866__delegate(_, args);
  };
  G__20866.cljs$core$IFn$_invoke$arity$variadic = G__20866__delegate;
  return G__20866;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__17231__auto__, writer__17232__auto__, opts__17233__auto__) {
  return cljs.core._write.call(null, writer__17232__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return outer.call(null, form);
      } else {
        return null;
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__19817) {
    var vec__19818 = p__19817;
    var k = cljs.core.nth.call(null, vec__19818, 0, null);
    var v = cljs.core.nth.call(null, vec__19818, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__19821) {
    var vec__19822 = p__19821;
    var k = cljs.core.nth.call(null, vec__19822, 0, null);
    var v = cljs.core.nth.call(null, vec__19822, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj20936 = {};
  return obj20936;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__16649__auto__ = reader;
    if (and__16649__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__17288__auto__ = reader == null ? null : reader;
    return function() {
      var or__16661__auto__ = cljs.reader.read_char[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.reader.read_char["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__16649__auto__ = reader;
    if (and__16649__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__17288__auto__ = reader == null ? null : reader;
    return function() {
      var or__16661__auto__ = cljs.reader.unread[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.reader.unread["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__17228__auto__, writer__17229__auto__, opt__17230__auto__) {
  return cljs.core._write.call(null, writer__17229__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__16661__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__16661__auto__)) {
    return or__16661__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__20937) {
    var rdr = cljs.core.first(arglist__20937);
    var msg = cljs.core.rest(arglist__20937);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__16649__auto__ = !(ch === "#");
  if (and__16649__auto__) {
    var and__16649__auto____$1 = !(ch === "'");
    if (and__16649__auto____$1) {
      var and__16649__auto____$2 = !(ch === ":");
      if (and__16649__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__16649__auto____$2;
      }
    } else {
      return and__16649__auto____$1;
    }
  } else {
    return and__16649__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__20938 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__20939 = cljs.reader.read_char.call(null, rdr);
      sb = G__20938;
      ch = G__20939;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__20940 = cljs.reader.read_char.call(null, rdr);
      ch = G__20940;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__20941 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__20941;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__20942 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__20942;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__16661__auto__ = ch == null;
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__16661__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__20943 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__20944 = cljs.reader.read_char.call(null, reader);
      buffer = G__20943;
      ch = G__20944;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__20945 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__20946 = cljs.reader.read_char.call(null, reader);
        buffer = G__20945;
        ch = G__20946;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__20947 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__20948 = cljs.reader.read_char.call(null, reader);
            buffer = G__20947;
            ch = G__20948;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__20950 = o;
    if (G__20950) {
      var bit__17311__auto__ = G__20950.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__17311__auto__ || G__20950.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__20950.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__20950);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__20950);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__20951 = reader;
        var G__20952 = eof_is_error;
        var G__20953 = sentinel;
        var G__20954 = is_recursive;
        reader = G__20951;
        eof_is_error = G__20952;
        sentinel = G__20953;
        is_recursive = G__20954;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__20955 = cljs.reader.read_comment.call(null, reader, ch);
          var G__20956 = eof_is_error;
          var G__20957 = sentinel;
          var G__20958 = is_recursive;
          reader = G__20955;
          eof_is_error = G__20956;
          sentinel = G__20957;
          is_recursive = G__20958;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__20959 = reader;
              var G__20960 = eof_is_error;
              var G__20961 = sentinel;
              var G__20962 = is_recursive;
              reader = G__20959;
              eof_is_error = G__20960;
              sentinel = G__20961;
              is_recursive = G__20962;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__20963 = b.append("0");
            b = G__20963;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__20965 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__20965, 0, null);
  var years = cljs.core.nth.call(null, vec__20965, 1, null);
  var months = cljs.core.nth.call(null, vec__20965, 2, null);
  var days = cljs.core.nth.call(null, vec__20965, 3, null);
  var hours = cljs.core.nth.call(null, vec__20965, 4, null);
  var minutes = cljs.core.nth.call(null, vec__20965, 5, null);
  var seconds = cljs.core.nth.call(null, vec__20965, 6, null);
  var fraction = cljs.core.nth.call(null, vec__20965, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__20965, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__20965, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__20965, 10, null);
  var v = vec__20965;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__16661__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__16661__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__16661__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__16661__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__16661__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__16661__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__16661__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__16661__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__20967 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__20967, 0, null);
    var months = cljs.core.nth.call(null, vec__20967, 1, null);
    var days = cljs.core.nth.call(null, vec__20967, 2, null);
    var hours = cljs.core.nth.call(null, vec__20967, 3, null);
    var minutes = cljs.core.nth.call(null, vec__20967, 4, null);
    var seconds = cljs.core.nth.call(null, vec__20967, 5, null);
    var ms = cljs.core.nth.call(null, vec__20967, 6, null);
    var offset = cljs.core.nth.call(null, vec__20967, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__20980_20992 = cljs.core.seq.call(null, form);
    var chunk__20981_20993 = null;
    var count__20982_20994 = 0;
    var i__20983_20995 = 0;
    while (true) {
      if (i__20983_20995 < count__20982_20994) {
        var x_20996 = cljs.core._nth.call(null, chunk__20981_20993, i__20983_20995);
        arr.push(x_20996);
        var G__20997 = seq__20980_20992;
        var G__20998 = chunk__20981_20993;
        var G__20999 = count__20982_20994;
        var G__21000 = i__20983_20995 + 1;
        seq__20980_20992 = G__20997;
        chunk__20981_20993 = G__20998;
        count__20982_20994 = G__20999;
        i__20983_20995 = G__21000;
        continue;
      } else {
        var temp__4092__auto___21001 = cljs.core.seq.call(null, seq__20980_20992);
        if (temp__4092__auto___21001) {
          var seq__20980_21002__$1 = temp__4092__auto___21001;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20980_21002__$1)) {
            var c__17409__auto___21003 = cljs.core.chunk_first.call(null, seq__20980_21002__$1);
            var G__21004 = cljs.core.chunk_rest.call(null, seq__20980_21002__$1);
            var G__21005 = c__17409__auto___21003;
            var G__21006 = cljs.core.count.call(null, c__17409__auto___21003);
            var G__21007 = 0;
            seq__20980_20992 = G__21004;
            chunk__20981_20993 = G__21005;
            count__20982_20994 = G__21006;
            i__20983_20995 = G__21007;
            continue;
          } else {
            var x_21008 = cljs.core.first.call(null, seq__20980_21002__$1);
            arr.push(x_21008);
            var G__21009 = cljs.core.next.call(null, seq__20980_21002__$1);
            var G__21010 = null;
            var G__21011 = 0;
            var G__21012 = 0;
            seq__20980_20992 = G__21009;
            chunk__20981_20993 = G__21010;
            count__20982_20994 = G__21011;
            i__20983_20995 = G__21012;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj20985 = {};
        return obj20985;
      }();
      var seq__20986_21013 = cljs.core.seq.call(null, form);
      var chunk__20987_21014 = null;
      var count__20988_21015 = 0;
      var i__20989_21016 = 0;
      while (true) {
        if (i__20989_21016 < count__20988_21015) {
          var vec__20990_21017 = cljs.core._nth.call(null, chunk__20987_21014, i__20989_21016);
          var k_21018 = cljs.core.nth.call(null, vec__20990_21017, 0, null);
          var v_21019 = cljs.core.nth.call(null, vec__20990_21017, 1, null);
          obj[cljs.core.name.call(null, k_21018)] = v_21019;
          var G__21020 = seq__20986_21013;
          var G__21021 = chunk__20987_21014;
          var G__21022 = count__20988_21015;
          var G__21023 = i__20989_21016 + 1;
          seq__20986_21013 = G__21020;
          chunk__20987_21014 = G__21021;
          count__20988_21015 = G__21022;
          i__20989_21016 = G__21023;
          continue;
        } else {
          var temp__4092__auto___21024 = cljs.core.seq.call(null, seq__20986_21013);
          if (temp__4092__auto___21024) {
            var seq__20986_21025__$1 = temp__4092__auto___21024;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20986_21025__$1)) {
              var c__17409__auto___21026 = cljs.core.chunk_first.call(null, seq__20986_21025__$1);
              var G__21027 = cljs.core.chunk_rest.call(null, seq__20986_21025__$1);
              var G__21028 = c__17409__auto___21026;
              var G__21029 = cljs.core.count.call(null, c__17409__auto___21026);
              var G__21030 = 0;
              seq__20986_21013 = G__21027;
              chunk__20987_21014 = G__21028;
              count__20988_21015 = G__21029;
              i__20989_21016 = G__21030;
              continue;
            } else {
              var vec__20991_21031 = cljs.core.first.call(null, seq__20986_21025__$1);
              var k_21032 = cljs.core.nth.call(null, vec__20991_21031, 0, null);
              var v_21033 = cljs.core.nth.call(null, vec__20991_21031, 1, null);
              obj[cljs.core.name.call(null, k_21032)] = v_21033;
              var G__21034 = cljs.core.next.call(null, seq__20986_21025__$1);
              var G__21035 = null;
              var G__21036 = 0;
              var G__21037 = 0;
              seq__20986_21013 = G__21034;
              chunk__20987_21014 = G__21035;
              count__20988_21015 = G__21036;
              i__20989_21016 = G__21037;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(p1__19785_SHARP_) {
    return max === p1__19785_SHARP_;
  }, coll));
};
clojure.set.union = function() {
  var union = null;
  var union__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var union__1 = function(s1) {
    return s1;
  };
  var union__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
    }
  };
  var union__3 = function() {
    var G__19786__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__19786 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19786__delegate.call(this, s1, s2, sets);
    };
    G__19786.cljs$lang$maxFixedArity = 2;
    G__19786.cljs$lang$applyTo = function(arglist__19787) {
      var s1 = cljs.core.first(arglist__19787);
      arglist__19787 = cljs.core.next(arglist__19787);
      var s2 = cljs.core.first(arglist__19787);
      var sets = cljs.core.rest(arglist__19787);
      return G__19786__delegate(s1, s2, sets);
    };
    G__19786.cljs$core$IFn$_invoke$arity$variadic = G__19786__delegate;
    return G__19786;
  }();
  union = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 0:
        return union__0.call(this);
      case 1:
        return union__1.call(this, s1);
      case 2:
        return union__2.call(this, s1, s2);
      default:
        return union__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  union.cljs$lang$maxFixedArity = 2;
  union.cljs$lang$applyTo = union__3.cljs$lang$applyTo;
  union.cljs$core$IFn$_invoke$arity$0 = union__0;
  union.cljs$core$IFn$_invoke$arity$1 = union__1;
  union.cljs$core$IFn$_invoke$arity$2 = union__2;
  union.cljs$core$IFn$_invoke$arity$variadic = union__3.cljs$core$IFn$_invoke$arity$variadic;
  return union;
}();
clojure.set.intersection = function() {
  var intersection = null;
  var intersection__1 = function(s1) {
    return s1;
  };
  var intersection__2 = function(s1, s2) {
    while (true) {
      if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
        var G__19789 = s2;
        var G__19790 = s1;
        s1 = G__19789;
        s2 = G__19790;
        continue;
      } else {
        return cljs.core.reduce.call(null, function(s1, s2) {
          return function(result, item) {
            if (cljs.core.contains_QMARK_.call(null, s2, item)) {
              return result;
            } else {
              return cljs.core.disj.call(null, result, item);
            }
          };
        }(s1, s2), s1, s1);
      }
      break;
    }
  };
  var intersection__3 = function() {
    var G__19791__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__19788_SHARP_) {
        return-cljs.core.count.call(null, p1__19788_SHARP_);
      }, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__19791 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19791__delegate.call(this, s1, s2, sets);
    };
    G__19791.cljs$lang$maxFixedArity = 2;
    G__19791.cljs$lang$applyTo = function(arglist__19792) {
      var s1 = cljs.core.first(arglist__19792);
      arglist__19792 = cljs.core.next(arglist__19792);
      var s2 = cljs.core.first(arglist__19792);
      var sets = cljs.core.rest(arglist__19792);
      return G__19791__delegate(s1, s2, sets);
    };
    G__19791.cljs$core$IFn$_invoke$arity$variadic = G__19791__delegate;
    return G__19791;
  }();
  intersection = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return intersection__1.call(this, s1);
      case 2:
        return intersection__2.call(this, s1, s2);
      default:
        return intersection__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  intersection.cljs$lang$maxFixedArity = 2;
  intersection.cljs$lang$applyTo = intersection__3.cljs$lang$applyTo;
  intersection.cljs$core$IFn$_invoke$arity$1 = intersection__1;
  intersection.cljs$core$IFn$_invoke$arity$2 = intersection__2;
  intersection.cljs$core$IFn$_invoke$arity$variadic = intersection__3.cljs$core$IFn$_invoke$arity$variadic;
  return intersection;
}();
clojure.set.difference = function() {
  var difference = null;
  var difference__1 = function(s1) {
    return s1;
  };
  var difference__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, function(result, item) {
        if (cljs.core.contains_QMARK_.call(null, s2, item)) {
          return cljs.core.disj.call(null, result, item);
        } else {
          return result;
        }
      }, s1, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
    }
  };
  var difference__3 = function() {
    var G__19793__delegate = function(s1, s2, sets) {
      return cljs.core.reduce.call(null, difference, s1, cljs.core.conj.call(null, sets, s2));
    };
    var G__19793 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19793__delegate.call(this, s1, s2, sets);
    };
    G__19793.cljs$lang$maxFixedArity = 2;
    G__19793.cljs$lang$applyTo = function(arglist__19794) {
      var s1 = cljs.core.first(arglist__19794);
      arglist__19794 = cljs.core.next(arglist__19794);
      var s2 = cljs.core.first(arglist__19794);
      var sets = cljs.core.rest(arglist__19794);
      return G__19793__delegate(s1, s2, sets);
    };
    G__19793.cljs$core$IFn$_invoke$arity$variadic = G__19793__delegate;
    return G__19793;
  }();
  difference = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return difference__1.call(this, s1);
      case 2:
        return difference__2.call(this, s1, s2);
      default:
        return difference__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  difference.cljs$lang$maxFixedArity = 2;
  difference.cljs$lang$applyTo = difference__3.cljs$lang$applyTo;
  difference.cljs$core$IFn$_invoke$arity$1 = difference__1;
  difference.cljs$core$IFn$_invoke$arity$2 = difference__2;
  difference.cljs$core$IFn$_invoke$arity$variadic = difference__3.cljs$core$IFn$_invoke$arity$variadic;
  return difference;
}();
clojure.set.select = function select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__19795_SHARP_) {
    return cljs.core.select_keys.call(null, p1__19795_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__19798) {
    var vec__19799 = p__19798;
    var old = cljs.core.nth.call(null, vec__19799, 0, null);
    var new$ = cljs.core.nth.call(null, vec__19799, 1, null);
    if (cljs.core.not_EQ_.call(null, old, new$) && cljs.core.contains_QMARK_.call(null, m, old)) {
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, m, old)), old);
    } else {
      return m;
    }
  }, map, kmap);
};
clojure.set.rename = function rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__19800_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__19800_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__19803) {
    var vec__19804 = p__19803;
    var k = cljs.core.nth.call(null, vec__19804, 0, null);
    var v = cljs.core.nth.call(null, vec__19804, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function() {
  var join = null;
  var join__2 = function(xrel, yrel) {
    if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
      var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
      var vec__19811 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
      var r = cljs.core.nth.call(null, vec__19811, 0, null);
      var s = cljs.core.nth.call(null, vec__19811, 1, null);
      var idx = clojure.set.index.call(null, r, ks);
      return cljs.core.reduce.call(null, function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if (cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(p1__19805_SHARP_, p2__19806_SHARP_) {
            return cljs.core.conj.call(null, p1__19805_SHARP_, cljs.core.merge.call(null, p2__19806_SHARP_, x));
          }, ret, found);
        } else {
          return ret;
        }
      }, cljs.core.PersistentHashSet.EMPTY, s);
    } else {
      return cljs.core.PersistentHashSet.EMPTY;
    }
  };
  var join__3 = function(xrel, yrel, km) {
    var vec__19812 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
    var r = cljs.core.nth.call(null, vec__19812, 0, null);
    var s = cljs.core.nth.call(null, vec__19812, 1, null);
    var k = cljs.core.nth.call(null, vec__19812, 2, null);
    var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
    return cljs.core.reduce.call(null, function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if (cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(p1__19807_SHARP_, p2__19808_SHARP_) {
          return cljs.core.conj.call(null, p1__19807_SHARP_, cljs.core.merge.call(null, p2__19808_SHARP_, x));
        }, ret, found);
      } else {
        return ret;
      }
    }, cljs.core.PersistentHashSet.EMPTY, s);
  };
  join = function(xrel, yrel, km) {
    switch(arguments.length) {
      case 2:
        return join__2.call(this, xrel, yrel);
      case 3:
        return join__3.call(this, xrel, yrel, km);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  join.cljs$core$IFn$_invoke$arity$3 = join__3;
  return join;
}();
clojure.set.subset_QMARK_ = function subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__19813_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__19813_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__19814_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__19814_SHARP_);
  }, set2);
};
goog.provide("datascript");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("clojure.set");
goog.require("clojure.set");
datascript.Datom = function(e, a, v, tx, added, __meta, __extmap) {
  this.e = e;
  this.a = a;
  this.v = v;
  this.tx = tx;
  this.added = added;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
datascript.Datom.prototype.cljs$core$IHash$_hash$arity$1 = function(this__17242__auto__) {
  var self__ = this;
  var this__17242__auto____$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_imap.call(null, this__17242__auto____$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
datascript.Datom.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__17247__auto__, k__17248__auto__) {
  var self__ = this;
  var this__17247__auto____$1 = this;
  return cljs.core._lookup.call(null, this__17247__auto____$1, k__17248__auto__, null);
};
datascript.Datom.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__17249__auto__, k19564, else__17250__auto__) {
  var self__ = this;
  var this__17249__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k19564, new cljs.core.Keyword(null, "e", "e", 1013904343))) {
    return self__.e;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k19564, new cljs.core.Keyword(null, "a", "a", 1013904339))) {
      return self__.a;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k19564, new cljs.core.Keyword(null, "v", "v", 1013904360))) {
        return self__.v;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k19564, new cljs.core.Keyword(null, "tx", "tx", 1013907958))) {
          return self__.tx;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k19564, new cljs.core.Keyword(null, "added", "added", 1106564210))) {
            return self__.added;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k19564, else__17250__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
datascript.Datom.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__17254__auto__, k__17255__auto__, G__19563) {
  var self__ = this;
  var this__17254__auto____$1 = this;
  var pred__19566 = cljs.core.keyword_identical_QMARK_;
  var expr__19567 = k__17255__auto__;
  if (cljs.core.truth_(pred__19566.call(null, new cljs.core.Keyword(null, "e", "e", 1013904343), expr__19567))) {
    return new datascript.Datom(G__19563, self__.a, self__.v, self__.tx, self__.added, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__19566.call(null, new cljs.core.Keyword(null, "a", "a", 1013904339), expr__19567))) {
      return new datascript.Datom(self__.e, G__19563, self__.v, self__.tx, self__.added, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__19566.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), expr__19567))) {
        return new datascript.Datom(self__.e, self__.a, G__19563, self__.tx, self__.added, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__19566.call(null, new cljs.core.Keyword(null, "tx", "tx", 1013907958), expr__19567))) {
          return new datascript.Datom(self__.e, self__.a, self__.v, G__19563, self__.added, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__19566.call(null, new cljs.core.Keyword(null, "added", "added", 1106564210), expr__19567))) {
            return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, G__19563, self__.__meta, self__.__extmap, null);
          } else {
            return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__17255__auto__, G__19563), null);
          }
        }
      }
    }
  }
};
datascript.Datom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__17261__auto__, writer__17262__auto__, opts__17263__auto__) {
  var self__ = this;
  var this__17261__auto____$1 = this;
  var pr_pair__17264__auto__ = function(keyval__17265__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__17262__auto__, cljs.core.pr_writer, "", " ", "", opts__17263__auto__, keyval__17265__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__17262__auto__, pr_pair__17264__auto__, "#datascript.Datom{", ", ", "}", opts__17263__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "e", "e", 1013904343), self__.e], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "a", "a", 1013904339), self__.a], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx", "tx", 1013907958), self__.tx], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "added", "added", 1106564210), self__.added], 
  null)], null), self__.__extmap));
};
datascript.Datom.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__17252__auto__, entry__17253__auto__) {
  var self__ = this;
  var this__17252__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__17253__auto__)) {
    return cljs.core._assoc.call(null, this__17252__auto____$1, cljs.core._nth.call(null, entry__17253__auto__, 0), cljs.core._nth.call(null, entry__17253__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__17252__auto____$1, entry__17253__auto__);
  }
};
datascript.Datom.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$);
};
datascript.Datom.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__17259__auto__) {
  var self__ = this;
  var this__17259__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "e", "e", 1013904343), self__.e], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", 1013904339), self__.a], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx", "tx", 1013907958), self__.tx], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "added", "added", 1106564210), self__.added], null)], null), self__.__extmap));
};
datascript.Datom.prototype.cljs$core$ICounted$_count$arity$1 = function(this__17251__auto__) {
  var self__ = this;
  var this__17251__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
datascript.Datom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__17243__auto__, other__17244__auto__) {
  var self__ = this;
  var this__17243__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__16649__auto__ = other__17244__auto__;
    if (cljs.core.truth_(and__16649__auto__)) {
      return this__17243__auto____$1.constructor === other__17244__auto__.constructor && cljs.core.equiv_map.call(null, this__17243__auto____$1, other__17244__auto__);
    } else {
      return and__16649__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
datascript.Datom.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__17246__auto__, G__19563) {
  var self__ = this;
  var this__17246__auto____$1 = this;
  return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, G__19563, self__.__extmap, self__.__hash);
};
datascript.Datom.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__17241__auto__) {
  var self__ = this;
  var this__17241__auto____$1 = this;
  return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, self__.__meta, self__.__extmap, self__.__hash);
};
datascript.Datom.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__17245__auto__) {
  var self__ = this;
  var this__17245__auto____$1 = this;
  return self__.__meta;
};
datascript.Datom.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__17256__auto__, k__17257__auto__) {
  var self__ = this;
  var this__17256__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "a", "a", 1013904339), null, new cljs.core.Keyword(null, "e", "e", 1013904343), null, new cljs.core.Keyword(null, "added", "added", 1106564210), null, new cljs.core.Keyword(null, "tx", "tx", 1013907958), null, new cljs.core.Keyword(null, "v", "v", 1013904360), null], null), null), k__17257__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__17256__auto____$1), self__.__meta), k__17257__auto__);
  } else {
    return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__17257__auto__)), null);
  }
};
datascript.Datom.cljs$lang$type = true;
datascript.Datom.cljs$lang$ctorPrSeq = function(this__17281__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "datascript/Datom");
};
datascript.Datom.cljs$lang$ctorPrWriter = function(this__17281__auto__, writer__17282__auto__) {
  return cljs.core._write.call(null, writer__17282__auto__, "datascript/Datom");
};
datascript.__GT_Datom = function __GT_Datom(e, a, v, tx, added) {
  return new datascript.Datom(e, a, v, tx, added);
};
datascript.map__GT_Datom = function map__GT_Datom(G__19565) {
  return new datascript.Datom((new cljs.core.Keyword(null, "e", "e", 1013904343)).cljs$core$IFn$_invoke$arity$1(G__19565), (new cljs.core.Keyword(null, "a", "a", 1013904339)).cljs$core$IFn$_invoke$arity$1(G__19565), (new cljs.core.Keyword(null, "v", "v", 1013904360)).cljs$core$IFn$_invoke$arity$1(G__19565), (new cljs.core.Keyword(null, "tx", "tx", 1013907958)).cljs$core$IFn$_invoke$arity$1(G__19565), (new cljs.core.Keyword(null, "added", "added", 1106564210)).cljs$core$IFn$_invoke$arity$1(G__19565), 
  null, cljs.core.dissoc.call(null, G__19565, new cljs.core.Keyword(null, "e", "e", 1013904343), new cljs.core.Keyword(null, "a", "a", 1013904339), new cljs.core.Keyword(null, "v", "v", 1013904360), new cljs.core.Keyword(null, "tx", "tx", 1013907958), new cljs.core.Keyword(null, "added", "added", 1106564210)));
};
datascript.Datom.prototype.cljs$core$ISeqable$ = true;
datascript.Datom.prototype.cljs$core$ISeqable$_seq$arity$1 = function(d) {
  var d__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, d__$1.added), d__$1.tx), d__$1.v), d__$1.a), d__$1.e);
};
datascript.Datom.prototype.cljs$core$IEquiv$ = true;
datascript.Datom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(d, o) {
  var d__$1 = this;
  return cljs.core._EQ_.call(null, d__$1.e, o.e) && (cljs.core._EQ_.call(null, d__$1.a, o.a) && cljs.core._EQ_.call(null, d__$1.v, o.v));
};
datascript.Datom.prototype.cljs$core$IHash$ = true;
datascript.Datom.prototype.cljs$core$IHash$_hash$arity$1 = function(d) {
  var d__$1 = this;
  var or__16661__auto__ = d__$1.__hash;
  if (cljs.core.truth_(or__16661__auto__)) {
    return or__16661__auto__;
  } else {
    return d__$1.__hash = cljs.core.hash_coll.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [d__$1.e, d__$1.a, d__$1.v], null));
  }
};
datascript.ISearch = function() {
  var obj19570 = {};
  return obj19570;
}();
datascript._search = function _search(data, pattern) {
  if (function() {
    var and__16649__auto__ = data;
    if (and__16649__auto__) {
      return data.datascript$ISearch$_search$arity$2;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return data.datascript$ISearch$_search$arity$2(data, pattern);
  } else {
    var x__17288__auto__ = data == null ? null : data;
    return function() {
      var or__16661__auto__ = datascript._search[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = datascript._search["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISearch.-search", data);
        }
      }
    }().call(null, data, pattern);
  }
};
datascript.DB = function(schema, ea, av, max_eid, max_tx, __meta, __extmap) {
  this.schema = schema;
  this.ea = ea;
  this.av = av;
  this.max_eid = max_eid;
  this.max_tx = max_tx;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
datascript.DB.prototype.cljs$core$IHash$_hash$arity$1 = function(this__17242__auto__) {
  var self__ = this;
  var this__17242__auto____$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_imap.call(null, this__17242__auto____$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
datascript.DB.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__17247__auto__, k__17248__auto__) {
  var self__ = this;
  var this__17247__auto____$1 = this;
  return cljs.core._lookup.call(null, this__17247__auto____$1, k__17248__auto__, null);
};
datascript.DB.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__17249__auto__, k19575, else__17250__auto__) {
  var self__ = this;
  var this__17249__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k19575, new cljs.core.Keyword(null, "schema", "schema", 4400883987))) {
    return self__.schema;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k19575, new cljs.core.Keyword(null, "ea", "ea", 1013907470))) {
      return self__.ea;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k19575, new cljs.core.Keyword(null, "av", "av", 1013907367))) {
        return self__.av;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k19575, new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841))) {
          return self__.max_eid;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k19575, new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119))) {
            return self__.max_tx;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k19575, else__17250__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
datascript.DB.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__17254__auto__, k__17255__auto__, G__19574) {
  var self__ = this;
  var this__17254__auto____$1 = this;
  var pred__19577 = cljs.core.keyword_identical_QMARK_;
  var expr__19578 = k__17255__auto__;
  if (cljs.core.truth_(pred__19577.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__19578))) {
    return new datascript.DB(G__19574, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__19577.call(null, new cljs.core.Keyword(null, "ea", "ea", 1013907470), expr__19578))) {
      return new datascript.DB(self__.schema, G__19574, self__.av, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__19577.call(null, new cljs.core.Keyword(null, "av", "av", 1013907367), expr__19578))) {
        return new datascript.DB(self__.schema, self__.ea, G__19574, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__19577.call(null, new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), expr__19578))) {
          return new datascript.DB(self__.schema, self__.ea, self__.av, G__19574, self__.max_tx, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__19577.call(null, new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119), expr__19578))) {
            return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, G__19574, self__.__meta, self__.__extmap, null);
          } else {
            return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__17255__auto__, G__19574), null);
          }
        }
      }
    }
  }
};
datascript.DB.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__17261__auto__, writer__17262__auto__, opts__17263__auto__) {
  var self__ = this;
  var this__17261__auto____$1 = this;
  var pr_pair__17264__auto__ = function(keyval__17265__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__17262__auto__, cljs.core.pr_writer, "", " ", "", opts__17263__auto__, keyval__17265__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__17262__auto__, pr_pair__17264__auto__, "#datascript.DB{", ", ", "}", opts__17263__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "ea", "ea", 1013907470), self__.ea], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), self__.av], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), self__.max_eid], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "max-tx", "max-tx", 4227685119), self__.max_tx], null)], null), self__.__extmap));
};
datascript.DB.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__17252__auto__, entry__17253__auto__) {
  var self__ = this;
  var this__17252__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__17253__auto__)) {
    return cljs.core._assoc.call(null, this__17252__auto____$1, cljs.core._nth.call(null, entry__17253__auto__, 0), cljs.core._nth.call(null, entry__17253__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__17252__auto____$1, entry__17253__auto__);
  }
};
datascript.DB.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__17259__auto__) {
  var self__ = this;
  var this__17259__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), self__.ea], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), self__.av], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), self__.max_eid], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119), self__.max_tx], null)], null), self__.__extmap));
};
datascript.DB.prototype.cljs$core$ICounted$_count$arity$1 = function(this__17251__auto__) {
  var self__ = this;
  var this__17251__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
datascript.DB.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__17243__auto__, other__17244__auto__) {
  var self__ = this;
  var this__17243__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__16649__auto__ = other__17244__auto__;
    if (cljs.core.truth_(and__16649__auto__)) {
      return this__17243__auto____$1.constructor === other__17244__auto__.constructor && cljs.core.equiv_map.call(null, this__17243__auto____$1, other__17244__auto__);
    } else {
      return and__16649__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
datascript.DB.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__17246__auto__, G__19574) {
  var self__ = this;
  var this__17246__auto____$1 = this;
  return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, G__19574, self__.__extmap, self__.__hash);
};
datascript.DB.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__17241__auto__) {
  var self__ = this;
  var this__17241__auto____$1 = this;
  return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, self__.__hash);
};
datascript.DB.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__17245__auto__) {
  var self__ = this;
  var this__17245__auto____$1 = this;
  return self__.__meta;
};
datascript.DB.prototype.datascript$ISearch$ = true;
datascript.DB.prototype.datascript$ISearch$_search$arity$2 = function(db, p__19580) {
  var self__ = this;
  var vec__19581 = p__19580;
  var e = cljs.core.nth.call(null, vec__19581, 0, null);
  var a = cljs.core.nth.call(null, vec__19581, 1, null);
  var v = cljs.core.nth.call(null, vec__19581, 2, null);
  var tx = cljs.core.nth.call(null, vec__19581, 3, null);
  var added = cljs.core.nth.call(null, vec__19581, 4, null);
  var pattern = vec__19581;
  var db__$1 = this;
  var G__19582 = function() {
    var G__19583 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(e) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(a) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(v) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null], null);
    if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285)], null), G__19583)) {
      return cljs.core.filter.call(null, function(G__19583) {
        return function(p1__19571_SHARP_) {
          return cljs.core._EQ_.call(null, v, p1__19571_SHARP_.v);
        };
      }(G__19583), cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), e, a], null)));
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285)], null), G__19583)) {
        return cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), a, v], null));
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285), null], null), G__19583)) {
          return cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), e, a], null));
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.Keyword(null, "+", "+", 1013904285), null], null), G__19583)) {
            return cljs.core.apply.call(null, cljs.core.concat, cljs.core.vals.call(null, cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), a], null))));
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "+", "+", 1013904285), null, null], null), G__19583)) {
              return cljs.core.apply.call(null, cljs.core.concat, cljs.core.vals.call(null, cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), e], null))));
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(e) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(a) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(v) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null], null))].join(""));
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }();
  var G__19582__$1 = cljs.core.truth_(tx) ? cljs.core.filter.call(null, function(G__19582) {
    return function(p1__19572_SHARP_) {
      return cljs.core._EQ_.call(null, tx, p1__19572_SHARP_.tx);
    };
  }(G__19582), G__19582) : G__19582;
  var G__19582__$2 = cljs.core.truth_(added) ? cljs.core.filter.call(null, function(G__19582, G__19582__$1) {
    return function(p1__19573_SHARP_) {
      return cljs.core._EQ_.call(null, added, p1__19573_SHARP_.added);
    };
  }(G__19582, G__19582__$1), G__19582__$1) : G__19582__$1;
  return G__19582__$2;
};
datascript.DB.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__17256__auto__, k__17257__auto__) {
  var self__ = this;
  var this__17256__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119), null, new cljs.core.Keyword(null, "av", "av", 1013907367), null, new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), null, new cljs.core.Keyword(null, "ea", "ea", 1013907470), null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__17257__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__17256__auto____$1), self__.__meta), k__17257__auto__);
  } else {
    return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__17257__auto__)), null);
  }
};
datascript.DB.cljs$lang$type = true;
datascript.DB.cljs$lang$ctorPrSeq = function(this__17281__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "datascript/DB");
};
datascript.DB.cljs$lang$ctorPrWriter = function(this__17281__auto__, writer__17282__auto__) {
  return cljs.core._write.call(null, writer__17282__auto__, "datascript/DB");
};
datascript.__GT_DB = function __GT_DB(schema, ea, av, max_eid, max_tx) {
  return new datascript.DB(schema, ea, av, max_eid, max_tx);
};
datascript.map__GT_DB = function map__GT_DB(G__19576) {
  return new datascript.DB((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__19576), (new cljs.core.Keyword(null, "ea", "ea", 1013907470)).cljs$core$IFn$_invoke$arity$1(G__19576), (new cljs.core.Keyword(null, "av", "av", 1013907367)).cljs$core$IFn$_invoke$arity$1(G__19576), (new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841)).cljs$core$IFn$_invoke$arity$1(G__19576), (new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)).cljs$core$IFn$_invoke$arity$1(G__19576), 
  null, cljs.core.dissoc.call(null, G__19576, new cljs.core.Keyword(null, "schema", "schema", 4400883987), new cljs.core.Keyword(null, "ea", "ea", 1013907470), new cljs.core.Keyword(null, "av", "av", 1013907367), new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)));
};
datascript.TxReport = function(db_before, db_after, tx_data, tempids, __meta, __extmap) {
  this.db_before = db_before;
  this.db_after = db_after;
  this.tx_data = tx_data;
  this.tempids = tempids;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 4) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
datascript.TxReport.prototype.cljs$core$IHash$_hash$arity$1 = function(this__17242__auto__) {
  var self__ = this;
  var this__17242__auto____$1 = this;
  var h__17072__auto__ = self__.__hash;
  if (!(h__17072__auto__ == null)) {
    return h__17072__auto__;
  } else {
    var h__17072__auto____$1 = cljs.core.hash_imap.call(null, this__17242__auto____$1);
    self__.__hash = h__17072__auto____$1;
    return h__17072__auto____$1;
  }
};
datascript.TxReport.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__17247__auto__, k__17248__auto__) {
  var self__ = this;
  var this__17247__auto____$1 = this;
  return cljs.core._lookup.call(null, this__17247__auto____$1, k__17248__auto__, null);
};
datascript.TxReport.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__17249__auto__, k19585, else__17250__auto__) {
  var self__ = this;
  var this__17249__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k19585, new cljs.core.Keyword(null, "db-before", "db-before", 3838846752))) {
    return self__.db_before;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k19585, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159))) {
      return self__.db_after;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k19585, new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709))) {
        return self__.tx_data;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k19585, new cljs.core.Keyword(null, "tempids", "tempids", 3880764886))) {
          return self__.tempids;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.get.call(null, self__.__extmap, k19585, else__17250__auto__);
          } else {
            return null;
          }
        }
      }
    }
  }
};
datascript.TxReport.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__17254__auto__, k__17255__auto__, G__19584) {
  var self__ = this;
  var this__17254__auto____$1 = this;
  var pred__19587 = cljs.core.keyword_identical_QMARK_;
  var expr__19588 = k__17255__auto__;
  if (cljs.core.truth_(pred__19587.call(null, new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), expr__19588))) {
    return new datascript.TxReport(G__19584, self__.db_after, self__.tx_data, self__.tempids, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__19587.call(null, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), expr__19588))) {
      return new datascript.TxReport(self__.db_before, G__19584, self__.tx_data, self__.tempids, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__19587.call(null, new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), expr__19588))) {
        return new datascript.TxReport(self__.db_before, self__.db_after, G__19584, self__.tempids, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__19587.call(null, new cljs.core.Keyword(null, "tempids", "tempids", 3880764886), expr__19588))) {
          return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, G__19584, self__.__meta, self__.__extmap, null);
        } else {
          return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, self__.tempids, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__17255__auto__, G__19584), null);
        }
      }
    }
  }
};
datascript.TxReport.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__17261__auto__, writer__17262__auto__, opts__17263__auto__) {
  var self__ = this;
  var this__17261__auto____$1 = this;
  var pr_pair__17264__auto__ = function(keyval__17265__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__17262__auto__, cljs.core.pr_writer, "", " ", "", opts__17263__auto__, keyval__17265__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__17262__auto__, pr_pair__17264__auto__, "#datascript.TxReport{", ", ", "}", opts__17263__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), self__.db_before], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), self__.db_after], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), self__.tx_data], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tempids", "tempids", 3880764886), self__.tempids], null)], null), self__.__extmap));
};
datascript.TxReport.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__17252__auto__, entry__17253__auto__) {
  var self__ = this;
  var this__17252__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__17253__auto__)) {
    return cljs.core._assoc.call(null, this__17252__auto____$1, cljs.core._nth.call(null, entry__17253__auto__, 0), cljs.core._nth.call(null, entry__17253__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__17252__auto____$1, entry__17253__auto__);
  }
};
datascript.TxReport.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__17259__auto__) {
  var self__ = this;
  var this__17259__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), self__.db_before], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), self__.db_after], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), self__.tx_data], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tempids", "tempids", 3880764886), self__.tempids], null)], null), self__.__extmap));
};
datascript.TxReport.prototype.cljs$core$ICounted$_count$arity$1 = function(this__17251__auto__) {
  var self__ = this;
  var this__17251__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
datascript.TxReport.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__17243__auto__, other__17244__auto__) {
  var self__ = this;
  var this__17243__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__16649__auto__ = other__17244__auto__;
    if (cljs.core.truth_(and__16649__auto__)) {
      return this__17243__auto____$1.constructor === other__17244__auto__.constructor && cljs.core.equiv_map.call(null, this__17243__auto____$1, other__17244__auto__);
    } else {
      return and__16649__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
datascript.TxReport.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__17246__auto__, G__19584) {
  var self__ = this;
  var this__17246__auto____$1 = this;
  return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, self__.tempids, G__19584, self__.__extmap, self__.__hash);
};
datascript.TxReport.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__17241__auto__) {
  var self__ = this;
  var this__17241__auto____$1 = this;
  return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, self__.tempids, self__.__meta, self__.__extmap, self__.__hash);
};
datascript.TxReport.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__17245__auto__) {
  var self__ = this;
  var this__17245__auto____$1 = this;
  return self__.__meta;
};
datascript.TxReport.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__17256__auto__, k__17257__auto__) {
  var self__ = this;
  var this__17256__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), null, new cljs.core.Keyword(null, "tempids", "tempids", 3880764886), null, new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), null, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), null], null), null), k__17257__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__17256__auto____$1), self__.__meta), k__17257__auto__);
  } else {
    return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, self__.tempids, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__17257__auto__)), null);
  }
};
datascript.TxReport.cljs$lang$type = true;
datascript.TxReport.cljs$lang$ctorPrSeq = function(this__17281__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "datascript/TxReport");
};
datascript.TxReport.cljs$lang$ctorPrWriter = function(this__17281__auto__, writer__17282__auto__) {
  return cljs.core._write.call(null, writer__17282__auto__, "datascript/TxReport");
};
datascript.__GT_TxReport = function __GT_TxReport(db_before, db_after, tx_data, tempids) {
  return new datascript.TxReport(db_before, db_after, tx_data, tempids);
};
datascript.map__GT_TxReport = function map__GT_TxReport(G__19586) {
  return new datascript.TxReport((new cljs.core.Keyword(null, "db-before", "db-before", 3838846752)).cljs$core$IFn$_invoke$arity$1(G__19586), (new cljs.core.Keyword(null, "db-after", "db-after", 1658340159)).cljs$core$IFn$_invoke$arity$1(G__19586), (new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709)).cljs$core$IFn$_invoke$arity$1(G__19586), (new cljs.core.Keyword(null, "tempids", "tempids", 3880764886)).cljs$core$IFn$_invoke$arity$1(G__19586), null, cljs.core.dissoc.call(null, G__19586, 
  new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), new cljs.core.Keyword(null, "tempids", "tempids", 3880764886)));
};
datascript.multival_QMARK_ = function multival_QMARK_(db, attr) {
  return cljs.core._EQ_.call(null, cljs.core.get_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), attr, new cljs.core.Keyword("db", "cardinality", "db/cardinality", 1859321681)], null)), new cljs.core.Keyword("db.cardinality", "many", "db.cardinality/many", 2499141178));
};
datascript.match_tuple = function match_tuple(tuple, pattern) {
  return cljs.core.every_QMARK_.call(null, cljs.core.true_QMARK_, cljs.core.map.call(null, function(p1__19591_SHARP_, p2__19590_SHARP_) {
    return p2__19590_SHARP_ == null || cljs.core._EQ_.call(null, p1__19591_SHARP_, p2__19590_SHARP_);
  }, tuple, pattern));
};
datascript.search = function search(data, pattern) {
  if (function() {
    var G__19596 = data;
    if (G__19596) {
      var bit__17311__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__16661__auto__ = bit__17311__auto__;
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          return G__19596.datascript$ISearch$;
        }
      }())) {
        return true;
      } else {
        if (!G__19596.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, datascript.ISearch, G__19596);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, datascript.ISearch, G__19596);
    }
  }()) {
    return datascript._search.call(null, data, pattern);
  } else {
    if (function() {
      var or__16661__auto__ = function() {
        var G__19598 = data;
        if (G__19598) {
          var bit__17311__auto__ = G__19598.cljs$lang$protocol_mask$partition0$ & 8388608;
          if (bit__17311__auto__ || G__19598.cljs$core$ISeqable$) {
            return true;
          } else {
            if (!G__19598.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__19598);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__19598);
        }
      }();
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        return data instanceof Array;
      }
    }()) {
      return cljs.core.filter.call(null, function(p1__19592_SHARP_) {
        return datascript.match_tuple.call(null, p1__19592_SHARP_, pattern);
      }, data);
    } else {
      return null;
    }
  }
};
datascript.transact_datom = function transact_datom(db, datom) {
  if (cljs.core.truth_(datom.added)) {
    return cljs.core.update_in.call(null, cljs.core.update_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), datom.e, datom.a], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), datom), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), datom.a, datom.v], null), cljs.core.fnil.call(null, 
    cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), datom);
  } else {
    return cljs.core.update_in.call(null, cljs.core.update_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), datom.e, datom.a], null), cljs.core.disj, datom), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), datom.a, datom.v], null), cljs.core.disj, datom);
  }
};
datascript._resolve_eid = function _resolve_eid(eid, db) {
  return db.max_eid - eid;
};
datascript.resolve_eid = function resolve_eid(db, d) {
  if (d.e < 0) {
    return cljs.core.update_in.call(null, d, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "e", "e", 1013904343)], null), datascript._resolve_eid, db);
  } else {
    return d;
  }
};
datascript.entity__GT_ops = function entity__GT_ops(db, entity) {
  if (cljs.core.map_QMARK_.call(null, entity)) {
    var eid = (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(entity);
    var iter__17378__auto__ = function iter__19609(s__19610) {
      return new cljs.core.LazySeq(null, function() {
        var s__19610__$1 = s__19610;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__19610__$1);
          if (temp__4092__auto__) {
            var xs__4579__auto__ = temp__4092__auto__;
            var vec__19616 = cljs.core.first.call(null, xs__4579__auto__);
            var a = cljs.core.nth.call(null, vec__19616, 0, null);
            var vs = cljs.core.nth.call(null, vec__19616, 1, null);
            var iterys__17374__auto__ = function(s__19610__$1, vec__19616, a, vs, xs__4579__auto__, temp__4092__auto__) {
              return function iter__19611(s__19612) {
                return new cljs.core.LazySeq(null, function(s__19610__$1, vec__19616, a, vs, xs__4579__auto__, temp__4092__auto__) {
                  return function() {
                    var s__19612__$1 = s__19612;
                    while (true) {
                      var temp__4092__auto____$1 = cljs.core.seq.call(null, s__19612__$1);
                      if (temp__4092__auto____$1) {
                        var s__19612__$2 = temp__4092__auto____$1;
                        if (cljs.core.chunked_seq_QMARK_.call(null, s__19612__$2)) {
                          var c__17376__auto__ = cljs.core.chunk_first.call(null, s__19612__$2);
                          var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
                          var b__19614 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
                          if (function() {
                            var i__19613 = 0;
                            while (true) {
                              if (i__19613 < size__17377__auto__) {
                                var v = cljs.core._nth.call(null, c__17376__auto__, i__19613);
                                cljs.core.chunk_append.call(null, b__19614, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), eid, a, v], null));
                                var G__19618 = i__19613 + 1;
                                i__19613 = G__19618;
                                continue;
                              } else {
                                return true;
                              }
                              break;
                            }
                          }()) {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19614), iter__19611.call(null, cljs.core.chunk_rest.call(null, s__19612__$2)));
                          } else {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19614), null);
                          }
                        } else {
                          var v = cljs.core.first.call(null, s__19612__$2);
                          return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), eid, a, v], null), iter__19611.call(null, cljs.core.rest.call(null, s__19612__$2)));
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(s__19610__$1, vec__19616, a, vs, xs__4579__auto__, temp__4092__auto__), null, null);
              };
            }(s__19610__$1, vec__19616, a, vs, xs__4579__auto__, temp__4092__auto__);
            var fs__17375__auto__ = cljs.core.seq.call(null, iterys__17374__auto__.call(null, cljs.core.sequential_QMARK_.call(null, vs) && datascript.multival_QMARK_.call(null, db, a) ? vs : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [vs], null)));
            if (fs__17375__auto__) {
              return cljs.core.concat.call(null, fs__17375__auto__, iter__19609.call(null, cljs.core.rest.call(null, s__19610__$1)));
            } else {
              var G__19619 = cljs.core.rest.call(null, s__19610__$1);
              s__19610__$1 = G__19619;
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__17378__auto__.call(null, cljs.core.dissoc.call(null, entity, new cljs.core.Keyword("db", "id", "db/id", 1014111942)));
  } else {
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, entity), new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894))) {
      var vec__19617 = entity;
      var _ = cljs.core.nth.call(null, vec__19617, 0, null);
      var f = cljs.core.nth.call(null, vec__19617, 1, null);
      var args = cljs.core.nthnext.call(null, vec__19617, 2);
      return cljs.core.mapcat.call(null, function(p1__19599_SHARP_) {
        return entity__GT_ops.call(null, db, p1__19599_SHARP_);
      }, cljs.core.apply.call(null, f, db, args));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [entity], null);
      } else {
        return null;
      }
    }
  }
};
datascript.op__GT_tx_data = function op__GT_tx_data(db, p__19622) {
  var vec__19625 = p__19622;
  var op = cljs.core.nth.call(null, vec__19625, 0, null);
  var e = cljs.core.nth.call(null, vec__19625, 1, null);
  var a = cljs.core.nth.call(null, vec__19625, 2, null);
  var v = cljs.core.nth.call(null, vec__19625, 3, null);
  var tx = db.max_tx + 1;
  var G__19626 = op;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db.fn", "retractEntity", "db.fn/retractEntity", 4213852396), G__19626)) {
    var datoms = datascript._search.call(null, db, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [e], null));
    return cljs.core.map.call(null, function(p1__19621_SHARP_) {
      return cljs.core.assoc.call(null, p1__19621_SHARP_, new cljs.core.Keyword(null, "tx", "tx", 1013907958), tx, new cljs.core.Keyword(null, "added", "added", 1106564210), false);
    }, datoms);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db.fn", "retractAttribute", "db.fn/retractAttribute", 3416849171), G__19626)) {
      var datoms = datascript._search.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a], null));
      return cljs.core.map.call(null, function(p1__19620_SHARP_) {
        return cljs.core.assoc.call(null, p1__19620_SHARP_, new cljs.core.Keyword(null, "tx", "tx", 1013907958), tx, new cljs.core.Keyword(null, "added", "added", 1106564210), false);
      }, datoms);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db", "retract", "db/retract", 2112480480), G__19626)) {
        var temp__4092__auto__ = cljs.core.first.call(null, datascript._search.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a, v], null)));
        if (cljs.core.truth_(temp__4092__auto__)) {
          var old_datom = temp__4092__auto__;
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, v, tx, false)], null);
        } else {
          return null;
        }
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db", "add", "db/add", 1014207040), G__19626)) {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db.cardinality", "many", "db.cardinality/many", 2499141178), cljs.core.get_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), a, new cljs.core.Keyword("db", "cardinality", "db/cardinality", 1859321681)], null)))) {
            if (cljs.core.empty_QMARK_.call(null, datascript._search.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a, v], null)))) {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, v, tx, true)], null);
            } else {
              return null;
            }
          } else {
            var temp__4090__auto__ = cljs.core.first.call(null, datascript._search.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a], null)));
            if (cljs.core.truth_(temp__4090__auto__)) {
              var old_datom = temp__4090__auto__;
              if (cljs.core.not_EQ_.call(null, old_datom.v, v)) {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, old_datom.v, tx, false), datascript.__GT_Datom.call(null, e, a, v, tx, true)], null);
              } else {
                return null;
              }
            } else {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, v, tx, true)], null);
            }
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(op)].join(""));
          } else {
            return null;
          }
        }
      }
    }
  }
};
datascript.entity__GT_tx_data = function entity__GT_tx_data(db, entity) {
  return cljs.core.mapcat.call(null, function(p1__19627_SHARP_) {
    return datascript.op__GT_tx_data.call(null, db, p1__19627_SHARP_);
  }, datascript.entity__GT_ops.call(null, db, entity));
};
datascript._with = function _with(db, tx_data) {
  return cljs.core.assoc.call(null, cljs.core.update_in.call(null, cljs.core.reduce.call(null, datascript.transact_datom, db, tx_data), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)], null), cljs.core.inc), new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), cljs.core.reduce.call(null, cljs.core.max, db.max_eid, cljs.core.map.call(null, new cljs.core.Keyword(null, "e", "e", 1013904343), tx_data)));
};
datascript.parse_where = function parse_where(where) {
  var source = cljs.core.first.call(null, where);
  if (source instanceof cljs.core.Symbol && cljs.core._EQ_.call(null, "$", cljs.core.first.call(null, cljs.core.name.call(null, source)))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, where), cljs.core.next.call(null, where)], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, null), where], null);
  }
};
datascript.bind_symbol = function bind_symbol(sym, scope) {
  if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "_", "_", -1640531432, null), sym)) {
    return null;
  } else {
    if (sym instanceof cljs.core.Symbol) {
      return cljs.core.get.call(null, scope, sym, null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return sym;
      } else {
        return null;
      }
    }
  }
};
datascript.bind_symbols = function bind_symbols(form, scope) {
  return cljs.core.map.call(null, function(p1__19628_SHARP_) {
    return datascript.bind_symbol.call(null, p1__19628_SHARP_, scope);
  }, form);
};
datascript.search_datoms = function search_datoms(source, where, scope) {
  return datascript.search.call(null, datascript.bind_symbol.call(null, source, scope), datascript.bind_symbols.call(null, where, scope));
};
datascript.populate_scope = function populate_scope(scope, where, datom) {
  return cljs.core.into.call(null, scope, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p1__19629_SHARP_, p2__19630_SHARP_) {
    if (p1__19629_SHARP_ instanceof cljs.core.Symbol && !cljs.core.contains_QMARK_.call(null, scope, p1__19629_SHARP_)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__19629_SHARP_, p2__19630_SHARP_], null);
    } else {
      return null;
    }
  }, where, datom)));
};
datascript._differ_QMARK_ = function() {
  var _differ_QMARK___delegate = function(xs) {
    var l = cljs.core.count.call(null, xs);
    return cljs.core.not_EQ_.call(null, cljs.core.take.call(null, l / 2, xs), cljs.core.drop.call(null, l / 2, xs));
  };
  var _differ_QMARK_ = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return _differ_QMARK___delegate.call(this, xs);
  };
  _differ_QMARK_.cljs$lang$maxFixedArity = 0;
  _differ_QMARK_.cljs$lang$applyTo = function(arglist__19631) {
    var xs = cljs.core.seq(arglist__19631);
    return _differ_QMARK___delegate(xs);
  };
  _differ_QMARK_.cljs$core$IFn$_invoke$arity$variadic = _differ_QMARK___delegate;
  return _differ_QMARK_;
}();
datascript.built_ins = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null, "false?", "false?", 1372554549, null), new cljs.core.Symbol(null, "true?", "true?", -1529891286, null), new cljs.core.Symbol(null, "rem", "rem", -1640418733, null), new cljs.core.Symbol(null, "odd?", "odd?", -1637125463, null), new cljs.core.Symbol(null, "+", "+", -1640531484, null), new cljs.core.Symbol(null, "zero?", "zero?", -1524740016, null), new cljs.core.Symbol(null, "*", "*", -1640531485, null), new cljs.core.Symbol(null, 
"-differ?", "-differ?", 1135976441, null), new cljs.core.Symbol(null, "-", "-", -1640531482, null), new cljs.core.Symbol(null, "neg?", "neg?", -1637154200, null), new cljs.core.Symbol(null, "/", "/", -1640531480, null), new cljs.core.Symbol(null, "inc", "inc", -1640427113, null), new cljs.core.Symbol(null, "quot", "quot", -1637049150, null), new cljs.core.Symbol(null, "!\x3d", "!\x3d", -1640530443, null), new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), new cljs.core.Symbol(null, "\x3d", 
"\x3d", -1640531466, null), new cljs.core.Symbol(null, "max", "max", -1640423651, null), new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), new cljs.core.Symbol(null, "\x3e\x3d", "\x3e\x3d", -1640529544, null), new cljs.core.Symbol(null, "pos?", "pos?", -1637084636, null), new cljs.core.Symbol(null, "\x3c\x3d", "\x3c\x3d", -1640529606, null), new cljs.core.Symbol(null, "dec", "dec", -1640432197, null), new cljs.core.Symbol(null, 
"mod", "mod", -1640423237, null), new cljs.core.Symbol(null, "min", "min", -1640423413, null), new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "\x3d\x3d", "\x3d\x3d", -1640529575, null), new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null)], [cljs.core.false_QMARK_, cljs.core.true_QMARK_, cljs.core.rem, cljs.core.odd_QMARK_, cljs.core._PLUS_, cljs.core.zero_QMARK_, cljs.core._STAR_, datascript._differ_QMARK_, cljs.core._, cljs.core.neg_QMARK_, 
cljs.core._SLASH_, cljs.core.inc, cljs.core.quot, cljs.core.not_EQ_, cljs.core._LT_, cljs.core._EQ_, cljs.core.max, cljs.core._GT_, cljs.core.even_QMARK_, cljs.core._GT__EQ_, cljs.core.pos_QMARK_, cljs.core._LT__EQ_, cljs.core.dec, cljs.core.mod, cljs.core.min, cljs.core.not_EQ_, cljs.core._EQ__EQ_, cljs.core.nil_QMARK_]);
datascript.call = function call(p__19632, scope) {
  var vec__19634 = p__19632;
  var f = cljs.core.nth.call(null, vec__19634, 0, null);
  var args = cljs.core.nthnext.call(null, vec__19634, 1);
  var bound_args = datascript.bind_symbols.call(null, args, scope);
  var f__$1 = function() {
    var or__16661__auto__ = datascript.built_ins.call(null, f);
    if (cljs.core.truth_(or__16661__auto__)) {
      return or__16661__auto__;
    } else {
      return scope.call(null, f);
    }
  }();
  return cljs.core.apply.call(null, f__$1, bound_args);
};
datascript.looks_like_QMARK_ = function looks_like_QMARK_(pattern, form) {
  if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "_", "_", -1640531432, null), pattern)) {
    return true;
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), pattern)) {
      return cljs.core.sequential_QMARK_.call(null, form);
    } else {
      if (cljs.core.sequential_QMARK_.call(null, pattern)) {
        return cljs.core.sequential_QMARK_.call(null, form) && (cljs.core._EQ_.call(null, cljs.core.count.call(null, form), cljs.core.count.call(null, pattern)) && cljs.core.every_QMARK_.call(null, function(p__19641) {
          var vec__19642 = p__19641;
          var pattern_el = cljs.core.nth.call(null, vec__19642, 0, null);
          var form_el = cljs.core.nth.call(null, vec__19642, 1, null);
          return looks_like_QMARK_.call(null, pattern_el, form_el);
        }, cljs.core.map.call(null, cljs.core.vector, pattern, form)));
      } else {
        if (pattern instanceof cljs.core.Symbol) {
          return cljs.core._EQ_.call(null, form, pattern);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return pattern.call(null, form);
          } else {
            return null;
          }
        }
      }
    }
  }
};
datascript.collect = function collect(f, coll) {
  return cljs.core.reduce.call(null, function(p1__19643_SHARP_, p2__19644_SHARP_) {
    return clojure.set.union.call(null, p1__19643_SHARP_, f.call(null, p2__19644_SHARP_));
  }, cljs.core.PersistentHashSet.EMPTY, coll);
};
datascript.bind_rule_branch = function bind_rule_branch(branch, call_args, context) {
  var vec__19652 = branch;
  var vec__19653 = cljs.core.nth.call(null, vec__19652, 0, null);
  var rule = cljs.core.nth.call(null, vec__19653, 0, null);
  var local_args = cljs.core.nthnext.call(null, vec__19653, 1);
  var body = cljs.core.nthnext.call(null, vec__19652, 1);
  var replacements = cljs.core.zipmap.call(null, local_args, call_args);
  var seqid = (new cljs.core.Keyword(null, "__depth", "__depth", 2242649685)).cljs$core$IFn$_invoke$arity$2(context, 0);
  var bound_body = clojure.walk.postwalk.call(null, function(vec__19652, vec__19653, rule, local_args, body, replacements, seqid) {
    return function(p1__19645_SHARP_) {
      if (p1__19645_SHARP_ instanceof cljs.core.Symbol && cljs.core._EQ_.call(null, "?", cljs.core.first.call(null, cljs.core.name.call(null, p1__19645_SHARP_)))) {
        var or__16661__auto__ = replacements.call(null, p1__19645_SHARP_);
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          return cljs.core.symbol.call(null, [cljs.core.str(cljs.core.name.call(null, p1__19645_SHARP_)), cljs.core.str("__auto__"), cljs.core.str(seqid)].join(""));
        }
      } else {
        return p1__19645_SHARP_;
      }
    };
  }(vec__19652, vec__19653, rule, local_args, body, replacements, seqid), body);
  return cljs.core.concat.call(null, function() {
    var iter__17378__auto__ = function iter__19654(s__19655) {
      return new cljs.core.LazySeq(null, function() {
        var s__19655__$1 = s__19655;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__19655__$1);
          if (temp__4092__auto__) {
            var s__19655__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__19655__$2)) {
              var c__17376__auto__ = cljs.core.chunk_first.call(null, s__19655__$2);
              var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
              var b__19657 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
              if (function() {
                var i__19656 = 0;
                while (true) {
                  if (i__19656 < size__17377__auto__) {
                    var prev_call_args = cljs.core._nth.call(null, c__17376__auto__, i__19656);
                    cljs.core.chunk_append.call(null, b__19657, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "-differ?", "-differ?", 1135976441, null)], null), call_args, prev_call_args)], null));
                    var G__19658 = i__19656 + 1;
                    i__19656 = G__19658;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19657), iter__19654.call(null, cljs.core.chunk_rest.call(null, s__19655__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19657), null);
              }
            } else {
              var prev_call_args = cljs.core.first.call(null, s__19655__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "-differ?", "-differ?", 1135976441, null)], null), call_args, prev_call_args)], null), iter__19654.call(null, cljs.core.rest.call(null, s__19655__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__17378__auto__.call(null, cljs.core.get.call(null, context, rule));
  }(), bound_body);
};
datascript._q = function _q(in_PLUS_sources, wheres, scope) {
  while (true) {
    if (cljs.core.truth_(cljs.core.not_empty.call(null, in_PLUS_sources))) {
      var vec__19672 = cljs.core.first.call(null, in_PLUS_sources);
      var in$ = cljs.core.nth.call(null, vec__19672, 0, null);
      var source = cljs.core.nth.call(null, vec__19672, 1, null);
      var pred__19673 = datascript.looks_like_QMARK_;
      var expr__19674 = in$;
      if (cljs.core.truth_(pred__19673.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "_", "_", -1640531432, null), new cljs.core.Symbol(null, "...", "...", -1640485849, null)], null), expr__19674))) {
        return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
          return function(p1__19659_SHARP_) {
            return _q.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, in$), p1__19659_SHARP_], null)], null), cljs.core.next.call(null, in_PLUS_sources)), wheres, scope);
          };
        }(in_PLUS_sources, wheres, scope), source);
      } else {
        if (cljs.core.truth_(pred__19673.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null)], null), expr__19674))) {
          return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
            return function(p1__19660_SHARP_) {
              return _q.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, in$), p1__19660_SHARP_], null)], null), cljs.core.next.call(null, in_PLUS_sources)), wheres, scope);
            };
          }(in_PLUS_sources, wheres, scope), source);
        } else {
          if (cljs.core.truth_(pred__19673.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), expr__19674))) {
            var G__19681 = cljs.core.concat.call(null, cljs.core.zipmap.call(null, in$, source), cljs.core.next.call(null, in_PLUS_sources));
            var G__19682 = wheres;
            var G__19683 = scope;
            in_PLUS_sources = G__19681;
            wheres = G__19682;
            scope = G__19683;
            continue;
          } else {
            if (cljs.core.truth_(pred__19673.call(null, new cljs.core.Symbol(null, "%", "%", -1640531490, null), expr__19674))) {
              var rules = typeof source === "string" ? cljs.reader.read_string.call(null, source) : source;
              var G__19684 = cljs.core.next.call(null, in_PLUS_sources);
              var G__19685 = wheres;
              var G__19686 = cljs.core.assoc.call(null, scope, new cljs.core.Keyword(null, "__rules", "__rules", 2256051337), cljs.core.group_by.call(null, cljs.core.ffirst, rules));
              in_PLUS_sources = G__19684;
              wheres = G__19685;
              scope = G__19686;
              continue;
            } else {
              if (cljs.core.truth_(pred__19673.call(null, new cljs.core.Symbol(null, "_", "_", -1640531432, null), expr__19674))) {
                var G__19687 = cljs.core.next.call(null, in_PLUS_sources);
                var G__19688 = wheres;
                var G__19689 = cljs.core.assoc.call(null, scope, in$, source);
                in_PLUS_sources = G__19687;
                wheres = G__19688;
                scope = G__19689;
                continue;
              } else {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__19674)].join(""));
              }
            }
          }
        }
      }
    } else {
      if (cljs.core.truth_(cljs.core.not_empty.call(null, wheres))) {
        var where = cljs.core.first.call(null, wheres);
        var temp__4090__auto__ = cljs.core.get.call(null, (new cljs.core.Keyword(null, "__rules", "__rules", 2256051337)).cljs$core$IFn$_invoke$arity$1(scope), cljs.core.first.call(null, where));
        if (cljs.core.truth_(temp__4090__auto__)) {
          var rule_branches = temp__4090__auto__;
          var vec__19676 = where;
          var rule = cljs.core.nth.call(null, vec__19676, 0, null);
          var call_args = cljs.core.nthnext.call(null, vec__19676, 1);
          var next_scope = cljs.core.update_in.call(null, cljs.core.update_in.call(null, scope, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "__rules_ctx", "__rules_ctx", 2834098801), rule], null), cljs.core.conj, call_args), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "__rules_ctx", "__rules_ctx", 2834098801), new cljs.core.Keyword(null, "__depth", "__depth", 2242649685)], 
          null), cljs.core.inc);
          var next_wheres = cljs.core.next.call(null, wheres);
          return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
            return function(p1__19661_SHARP_) {
              return _q.call(null, null, cljs.core.concat.call(null, datascript.bind_rule_branch.call(null, p1__19661_SHARP_, call_args, (new cljs.core.Keyword(null, "__rules_ctx", "__rules_ctx", 2834098801)).cljs$core$IFn$_invoke$arity$1(scope)), next_wheres), next_scope);
            };
          }(in_PLUS_sources, wheres, scope), rule_branches);
        } else {
          var pred__19677 = datascript.looks_like_QMARK_;
          var expr__19678 = where;
          if (cljs.core.truth_(pred__19677.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null)], null), expr__19678))) {
            if (cljs.core.truth_(datascript.call.call(null, cljs.core.first.call(null, where), scope))) {
              var G__19690 = null;
              var G__19691 = cljs.core.next.call(null, wheres);
              var G__19692 = scope;
              in_PLUS_sources = G__19690;
              wheres = G__19691;
              scope = G__19692;
              continue;
            } else {
              return null;
            }
          } else {
            if (cljs.core.truth_(pred__19677.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), new cljs.core.Symbol(null, "_", "_", -1640531432, null)], null), expr__19678))) {
              var res = datascript.call.call(null, cljs.core.first.call(null, where), scope);
              var G__19693 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.second.call(null, where), res], null)], null);
              var G__19694 = cljs.core.next.call(null, wheres);
              var G__19695 = scope;
              in_PLUS_sources = G__19693;
              wheres = G__19694;
              scope = G__19695;
              continue;
            } else {
              if (cljs.core.truth_(pred__19677.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), expr__19678))) {
                var vec__19680 = datascript.parse_where.call(null, where);
                var source = cljs.core.nth.call(null, vec__19680, 0, null);
                var where__$1 = cljs.core.nth.call(null, vec__19680, 1, null);
                var found = datascript.search_datoms.call(null, source, where__$1, scope);
                return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
                  return function(p1__19662_SHARP_) {
                    return _q.call(null, null, cljs.core.next.call(null, wheres), datascript.populate_scope.call(null, scope, where__$1, p1__19662_SHARP_));
                  };
                }(in_PLUS_sources, wheres, scope), found);
              } else {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__19678)].join(""));
              }
            }
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.PersistentHashSet.fromArray([cljs.core.mapv.call(null, scope, (new cljs.core.Keyword(null, "__find", "__find", 3824551179)).cljs$core$IFn$_invoke$arity$1(scope))], true);
        } else {
          return null;
        }
      }
    }
    break;
  }
};
datascript.built_in_aggregates = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Symbol(null, "distinct", "distinct", -1351833419, null), cljs.core.comp.call(null, cljs.core.vec, cljs.core.distinct), new cljs.core.Symbol(null, "min", "min", -1640423413, null), function() {
  var G__19697 = null;
  var G__19697__1 = function(coll) {
    return cljs.core.reduce.call(null, cljs.core.min, coll);
  };
  var G__19697__2 = function(n, coll) {
    return cljs.core.vec.call(null, cljs.core.reduce.call(null, function(acc, x) {
      if (cljs.core.count.call(null, acc) < n) {
        return cljs.core.sort.call(null, cljs.core.conj.call(null, acc, x));
      } else {
        if (x < cljs.core.last.call(null, acc)) {
          return cljs.core.sort.call(null, cljs.core.conj.call(null, cljs.core.butlast.call(null, acc), x));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return acc;
          } else {
            return null;
          }
        }
      }
    }, cljs.core.PersistentVector.EMPTY, coll));
  };
  G__19697 = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return G__19697__1.call(this, n);
      case 2:
        return G__19697__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__19697;
}(), new cljs.core.Symbol(null, "max", "max", -1640423651, null), function() {
  var G__19698 = null;
  var G__19698__1 = function(coll) {
    return cljs.core.reduce.call(null, cljs.core.max, coll);
  };
  var G__19698__2 = function(n, coll) {
    return cljs.core.vec.call(null, cljs.core.reduce.call(null, function(acc, x) {
      if (cljs.core.count.call(null, acc) < n) {
        return cljs.core.sort.call(null, cljs.core.conj.call(null, acc, x));
      } else {
        if (x > cljs.core.first.call(null, acc)) {
          return cljs.core.sort.call(null, cljs.core.conj.call(null, cljs.core.next.call(null, acc), x));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return acc;
          } else {
            return null;
          }
        }
      }
    }, cljs.core.PersistentVector.EMPTY, coll));
  };
  G__19698 = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return G__19698__1.call(this, n);
      case 2:
        return G__19698__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__19698;
}(), new cljs.core.Symbol(null, "sum", "sum", -1640417276, null), function(p1__19696_SHARP_) {
  return cljs.core.reduce.call(null, cljs.core._PLUS_, 0, p1__19696_SHARP_);
}, new cljs.core.Symbol(null, "rand", "rand", -1637038626, null), function() {
  var G__19699 = null;
  var G__19699__1 = function(coll) {
    return cljs.core.rand_nth.call(null, coll);
  };
  var G__19699__2 = function(n, coll) {
    return cljs.core.vec.call(null, cljs.core.repeatedly.call(null, n, function() {
      return cljs.core.rand_nth.call(null, coll);
    }));
  };
  G__19699 = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return G__19699__1.call(this, n);
      case 2:
        return G__19699__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__19699;
}(), new cljs.core.Symbol(null, "sample", "sample", 1744760675, null), function(n, coll) {
  return cljs.core.vec.call(null, cljs.core.take.call(null, n, cljs.core.shuffle.call(null, coll)));
}, new cljs.core.Symbol(null, "count", "count", -1545680184, null), cljs.core.count], null);
datascript.aggr_group_key = function aggr_group_key(find, result) {
  return cljs.core.mapv.call(null, function(val, sym) {
    if (cljs.core.sequential_QMARK_.call(null, sym)) {
      return null;
    } else {
      return val;
    }
  }, result, find);
};
datascript._aggregate = function _aggregate(find, scope, results) {
  return cljs.core.mapv.call(null, function(sym, val, i) {
    if (cljs.core.sequential_QMARK_.call(null, sym)) {
      var vec__19702 = sym;
      var f = cljs.core.nth.call(null, vec__19702, 0, null);
      var args = cljs.core.nthnext.call(null, vec__19702, 1);
      var vals = cljs.core.map.call(null, function(vec__19702, f, args) {
        return function(p1__19700_SHARP_) {
          return cljs.core.get.call(null, p1__19700_SHARP_, i);
        };
      }(vec__19702, f, args), results);
      var args__$1 = cljs.core.concat.call(null, datascript.bind_symbols.call(null, cljs.core.butlast.call(null, args), scope), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [vals], null));
      var f__$1 = function() {
        var or__16661__auto__ = datascript.built_in_aggregates.call(null, f);
        if (cljs.core.truth_(or__16661__auto__)) {
          return or__16661__auto__;
        } else {
          return scope.call(null, f);
        }
      }();
      return cljs.core.apply.call(null, f__$1, args__$1);
    } else {
      return val;
    }
  }, find, cljs.core.first.call(null, results), cljs.core.range.call(null));
};
datascript.aggregate = function aggregate(query, scope, results) {
  var find = cljs.core.concat.call(null, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query), (new cljs.core.Keyword(null, "with", "with", 1017553976)).cljs$core$IFn$_invoke$arity$1(query));
  return cljs.core.mapv.call(null, function(p__19706) {
    var vec__19707 = p__19706;
    var _ = cljs.core.nth.call(null, vec__19707, 0, null);
    var results__$1 = cljs.core.nth.call(null, vec__19707, 1, null);
    return datascript._aggregate.call(null, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query), scope, results__$1);
  }, cljs.core.group_by.call(null, function(p1__19703_SHARP_) {
    return datascript.aggr_group_key.call(null, find, p1__19703_SHARP_);
  }, results));
};
datascript.parse_query = function parse_query(query) {
  var parsed = cljs.core.PersistentArrayMap.EMPTY;
  var key = null;
  var qs = query;
  while (true) {
    var temp__4090__auto__ = cljs.core.first.call(null, qs);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var q = temp__4090__auto__;
      if (q instanceof cljs.core.Keyword) {
        var G__19708 = parsed;
        var G__19709 = q;
        var G__19710 = cljs.core.next.call(null, qs);
        parsed = G__19708;
        key = G__19709;
        qs = G__19710;
        continue;
      } else {
        var G__19711 = cljs.core.update_in.call(null, parsed, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [key], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentVector.EMPTY), q);
        var G__19712 = key;
        var G__19713 = cljs.core.next.call(null, qs);
        parsed = G__19711;
        key = G__19712;
        qs = G__19713;
        continue;
      }
    } else {
      return parsed;
    }
    break;
  }
};
datascript.q = function() {
  var q__delegate = function(query, sources) {
    var query__$1 = cljs.core.sequential_QMARK_.call(null, query) ? datascript.parse_query.call(null, query) : query;
    var ins__GT_sources = cljs.core.zipmap.call(null, (new cljs.core.Keyword(null, "in", "in", 1013907607)).cljs$core$IFn$_invoke$arity$2(query__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, null)], null)), sources);
    var find = cljs.core.concat.call(null, cljs.core.map.call(null, function(query__$1, ins__GT_sources) {
      return function(p1__19714_SHARP_) {
        if (cljs.core.sequential_QMARK_.call(null, p1__19714_SHARP_)) {
          return cljs.core.last.call(null, p1__19714_SHARP_);
        } else {
          return p1__19714_SHARP_;
        }
      };
    }(query__$1, ins__GT_sources), (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query__$1)), (new cljs.core.Keyword(null, "with", "with", 1017553976)).cljs$core$IFn$_invoke$arity$1(query__$1));
    var results = datascript._q.call(null, ins__GT_sources, (new cljs.core.Keyword(null, "where", "where", 1127002201)).cljs$core$IFn$_invoke$arity$1(query__$1), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "__find", "__find", 3824551179), find], null));
    var G__19717 = results;
    var G__19717__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "with", "with", 1017553976)).cljs$core$IFn$_invoke$arity$1(query__$1)) ? cljs.core.mapv.call(null, function(G__19717) {
      return function(p1__19715_SHARP_) {
        return cljs.core.subvec.call(null, p1__19715_SHARP_, 0, cljs.core.count.call(null, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query__$1)));
      };
    }(G__19717), G__19717) : G__19717;
    var G__19717__$2 = cljs.core.truth_(cljs.core.not_empty.call(null, cljs.core.filter.call(null, cljs.core.sequential_QMARK_, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query__$1)))) ? datascript.aggregate.call(null, query__$1, ins__GT_sources, G__19717__$1) : G__19717__$1;
    return G__19717__$2;
  };
  var q = function(query, var_args) {
    var sources = null;
    if (arguments.length > 1) {
      sources = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return q__delegate.call(this, query, sources);
  };
  q.cljs$lang$maxFixedArity = 1;
  q.cljs$lang$applyTo = function(arglist__19718) {
    var query = cljs.core.first(arglist__19718);
    var sources = cljs.core.rest(arglist__19718);
    return q__delegate(query, sources);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
datascript.entity = function entity(db, eid) {
  var temp__4092__auto__ = cljs.core.not_empty.call(null, cljs.core.get_in.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), eid], null)));
  if (cljs.core.truth_(temp__4092__auto__)) {
    var attrs = temp__4092__auto__;
    return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), eid], null), function() {
      var iter__17378__auto__ = function iter__19727(s__19728) {
        return new cljs.core.LazySeq(null, function() {
          var s__19728__$1 = s__19728;
          while (true) {
            var temp__4092__auto____$1 = cljs.core.seq.call(null, s__19728__$1);
            if (temp__4092__auto____$1) {
              var s__19728__$2 = temp__4092__auto____$1;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__19728__$2)) {
                var c__17376__auto__ = cljs.core.chunk_first.call(null, s__19728__$2);
                var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
                var b__19730 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
                if (function() {
                  var i__19729 = 0;
                  while (true) {
                    if (i__19729 < size__17377__auto__) {
                      var vec__19733 = cljs.core._nth.call(null, c__17376__auto__, i__19729);
                      var attr = cljs.core.nth.call(null, vec__19733, 0, null);
                      var datoms = cljs.core.nth.call(null, vec__19733, 1, null);
                      cljs.core.chunk_append.call(null, b__19730, datascript.multival_QMARK_.call(null, db, attr) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.map.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), datoms)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.first.call(null, datoms).v], null));
                      var G__19735 = i__19729 + 1;
                      i__19729 = G__19735;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19730), iter__19727.call(null, cljs.core.chunk_rest.call(null, s__19728__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19730), null);
                }
              } else {
                var vec__19734 = cljs.core.first.call(null, s__19728__$2);
                var attr = cljs.core.nth.call(null, vec__19734, 0, null);
                var datoms = cljs.core.nth.call(null, vec__19734, 1, null);
                return cljs.core.cons.call(null, datascript.multival_QMARK_.call(null, db, attr) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.map.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), datoms)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.first.call(null, datoms).v], null), iter__19727.call(null, cljs.core.rest.call(null, s__19728__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__17378__auto__.call(null, attrs);
    }());
  } else {
    return null;
  }
};
datascript.tx0 = 536870912;
datascript.empty_db = function() {
  var empty_db__delegate = function(p__19736) {
    var vec__19738 = p__19736;
    var schema = cljs.core.nth.call(null, vec__19738, 0, null);
    return new datascript.DB(schema, cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentArrayMap.EMPTY, 0, datascript.tx0);
  };
  var empty_db = function(var_args) {
    var p__19736 = null;
    if (arguments.length > 0) {
      p__19736 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return empty_db__delegate.call(this, p__19736);
  };
  empty_db.cljs$lang$maxFixedArity = 0;
  empty_db.cljs$lang$applyTo = function(arglist__19739) {
    var p__19736 = cljs.core.seq(arglist__19739);
    return empty_db__delegate(p__19736);
  };
  empty_db.cljs$core$IFn$_invoke$arity$variadic = empty_db__delegate;
  return empty_db;
}();
datascript.create_conn = function() {
  var create_conn__delegate = function(p__19740) {
    var vec__19742 = p__19740;
    var schema = cljs.core.nth.call(null, vec__19742, 0, null);
    return cljs.core.atom.call(null, datascript.empty_db.call(null, schema), new cljs.core.Keyword(null, "meta", "meta", 1017252215), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "listeners", "listeners", 4090152369), cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY)], null));
  };
  var create_conn = function(var_args) {
    var p__19740 = null;
    if (arguments.length > 0) {
      p__19740 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return create_conn__delegate.call(this, p__19740);
  };
  create_conn.cljs$lang$maxFixedArity = 0;
  create_conn.cljs$lang$applyTo = function(arglist__19743) {
    var p__19740 = cljs.core.seq(arglist__19743);
    return create_conn__delegate(p__19740);
  };
  create_conn.cljs$core$IFn$_invoke$arity$variadic = create_conn__delegate;
  return create_conn;
}();
datascript.transact = function transact(db, entities) {
  var raw_datoms = cljs.core.mapcat.call(null, function(p1__19744_SHARP_) {
    return datascript.entity__GT_tx_data.call(null, db, p1__19744_SHARP_);
  }, entities);
  var datoms = cljs.core.map.call(null, function(raw_datoms) {
    return function(p1__19745_SHARP_) {
      return datascript.resolve_eid.call(null, db, p1__19745_SHARP_);
    };
  }(raw_datoms), raw_datoms);
  var tempids = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(raw_datoms, datoms) {
    return function(p1__19747_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__19747_SHARP_.e, datascript._resolve_eid.call(null, p1__19747_SHARP_.e, db)], null);
    };
  }(raw_datoms, datoms), cljs.core.filter.call(null, function(raw_datoms, datoms) {
    return function(p1__19746_SHARP_) {
      return p1__19746_SHARP_.e < 0;
    };
  }(raw_datoms, datoms), raw_datoms)));
  return new datascript.TxReport(db, datascript._with.call(null, db, datoms), datoms, tempids);
};
datascript.with$ = function with$(db, entities) {
  return(new cljs.core.Keyword(null, "db-after", "db-after", 1658340159)).cljs$core$IFn$_invoke$arity$1(datascript.transact.call(null, db, entities));
};
datascript._transact_BANG_ = function _transact_BANG_(conn, entities) {
  var report = cljs.core.atom.call(null, null);
  cljs.core.swap_BANG_.call(null, conn, function(db) {
    var r = datascript.transact.call(null, db, entities);
    cljs.core.reset_BANG_.call(null, report, r);
    return(new cljs.core.Keyword(null, "db-after", "db-after", 1658340159)).cljs$core$IFn$_invoke$arity$1(r);
  });
  return cljs.core.deref.call(null, report);
};
datascript.transact_BANG_ = function transact_BANG_(conn, entities) {
  var report = datascript._transact_BANG_.call(null, conn, entities);
  var seq__19754_19760 = cljs.core.seq.call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "listeners", "listeners", 4090152369)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, conn))));
  var chunk__19755_19761 = null;
  var count__19756_19762 = 0;
  var i__19757_19763 = 0;
  while (true) {
    if (i__19757_19763 < count__19756_19762) {
      var vec__19758_19764 = cljs.core._nth.call(null, chunk__19755_19761, i__19757_19763);
      var __19765 = cljs.core.nth.call(null, vec__19758_19764, 0, null);
      var callback_19766 = cljs.core.nth.call(null, vec__19758_19764, 1, null);
      callback_19766.call(null, report);
      var G__19767 = seq__19754_19760;
      var G__19768 = chunk__19755_19761;
      var G__19769 = count__19756_19762;
      var G__19770 = i__19757_19763 + 1;
      seq__19754_19760 = G__19767;
      chunk__19755_19761 = G__19768;
      count__19756_19762 = G__19769;
      i__19757_19763 = G__19770;
      continue;
    } else {
      var temp__4092__auto___19771 = cljs.core.seq.call(null, seq__19754_19760);
      if (temp__4092__auto___19771) {
        var seq__19754_19772__$1 = temp__4092__auto___19771;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19754_19772__$1)) {
          var c__17409__auto___19773 = cljs.core.chunk_first.call(null, seq__19754_19772__$1);
          var G__19774 = cljs.core.chunk_rest.call(null, seq__19754_19772__$1);
          var G__19775 = c__17409__auto___19773;
          var G__19776 = cljs.core.count.call(null, c__17409__auto___19773);
          var G__19777 = 0;
          seq__19754_19760 = G__19774;
          chunk__19755_19761 = G__19775;
          count__19756_19762 = G__19776;
          i__19757_19763 = G__19777;
          continue;
        } else {
          var vec__19759_19778 = cljs.core.first.call(null, seq__19754_19772__$1);
          var __19779 = cljs.core.nth.call(null, vec__19759_19778, 0, null);
          var callback_19780 = cljs.core.nth.call(null, vec__19759_19778, 1, null);
          callback_19780.call(null, report);
          var G__19781 = cljs.core.next.call(null, seq__19754_19772__$1);
          var G__19782 = null;
          var G__19783 = 0;
          var G__19784 = 0;
          seq__19754_19760 = G__19781;
          chunk__19755_19761 = G__19782;
          count__19756_19762 = G__19783;
          i__19757_19763 = G__19784;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return report;
};
datascript.listen_BANG_ = function() {
  var listen_BANG_ = null;
  var listen_BANG___2 = function(conn, callback) {
    return listen_BANG_.call(null, conn, cljs.core.rand.call(null), callback);
  };
  var listen_BANG___3 = function(conn, key, callback) {
    cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "listeners", "listeners", 4090152369)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, conn)), cljs.core.assoc, key, callback);
    return key;
  };
  listen_BANG_ = function(conn, key, callback) {
    switch(arguments.length) {
      case 2:
        return listen_BANG___2.call(this, conn, key);
      case 3:
        return listen_BANG___3.call(this, conn, key, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$2 = listen_BANG___2;
  listen_BANG_.cljs$core$IFn$_invoke$arity$3 = listen_BANG___3;
  return listen_BANG_;
}();
datascript.unlisten_BANG_ = function unlisten_BANG_(conn, key) {
  return cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "listeners", "listeners", 4090152369)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, conn)), cljs.core.dissoc, key);
};
goog.provide("gin.datascript_helpers");
goog.require("cljs.core");
goog.require("datascript");
goog.require("datascript");
gin.datascript_helpers.entity_lookup = function entity_lookup(db, av_key) {
  var temp__4092__auto__ = cljs.core.first.call(null, cljs.core.get_in.call(null, (new cljs.core.Keyword(null, "av", "av", 1013907367)).cljs$core$IFn$_invoke$arity$1(db), av_key));
  if (cljs.core.truth_(temp__4092__auto__)) {
    var d = temp__4092__auto__;
    return datascript.entity.call(null, db, (new cljs.core.Keyword(null, "e", "e", 1013904343)).cljs$core$IFn$_invoke$arity$1(d));
  } else {
    return null;
  }
};
goog.provide("gin.transact");
goog.require("cljs.core");
goog.require("gin.datascript_helpers");
goog.require("gin.datascript_helpers");
goog.require("datascript");
goog.require("datascript");
gin.transact.log_event = function() {
  var log_event__delegate = function(db, event, args) {
    var evente = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -100, new cljs.core.Keyword(null, "event", "event", 1110795788), event, new cljs.core.Keyword(null, "args", "args", 1016906831), args], null);
    var temp__4090__auto__ = cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "last-event", "last-event", 1851999253)], null)], null)], null), db));
    if (cljs.core.truth_(temp__4090__auto__)) {
      var prev_event_eid = temp__4090__auto__;
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc.call(null, evente, new cljs.core.Keyword(null, "prev-event", "prev-event", 3549456882), prev_event_eid), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "retractAttribute", "db.fn/retractAttribute", 3416849171), prev_event_eid, new cljs.core.Keyword(null, "last-event", "last-event", 1851999253)], null)], null);
    } else {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [evente], null);
    }
  };
  var log_event = function(db, event, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return log_event__delegate.call(this, db, event, args);
  };
  log_event.cljs$lang$maxFixedArity = 2;
  log_event.cljs$lang$applyTo = function(arglist__19411) {
    var db = cljs.core.first(arglist__19411);
    arglist__19411 = cljs.core.next(arglist__19411);
    var event = cljs.core.first(arglist__19411);
    var args = cljs.core.rest(arglist__19411);
    return log_event__delegate(db, event, args);
  };
  log_event.cljs$core$IFn$_invoke$arity$variadic = log_event__delegate;
  return log_event;
}();
gin.transact.maybe_pile_reshuffle = function maybe_pile_reshuffle(db, game_id) {
  var game = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
  var pile = (new cljs.core.Keyword(null, "pile", "pile", 1017345188)).cljs$core$IFn$_invoke$arity$1(game);
  if (cljs.core.empty_QMARK_.call(null, pile)) {
    var new_pile = (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(game);
    return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "pile", "pile", 1017345188), new_pile, new cljs.core.Keyword(null, "discards", "discards", 1286668039), cljs.core.PersistentVector.EMPTY], null)], null), function() {
      var iter__17378__auto__ = function iter__19416(s__19417) {
        return new cljs.core.LazySeq(null, function() {
          var s__19417__$1 = s__19417;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__19417__$1);
            if (temp__4092__auto__) {
              var s__19417__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__19417__$2)) {
                var c__17376__auto__ = cljs.core.chunk_first.call(null, s__19417__$2);
                var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
                var b__19419 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
                if (function() {
                  var i__19418 = 0;
                  while (true) {
                    if (i__19418 < size__17377__auto__) {
                      var card_id = cljs.core._nth.call(null, c__17376__auto__, i__19418);
                      cljs.core.chunk_append.call(null, b__19419, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), card_id], null))), new cljs.core.Keyword("card", "suit", 
                      "card/suit", 1215370835), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092), new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092)], null));
                      var G__19420 = i__19418 + 1;
                      i__19418 = G__19420;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19419), iter__19416.call(null, cljs.core.chunk_rest.call(null, s__19417__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19419), null);
                }
              } else {
                var card_id = cljs.core.first.call(null, s__19417__$2);
                return cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), card_id], null))), new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), 
                new cljs.core.Keyword(null, "hidden", "hidden", 4091384092), new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092)], null), iter__19416.call(null, cljs.core.rest.call(null, s__19417__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__17378__auto__.call(null, new_pile);
    }());
  } else {
    return null;
  }
};
gin.transact.game_created = function game_created(db, game_id, player1_id, player2_id, us) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "game-created", "game-created", 3250098047), game_id, player1_id, player2_id, us], null), new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -1, new cljs.core.Keyword(null, 
  "game-id", "game-id", 818249800), game_id, new cljs.core.Keyword(null, "player1", "player1", 520336610), player1_id, new cljs.core.Keyword(null, "player2", "player2", 520336611), player2_id, new cljs.core.Keyword(null, "us", "us", 1013907984), us, new cljs.core.Keyword(null, "pile", "pile", 1017345188), cljs.core.map.call(null, cljs.core.second, cljs.core.sort_by.call(null, cljs.core.first, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 
  1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, 
  null), new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, 
  "?e", "?e", -1640529473, null), new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092)], null)], null)], null), db)))], null)], null);
};
gin.transact.deal = function deal(db, game_id, discard_card, our_cards, to_start) {
  return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "deal", "deal", 1016983518), game_id, discard_card, our_cards, to_start], null)], null), function() {
    var map__19440 = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
    var map__19440__$1 = cljs.core.seq_QMARK_.call(null, map__19440) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19440) : map__19440;
    var game = map__19440__$1;
    var game_e = cljs.core.get.call(null, map__19440__$1, new cljs.core.Keyword("db", "id", "db/id", 1014111942));
    var cards = function() {
      var iter__17378__auto__ = function(map__19440, map__19440__$1, game, game_e) {
        return function iter__19444(s__19445) {
          return new cljs.core.LazySeq(null, function(map__19440, map__19440__$1, game, game_e) {
            return function() {
              var s__19445__$1 = s__19445;
              while (true) {
                var temp__4092__auto__ = cljs.core.seq.call(null, s__19445__$1);
                if (temp__4092__auto__) {
                  var s__19445__$2 = temp__4092__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__19445__$2)) {
                    var c__17376__auto__ = cljs.core.chunk_first.call(null, s__19445__$2);
                    var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
                    var b__19447 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
                    if (function() {
                      var i__19446 = 0;
                      while (true) {
                        if (i__19446 < size__17377__auto__) {
                          var cid = cljs.core._nth.call(null, c__17376__auto__, i__19446);
                          cljs.core.chunk_append.call(null, b__19447, gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), cid], null)));
                          var G__19459 = i__19446 + 1;
                          i__19446 = G__19459;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19447), iter__19444.call(null, cljs.core.chunk_rest.call(null, s__19445__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19447), null);
                    }
                  } else {
                    var cid = cljs.core.first.call(null, s__19445__$2);
                    return cljs.core.cons.call(null, gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), cid], null)), iter__19444.call(null, cljs.core.rest.call(null, s__19445__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(map__19440, map__19440__$1, game, game_e), null, null);
        };
      }(map__19440, map__19440__$1, game, game_e);
      return iter__17378__auto__.call(null, (new cljs.core.Keyword(null, "pile", "pile", 1017345188)).cljs$core$IFn$_invoke$arity$1(game));
    }();
    var vec__19441 = cljs.core.split_at.call(null, 31, cards);
    var pile = cljs.core.nth.call(null, vec__19441, 0, null);
    var vec__19442 = cljs.core.nth.call(null, vec__19441, 1, null);
    var discard = cljs.core.nth.call(null, vec__19442, 0, null);
    var other = cljs.core.nthnext.call(null, vec__19442, 1);
    var vec__19443 = function() {
      var vec__19448 = cljs.core.split_at.call(null, 10, other);
      var f = cljs.core.nth.call(null, vec__19448, 0, null);
      var s = cljs.core.nth.call(null, vec__19448, 1, null);
      if (cljs.core._EQ_.call(null, to_start, (new cljs.core.Keyword(null, "us", "us", 1013907984)).cljs$core$IFn$_invoke$arity$1(game))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, f], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f, s], null);
      }
    }();
    var ours = cljs.core.nth.call(null, vec__19443, 0, null);
    var theirs = cljs.core.nth.call(null, vec__19443, 1, null);
    return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), game_e, new cljs.core.Keyword(null, "starting", "starting", 2330710962), to_start, new cljs.core.Keyword(null, "pile", "pile", 1017345188), cljs.core.mapv.call(null, new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), pile), new cljs.core.Keyword(null, "discards", "discards", 
    1286668039), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword("dom", "id", "dom/id", 1020278687)).cljs$core$IFn$_invoke$arity$1(discard)], null), new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874), cljs.core.mapv.call(null, new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), theirs), new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444), cljs.core.mapv.call(null, new cljs.core.Keyword("dom", "id", "dom/id", 
    1020278687), ours)], null)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(discard), new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(discard_card), new cljs.core.Keyword("card", 
    "rank", "card/rank", 1215352178), (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(discard_card)], null)], null), function() {
      var iter__17378__auto__ = function iter__19449(s__19450) {
        return new cljs.core.LazySeq(null, function() {
          var s__19450__$1 = s__19450;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__19450__$1);
            if (temp__4092__auto__) {
              var s__19450__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__19450__$2)) {
                var c__17376__auto__ = cljs.core.chunk_first.call(null, s__19450__$2);
                var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
                var b__19452 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
                if (function() {
                  var i__19451 = 0;
                  while (true) {
                    if (i__19451 < size__17377__auto__) {
                      var vec__19455 = cljs.core._nth.call(null, c__17376__auto__, i__19451);
                      var e = cljs.core.nth.call(null, vec__19455, 0, null);
                      var did = cljs.core.nth.call(null, vec__19455, 1, null);
                      var suit = cljs.core.nth.call(null, vec__19455, 2, null);
                      var rank = cljs.core.nth.call(null, vec__19455, 3, null);
                      cljs.core.chunk_append.call(null, b__19452, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), e, new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), suit, new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), rank], null));
                      var G__19460 = i__19451 + 1;
                      i__19451 = G__19460;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19452), iter__19449.call(null, cljs.core.chunk_rest.call(null, s__19450__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19452), null);
                }
              } else {
                var vec__19456 = cljs.core.first.call(null, s__19450__$2);
                var e = cljs.core.nth.call(null, vec__19456, 0, null);
                var did = cljs.core.nth.call(null, vec__19456, 1, null);
                var suit = cljs.core.nth.call(null, vec__19456, 2, null);
                var rank = cljs.core.nth.call(null, vec__19456, 3, null);
                return cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), e, new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), suit, new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), rank], null), iter__19449.call(null, cljs.core.rest.call(null, s__19450__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__17378__auto__.call(null, cljs.core.map.call(null, function(e, p__19457) {
        var map__19458 = p__19457;
        var map__19458__$1 = cljs.core.seq_QMARK_.call(null, map__19458) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19458) : map__19458;
        var rank = cljs.core.get.call(null, map__19458__$1, new cljs.core.Keyword(null, "rank", "rank", 1017397150));
        var suit = cljs.core.get.call(null, map__19458__$1, new cljs.core.Keyword(null, "suit", "suit", 1017446015));
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(e), (new cljs.core.Keyword("dom", "id", "dom/id", 1020278687)).cljs$core$IFn$_invoke$arity$1(e), suit, rank], null);
      }, ours, our_cards));
    }());
  }());
};
gin.transact.join_game = function join_game(db, game_id, discard_cards, our_cards, their_cards, to_start, turn, result) {
  return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "join-game", "join-game", 4768214567), game_id, discard_cards, our_cards, their_cards, to_start, turn, result], null)], null), function() {
    var map__19499 = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
    var map__19499__$1 = cljs.core.seq_QMARK_.call(null, map__19499) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19499) : map__19499;
    var game = map__19499__$1;
    var game_e = cljs.core.get.call(null, map__19499__$1, new cljs.core.Keyword("db", "id", "db/id", 1014111942));
    var cards = function() {
      var iter__17378__auto__ = function(map__19499, map__19499__$1, game, game_e) {
        return function iter__19503(s__19504) {
          return new cljs.core.LazySeq(null, function(map__19499, map__19499__$1, game, game_e) {
            return function() {
              var s__19504__$1 = s__19504;
              while (true) {
                var temp__4092__auto__ = cljs.core.seq.call(null, s__19504__$1);
                if (temp__4092__auto__) {
                  var s__19504__$2 = temp__4092__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__19504__$2)) {
                    var c__17376__auto__ = cljs.core.chunk_first.call(null, s__19504__$2);
                    var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
                    var b__19506 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
                    if (function() {
                      var i__19505 = 0;
                      while (true) {
                        if (i__19505 < size__17377__auto__) {
                          var cid = cljs.core._nth.call(null, c__17376__auto__, i__19505);
                          cljs.core.chunk_append.call(null, b__19506, gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), cid], null)));
                          var G__19537 = i__19505 + 1;
                          i__19505 = G__19537;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19506), iter__19503.call(null, cljs.core.chunk_rest.call(null, s__19504__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19506), null);
                    }
                  } else {
                    var cid = cljs.core.first.call(null, s__19504__$2);
                    return cljs.core.cons.call(null, gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), cid], null)), iter__19503.call(null, cljs.core.rest.call(null, s__19504__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(map__19499, map__19499__$1, game, game_e), null, null);
        };
      }(map__19499, map__19499__$1, game, game_e);
      return iter__17378__auto__.call(null, (new cljs.core.Keyword(null, "pile", "pile", 1017345188)).cljs$core$IFn$_invoke$arity$1(game));
    }();
    var vec__19500 = cljs.core.split_at.call(null, cljs.core.count.call(null, discard_cards), cards);
    var discards = cljs.core.nth.call(null, vec__19500, 0, null);
    var other = cljs.core.nth.call(null, vec__19500, 1, null);
    var vec__19501 = cljs.core.split_at.call(null, cljs.core.count.call(null, our_cards), other);
    var ours = cljs.core.nth.call(null, vec__19501, 0, null);
    var other__$1 = cljs.core.nth.call(null, vec__19501, 1, null);
    var vec__19502 = cljs.core.split_at.call(null, cljs.core.count.call(null, their_cards), other__$1);
    var theirs = cljs.core.nth.call(null, vec__19502, 0, null);
    var pile = cljs.core.nth.call(null, vec__19502, 1, null);
    return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), game_e, new cljs.core.Keyword(null, "starting", "starting", 2330710962), to_start, new cljs.core.Keyword(null, "pile", "pile", 1017345188), cljs.core.mapv.call(null, new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), pile), new cljs.core.Keyword(null, "discards", "discards", 
    1286668039), cljs.core.mapv.call(null, new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), discards), new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874), cljs.core.mapv.call(null, new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), theirs), new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444), cljs.core.mapv.call(null, new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), ours), new cljs.core.Keyword(null, "turn", "turn", 1017476079), turn, new cljs.core.Keyword(null, 
    "move", "move", 1017261891), new cljs.core.Keyword(null, "assigned", "assigned", 644022592)], null)], null), cljs.core.truth_(result) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), game_e, new cljs.core.Keyword(null, "result", "result", 4374444943), result], null)], null) : null, function() {
      var iter__17378__auto__ = function iter__19507(s__19508) {
        return new cljs.core.LazySeq(null, function() {
          var s__19508__$1 = s__19508;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__19508__$1);
            if (temp__4092__auto__) {
              var s__19508__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__19508__$2)) {
                var c__17376__auto__ = cljs.core.chunk_first.call(null, s__19508__$2);
                var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
                var b__19510 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
                if (function() {
                  var i__19509 = 0;
                  while (true) {
                    if (i__19509 < size__17377__auto__) {
                      var vec__19513 = cljs.core._nth.call(null, c__17376__auto__, i__19509);
                      var e = cljs.core.nth.call(null, vec__19513, 0, null);
                      var did = cljs.core.nth.call(null, vec__19513, 1, null);
                      var suit = cljs.core.nth.call(null, vec__19513, 2, null);
                      var rank = cljs.core.nth.call(null, vec__19513, 3, null);
                      cljs.core.chunk_append.call(null, b__19510, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), e, new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), suit, new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), rank], null));
                      var G__19538 = i__19509 + 1;
                      i__19509 = G__19538;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19510), iter__19507.call(null, cljs.core.chunk_rest.call(null, s__19508__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19510), null);
                }
              } else {
                var vec__19514 = cljs.core.first.call(null, s__19508__$2);
                var e = cljs.core.nth.call(null, vec__19514, 0, null);
                var did = cljs.core.nth.call(null, vec__19514, 1, null);
                var suit = cljs.core.nth.call(null, vec__19514, 2, null);
                var rank = cljs.core.nth.call(null, vec__19514, 3, null);
                return cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), e, new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), suit, new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), rank], null), iter__19507.call(null, cljs.core.rest.call(null, s__19508__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__17378__auto__.call(null, cljs.core.map.call(null, function(e, p__19515) {
        var map__19516 = p__19515;
        var map__19516__$1 = cljs.core.seq_QMARK_.call(null, map__19516) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19516) : map__19516;
        var rank = cljs.core.get.call(null, map__19516__$1, new cljs.core.Keyword(null, "rank", "rank", 1017397150));
        var suit = cljs.core.get.call(null, map__19516__$1, new cljs.core.Keyword(null, "suit", "suit", 1017446015));
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(e), (new cljs.core.Keyword("dom", "id", "dom/id", 1020278687)).cljs$core$IFn$_invoke$arity$1(e), suit, rank], null);
      }, theirs, their_cards));
    }(), function() {
      var iter__17378__auto__ = function iter__19517(s__19518) {
        return new cljs.core.LazySeq(null, function() {
          var s__19518__$1 = s__19518;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__19518__$1);
            if (temp__4092__auto__) {
              var s__19518__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__19518__$2)) {
                var c__17376__auto__ = cljs.core.chunk_first.call(null, s__19518__$2);
                var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
                var b__19520 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
                if (function() {
                  var i__19519 = 0;
                  while (true) {
                    if (i__19519 < size__17377__auto__) {
                      var vec__19523 = cljs.core._nth.call(null, c__17376__auto__, i__19519);
                      var e = cljs.core.nth.call(null, vec__19523, 0, null);
                      var did = cljs.core.nth.call(null, vec__19523, 1, null);
                      var suit = cljs.core.nth.call(null, vec__19523, 2, null);
                      var rank = cljs.core.nth.call(null, vec__19523, 3, null);
                      cljs.core.chunk_append.call(null, b__19520, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), e, new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), suit, new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), rank], null));
                      var G__19539 = i__19519 + 1;
                      i__19519 = G__19539;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19520), iter__19517.call(null, cljs.core.chunk_rest.call(null, s__19518__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19520), null);
                }
              } else {
                var vec__19524 = cljs.core.first.call(null, s__19518__$2);
                var e = cljs.core.nth.call(null, vec__19524, 0, null);
                var did = cljs.core.nth.call(null, vec__19524, 1, null);
                var suit = cljs.core.nth.call(null, vec__19524, 2, null);
                var rank = cljs.core.nth.call(null, vec__19524, 3, null);
                return cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), e, new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), suit, new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), rank], null), iter__19517.call(null, cljs.core.rest.call(null, s__19518__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__17378__auto__.call(null, cljs.core.map.call(null, function(e, p__19525) {
        var map__19526 = p__19525;
        var map__19526__$1 = cljs.core.seq_QMARK_.call(null, map__19526) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19526) : map__19526;
        var rank = cljs.core.get.call(null, map__19526__$1, new cljs.core.Keyword(null, "rank", "rank", 1017397150));
        var suit = cljs.core.get.call(null, map__19526__$1, new cljs.core.Keyword(null, "suit", "suit", 1017446015));
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(e), (new cljs.core.Keyword("dom", "id", "dom/id", 1020278687)).cljs$core$IFn$_invoke$arity$1(e), suit, rank], null);
      }, discards, discard_cards));
    }(), function() {
      var iter__17378__auto__ = function iter__19527(s__19528) {
        return new cljs.core.LazySeq(null, function() {
          var s__19528__$1 = s__19528;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__19528__$1);
            if (temp__4092__auto__) {
              var s__19528__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__19528__$2)) {
                var c__17376__auto__ = cljs.core.chunk_first.call(null, s__19528__$2);
                var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
                var b__19530 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
                if (function() {
                  var i__19529 = 0;
                  while (true) {
                    if (i__19529 < size__17377__auto__) {
                      var vec__19533 = cljs.core._nth.call(null, c__17376__auto__, i__19529);
                      var e = cljs.core.nth.call(null, vec__19533, 0, null);
                      var did = cljs.core.nth.call(null, vec__19533, 1, null);
                      var suit = cljs.core.nth.call(null, vec__19533, 2, null);
                      var rank = cljs.core.nth.call(null, vec__19533, 3, null);
                      cljs.core.chunk_append.call(null, b__19530, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), e, new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), suit, new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), rank], null));
                      var G__19540 = i__19529 + 1;
                      i__19529 = G__19540;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19530), iter__19527.call(null, cljs.core.chunk_rest.call(null, s__19528__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19530), null);
                }
              } else {
                var vec__19534 = cljs.core.first.call(null, s__19528__$2);
                var e = cljs.core.nth.call(null, vec__19534, 0, null);
                var did = cljs.core.nth.call(null, vec__19534, 1, null);
                var suit = cljs.core.nth.call(null, vec__19534, 2, null);
                var rank = cljs.core.nth.call(null, vec__19534, 3, null);
                return cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), e, new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), suit, new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), rank], null), iter__19527.call(null, cljs.core.rest.call(null, s__19528__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__17378__auto__.call(null, cljs.core.map.call(null, function(e, p__19535) {
        var map__19536 = p__19535;
        var map__19536__$1 = cljs.core.seq_QMARK_.call(null, map__19536) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19536) : map__19536;
        var rank = cljs.core.get.call(null, map__19536__$1, new cljs.core.Keyword(null, "rank", "rank", 1017397150));
        var suit = cljs.core.get.call(null, map__19536__$1, new cljs.core.Keyword(null, "suit", "suit", 1017446015));
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(e), (new cljs.core.Keyword("dom", "id", "dom/id", 1020278687)).cljs$core$IFn$_invoke$arity$1(e), suit, rank], null);
      }, ours, our_cards));
    }());
  }());
};
gin.transact.player_ready = function player_ready(db, game_id, player) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "player-ready", "player-ready", 3966504745), game_id, player], null), function() {
    var game = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
    return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "ready", "ready", 1122290965), player], null);
  }()], null);
};
gin.transact.turn_assigned = function turn_assigned(db, game_id, turn) {
  var game_eid = cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, 
  null), new cljs.core.Symbol(null, "?game-id", "?game-id", 586682736, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "game-id", "game-id", 818249800), new cljs.core.Symbol(null, "?game-id", "?game-id", 586682736, null)], 
  null)], null)], null), db, game_id));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "turn-assigned", "turn-assigned", 4620042384), game_id, turn], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), game_eid, new cljs.core.Keyword(null, "turn", 
  "turn", 1017476079), turn, new cljs.core.Keyword(null, "move", "move", 1017261891), new cljs.core.Keyword(null, "assigned", "assigned", 644022592)], null)], null);
};
gin.transact.our_pile_picked = function our_pile_picked(db, card_id) {
  var game_id = cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?game-id", "?game-id", 586682736, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", 
  -1640531491, null), new cljs.core.Symbol(null, "?card-id", "?card-id", 1336223122, null), new cljs.core.Symbol(null, "?last", "?last", -1579035378, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "pile", "pile", 1017345188), 
  new cljs.core.Symbol(null, "?ps", "?ps", -1640467397, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "game-id", "game-id", 818249800), new cljs.core.Symbol(null, "?game-id", "?game-id", 586682736, null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null, "?last", "?last", -1579035378, 
  null), new cljs.core.Symbol(null, "?ps", "?ps", -1640467397, null)), new cljs.core.Symbol(null, "?p", "?p", -1640529462, null)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null), new cljs.core.Symbol(null, "?p", "?p", -1640529462, null), new cljs.core.Symbol(null, "?card-id", "?card-id", 1336223122, null))], null)], null)], null), db, card_id, cljs.core.last));
  var game = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "our-pile-picked", "our-pile-picked", 3992106988), game_id, card_id], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", 
  "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "pile", "pile", 1017345188), cljs.core.pop.call(null, (new cljs.core.Keyword(null, "pile", "pile", 1017345188)).cljs$core$IFn$_invoke$arity$1(game)), new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444), cljs.core.conj.call(null, (new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)).cljs$core$IFn$_invoke$arity$1(game), card_id)], null)], null);
};
gin.transact.our_pile_pick_revealed = function our_pile_pick_revealed(db, game_id, suit, rank) {
  var game = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
  var card_taken = cljs.core.some.call(null, function(game) {
    return function(did) {
      var card_e = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), did], null));
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword("card", "suit", "card/suit", 1215370835)).cljs$core$IFn$_invoke$arity$1(card_e), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092)) && cljs.core._EQ_.call(null, (new cljs.core.Keyword("card", "rank", "card/rank", 1215352178)).cljs$core$IFn$_invoke$arity$1(card_e), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092))) {
        return card_e;
      } else {
        return null;
      }
    };
  }(game), (new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)).cljs$core$IFn$_invoke$arity$1(game));
  var card_id = (new cljs.core.Keyword("dom", "id", "dom/id", 1020278687)).cljs$core$IFn$_invoke$arity$1(card_taken);
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "our-pile-pick-revealed", "our-pile-pick-revealed", 914126736), game_id, card_id, suit, rank], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", 
  "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(card_taken), new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), suit, new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), rank], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.maybe_pile_reshuffle, game_id], null)], null);
};
gin.transact.our_discard_picked = function our_discard_picked(db, card_id) {
  var game = datascript.entity.call(null, db, cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, 
  "$", "$", -1640531491, null), new cljs.core.Symbol(null, "?card-id", "?card-id", 1336223122, null), new cljs.core.Symbol(null, "?last", "?last", -1579035378, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "discards", "discards", 
  1286668039), new cljs.core.Symbol(null, "?ds", "?ds", -1640467769, null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null, "?last", "?last", -1579035378, null), new cljs.core.Symbol(null, "?ds", "?ds", -1640467769, null)), new cljs.core.Symbol(null, "?d", "?d", -1640529474, null)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null, 
  "\x3d", "\x3d", -1640531466, null), new cljs.core.Symbol(null, "?d", "?d", -1640529474, null), new cljs.core.Symbol(null, "?card-id", "?card-id", 1336223122, null))], null)], null)], null), db, card_id, cljs.core.last)));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "our-discard-picked", "our-discard-picked", 3880258722), (new cljs.core.Keyword(null, "game-id", "game-id", 818249800)).cljs$core$IFn$_invoke$arity$1(game), card_id], null), new cljs.core.PersistentArrayMap(null, 
  3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "discards", "discards", 1286668039), cljs.core.pop.call(null, (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(game)), new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444), cljs.core.conj.call(null, (new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)).cljs$core$IFn$_invoke$arity$1(game), 
  card_id)], null)], null);
};
gin.transact.our_discard_chosen = function our_discard_chosen(db, card_id) {
  var card = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), card_id], null));
  var game = datascript.entity.call(null, db, cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, 
  "$", "$", -1640531491, null), new cljs.core.Symbol(null, "?card-id", "?card-id", 1336223122, null), new cljs.core.Symbol(null, "?each", "?each", -1579244423, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "our-cards", "our-cards", 
  3774215444), new cljs.core.Symbol(null, "?ds", "?ds", -1640467769, null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null, "?each", "?each", -1579244423, null), new cljs.core.Symbol(null, "?ds", "?ds", -1640467769, null)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?d", "?d", -1640529474, null), new cljs.core.Symbol(null, "...", "...", -1640485849, 
  null)], null)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null), new cljs.core.Symbol(null, "?d", "?d", -1640529474, null), new cljs.core.Symbol(null, "?card-id", "?card-id", 1336223122, null))], null)], null)], null), db, card_id, cljs.core.partial.call(null, cljs.core.map, cljs.core.identity))));
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "our-discard-chosen", "our-discard-chosen", 3507521428), (new cljs.core.Keyword(null, "game-id", "game-id", 818249800)).cljs$core$IFn$_invoke$arity$1(game), card_id, (new cljs.core.Keyword("card", "suit", "card/suit", 
  1215370835)).cljs$core$IFn$_invoke$arity$1(card), (new cljs.core.Keyword("card", "rank", "card/rank", 1215352178)).cljs$core$IFn$_invoke$arity$1(card)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "discards", "discards", 1286668039), cljs.core.conj.call(null, (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(game), 
  card_id), new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444), cljs.core.filterv.call(null, function(c) {
    return cljs.core.not_EQ_.call(null, c, card_id);
  }, (new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)).cljs$core$IFn$_invoke$arity$1(game))], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "move", "move", 1017261891), new cljs.core.Keyword(null, "done", "done", 1016993524)], null)], null);
};
gin.transact.their_pile_picked = function their_pile_picked(db, game_id) {
  var game = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
  var card_id = cljs.core.peek.call(null, (new cljs.core.Keyword(null, "pile", "pile", 1017345188)).cljs$core$IFn$_invoke$arity$1(game));
  var card = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), card_id], null));
  var insert_idx = cljs.core.rand_nth.call(null, cljs.core.range.call(null, 10));
  var vec__19542 = cljs.core.split_at.call(null, insert_idx, (new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874)).cljs$core$IFn$_invoke$arity$1(game));
  var before = cljs.core.nth.call(null, vec__19542, 0, null);
  var after = cljs.core.nth.call(null, vec__19542, 1, null);
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "their-pile-picked", "their-pile-picked", 4382382330), game_id, card_id], null), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", 
  "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874), cljs.core.into.call(null, cljs.core.conj.call(null, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, before), card_id), after), new cljs.core.Keyword(null, "pile", "pile", 1017345188), cljs.core.pop.call(null, (new cljs.core.Keyword(null, "pile", "pile", 1017345188)).cljs$core$IFn$_invoke$arity$1(game)), new cljs.core.Keyword(null, "their-taken", "their-taken", 
  3995201030), card_id], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(card), new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092), new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092)], null)], null);
};
gin.transact.their_pile_pick_revealed = function their_pile_pick_revealed(db, game_id) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "their-pile-pick-revealed", "their-pile-pick-revealed", 3002247874), game_id], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", 
  "db.fn/call", 2901959894), gin.transact.maybe_pile_reshuffle, game_id], null)], null);
};
gin.transact.their_discard_picked = function their_discard_picked(db, game_id) {
  var game = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
  var card_id = cljs.core.peek.call(null, (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(game));
  var card = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), card_id], null));
  var insert_idx = cljs.core.rand_nth.call(null, cljs.core.range.call(null, 10));
  var vec__19544 = cljs.core.split_at.call(null, insert_idx, (new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874)).cljs$core$IFn$_invoke$arity$1(game));
  var before = cljs.core.nth.call(null, vec__19544, 0, null);
  var after = cljs.core.nth.call(null, vec__19544, 1, null);
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "their-discard-picked", "their-discard-picked", 4096501972), game_id, card_id], null), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", 
  "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "discards", "discards", 1286668039), cljs.core.pop.call(null, (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(game)), new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874), cljs.core.into.call(null, cljs.core.conj.call(null, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, before), card_id), after), new cljs.core.Keyword(null, "their-taken", 
  "their-taken", 3995201030), card_id], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(card), new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092), new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092)], null)], null);
};
gin.transact.their_discard_chosen = function their_discard_chosen(db, game_id, suit, rank) {
  var game = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
  var card_id = cljs.core.rand_nth.call(null, cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([(new cljs.core.Keyword(null, "their-taken", "their-taken", 3995201030)).cljs$core$IFn$_invoke$arity$1(game)], true), (new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874)).cljs$core$IFn$_invoke$arity$1(game)));
  var card = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), card_id], null));
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "their-discard-chosen", "their-discard-chosen", 3723764678), game_id, card_id, suit, rank], null), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", 
  "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "discards", "discards", 1286668039), cljs.core.conj.call(null, (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(game), card_id), new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874), cljs.core.filterv.call(null, cljs.core.complement.call(null, cljs.core.PersistentHashSet.fromArray([card_id], true)), (new cljs.core.Keyword(null, "their-cards", 
  "their-cards", 3979507874)).cljs$core$IFn$_invoke$arity$1(game)), new cljs.core.Keyword(null, "move", "move", 1017261891), new cljs.core.Keyword(null, "done", "done", 1016993524)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(card), new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), suit, new cljs.core.Keyword("card", "rank", "card/rank", 
  1215352178), rank], null)], null);
};
gin.transact.game_finished = function game_finished(db, game_id, result, opp_cards) {
  var game = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
  var their_cards = cljs.core.map.call(null, function(game) {
    return function(p1__19545_SHARP_) {
      return gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), p1__19545_SHARP_], null));
    };
  }(game), (new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874)).cljs$core$IFn$_invoke$arity$1(game));
  return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "game-finished", "game-finished", 3417324383), game_id, result], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", 
  "add", "db/add", 1014207040), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "result", "result", 4374444943), result], null)], null), function() {
    var iter__17378__auto__ = function iter__19554(s__19555) {
      return new cljs.core.LazySeq(null, function() {
        var s__19555__$1 = s__19555;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__19555__$1);
          if (temp__4092__auto__) {
            var s__19555__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__19555__$2)) {
              var c__17376__auto__ = cljs.core.chunk_first.call(null, s__19555__$2);
              var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
              var b__19557 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
              if (function() {
                var i__19556 = 0;
                while (true) {
                  if (i__19556 < size__17377__auto__) {
                    var vec__19560 = cljs.core._nth.call(null, c__17376__auto__, i__19556);
                    var e = cljs.core.nth.call(null, vec__19560, 0, null);
                    var card = cljs.core.nth.call(null, vec__19560, 1, null);
                    cljs.core.chunk_append.call(null, b__19557, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(e), new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(card), new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), (new cljs.core.Keyword(null, 
                    "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(card)], null));
                    var G__19562 = i__19556 + 1;
                    i__19556 = G__19562;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19557), iter__19554.call(null, cljs.core.chunk_rest.call(null, s__19555__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19557), null);
              }
            } else {
              var vec__19561 = cljs.core.first.call(null, s__19555__$2);
              var e = cljs.core.nth.call(null, vec__19561, 0, null);
              var card = cljs.core.nth.call(null, vec__19561, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(e), new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(card), new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), (new cljs.core.Keyword(null, "rank", "rank", 
              1017397150)).cljs$core$IFn$_invoke$arity$1(card)], null), iter__19554.call(null, cljs.core.rest.call(null, s__19555__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__17378__auto__.call(null, cljs.core.map.call(null, cljs.core.list, their_cards, opp_cards));
  }());
};
gin.transact.error = function error(db, msg) {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.log_event, new cljs.core.Keyword(null, "error", "error", 1110689146), msg], null)], null);
};
gin.transact.schema = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ready", "ready", 1122290965), new cljs.core.Keyword("cardinality", "many", "cardinality/many", 4556483886)], null);
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    this.creationStack = (new Error).stack;
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.debug.errorHandlerWeakDep");
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn, opt_tracers) {
  return fn;
}};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.ASSUME_ANY_VERSION = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = ua.indexOf("Opera") == 0;
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && ua.indexOf("MSIE") != -1;
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && ua.indexOf("WebKit") != -1;
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && ua.indexOf("Mobile") != -1;
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && navigator.product == "Gecko");
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.ASSUME_ANDROID = false;
goog.userAgent.ASSUME_IPHONE = false;
goog.userAgent.ASSUME_IPAD = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && ua.indexOf("Android") >= 0;
  goog.userAgent.detectedIPhone_ = !!ua && ua.indexOf("iPhone") >= 0;
  goog.userAgent.detectedIPad_ = !!ua && ua.indexOf("iPad") >= 0;
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /MSIE\s+([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersion("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersion("1.9b") || (goog.userAgent.IE && goog.userAgent.isVersion("8") || (goog.userAgent.OPERA && 
goog.userAgent.isVersion("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("528"))), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersion("8") || goog.userAgent.IE && !goog.userAgent.isVersion("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || (!!(goog.global["document"] && (document.documentElement && "ontouchstart" in document.documentElement)) || !!(goog.global["navigator"] && goog.global["navigator"]["msMaxTouchPoints"]))};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type;
  this.target = opt_target;
  this.currentTarget = this.target;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.propagationStopped_ = false;
goog.events.Event.prototype.defaultPrevented = false;
goog.events.Event.prototype.returnValue_ = true;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", 
POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", 
MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROVER:"MSPointerOver", MSPOINTEROUT:"MSPointerOut", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.currentTarget;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = false;
goog.events.BrowserEvent.prototype.altKey = false;
goog.events.BrowserEvent.prototype.shiftKey = false;
goog.events.BrowserEvent.prototype.metaKey = false;
goog.events.BrowserEvent.prototype.state;
goog.events.BrowserEvent.prototype.platformModifierKey = false;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
  delete this.propagationStopped_;
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && (goog.userAgent.MAC && this.ctrlKey));
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.EventWrapper");
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.events.EventWrapper.prototype.unlisten = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventLike");
goog.events.Listenable = function() {
};
goog.events.Listenable.USE_LISTENABLE_INTERFACE = false;
goog.events.Listenable.IMPLEMENTED_BY_PROP_ = "__closure_listenable";
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP_] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP_]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function() {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
};
goog.events.Listener.ENABLE_MONITORING = false;
goog.events.Listener.prototype.isFunctionListener_;
goog.events.Listener.prototype.listener;
goog.events.Listener.prototype.proxy;
goog.events.Listener.prototype.src;
goog.events.Listener.prototype.type;
goog.events.Listener.prototype.capture;
goog.events.Listener.prototype.handler;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = false;
goog.events.Listener.prototype.callOnce = false;
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.isFunction(listener)) {
    this.isFunctionListener_ = true;
  } else {
    if (listener && (listener.handleEvent && goog.isFunction(listener.handleEvent))) {
      this.isFunctionListener_ = false;
    } else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = false;
  this.key = goog.events.ListenableKey.reserveKey();
  this.removed = false;
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  if (this.isFunctionListener_) {
    return this.listener.call(this.handler || this.src, eventObject);
  }
  return this.listener.handleEvent.call(this.listener, eventObject);
};
goog.provide("goog.events");
goog.provide("goog.events.Key");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventWrapper");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.require("goog.userAgent");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listen((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, false, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    map[type] = {count_:0, remaining_:0};
  }
  map = map[type];
  if (!(capture in map)) {
    map[capture] = {count_:0, remaining_:0};
    map.count_++;
  }
  map = map[capture];
  var srcUid = goog.getUid(src);
  var listenerArray, listenerObj;
  map.remaining_++;
  if (!map[srcUid]) {
    listenerArray = map[srcUid] = [];
    map.count_++;
  } else {
    listenerArray = map[srcUid];
    for (var i = 0;i < listenerArray.length;i++) {
      listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && listenerObj.handler == opt_handler) {
        if (listenerObj.removed) {
          break;
        }
        if (!callOnce) {
          listenerArray[i].callOnce = false;
        }
        return listenerArray[i];
      }
    }
  }
  var proxy = goog.events.getProxy();
  listenerObj = new goog.events.Listener;
  listenerObj.init(listener, proxy, src, type, capture, opt_handler);
  listenerObj.callOnce = callOnce;
  proxy.src = src;
  proxy.listener = listenerObj;
  listenerArray.push(listenerObj);
  if (!goog.events.sources_[srcUid]) {
    goog.events.sources_[srcUid] = [];
  }
  goog.events.sources_[srcUid].push(listenerObj);
  if (src.addEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.addEventListener(type, proxy, capture);
    }
  } else {
    src.attachEvent(goog.events.getOnString_(type), proxy);
  }
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listenOnce((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, true, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  }
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (!listenerArray) {
    return false;
  }
  for (var i = 0;i < listenerArray.length;i++) {
    if (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler)) {
      return goog.events.unlistenByKey(listenerArray[i].key);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  var listener = goog.events.listeners_[key];
  if (!listener) {
    return false;
  }
  if (listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  var capture = listener.capture;
  if (src.removeEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.removeEventListener(type, proxy, capture);
    }
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  var srcUid = goog.getUid(src);
  if (goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    if (sourcesArray.length == 0) {
      delete goog.events.sources_[srcUid];
    }
  }
  listener.removed = true;
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  if (listenerArray) {
    listenerArray.needsCleanup_ = true;
    goog.events.cleanUp_(type, capture, srcUid, listenerArray);
  }
  delete goog.events.listeners_[key];
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.cleanUp = function(listenableKey) {
  delete goog.events.listeners_[listenableKey.key];
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if (!listenerArray.locked_) {
    if (listenerArray.needsCleanup_) {
      for (var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
        if (listenerArray[oldIndex].removed) {
          var proxy = listenerArray[oldIndex].proxy;
          proxy.src = null;
          continue;
        }
        if (oldIndex != newIndex) {
          listenerArray[newIndex] = listenerArray[oldIndex];
        }
        newIndex++;
      }
      listenerArray.length = newIndex;
      listenerArray.needsCleanup_ = false;
      if (newIndex == 0) {
        delete goog.events.listenerTree_[type][capture][srcUid];
        goog.events.listenerTree_[type][capture].count_--;
        if (goog.events.listenerTree_[type][capture].count_ == 0) {
          delete goog.events.listenerTree_[type][capture];
          goog.events.listenerTree_[type].count_--;
        }
        if (goog.events.listenerTree_[type].count_ == 0) {
          delete goog.events.listenerTree_[type];
        }
      }
    }
  }
};
goog.events.removeAll = function(opt_obj, opt_type) {
  var count = 0;
  var noObj = opt_obj == null;
  var noType = opt_type == null;
  if (!noObj) {
    if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && (opt_obj && goog.events.Listenable.isImplementedBy(opt_obj))) {
      return opt_obj.removeAllListeners(opt_type);
    }
    var srcUid = goog.getUid((opt_obj));
    if (goog.events.sources_[srcUid]) {
      var sourcesArray = goog.events.sources_[srcUid];
      for (var i = sourcesArray.length - 1;i >= 0;i--) {
        var listener = sourcesArray[i];
        if (noType || opt_type == listener.type) {
          goog.events.unlistenByKey(listener.key);
          count++;
        }
      }
    }
  } else {
    goog.object.forEach(goog.events.listeners_, function(listener, key) {
      goog.events.unlistenByKey(key);
      count++;
    });
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    return goog.events.getListeners_(obj, type, capture) || [];
  }
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      map = map[capture];
      var objUid = goog.getUid(obj);
      if (map[objUid]) {
        return map[objUid];
      }
    }
  }
  return null;
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener((type), goog.events.wrapListener_(listener), capture, opt_handler);
  }
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;i++) {
      if (!listenerArray[i].removed && (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler))) {
        return listenerArray[i];
      }
    }
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var objUid = goog.getUid(obj);
  var listeners = goog.events.sources_[objUid];
  if (listeners) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    if (hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && (!!map[opt_capture] && objUid in map[opt_capture]);
    } else {
      if (!(hasType || hasCapture)) {
        return true;
      } else {
        return goog.array.some(listeners, function(listener) {
          return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture;
        });
      }
    }
  }
  return false;
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      return goog.events.fireListeners_(map[capture], obj, type, capture, eventObject);
    }
  }
  return true;
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1;
  var objUid = goog.getUid(obj);
  if (map[objUid]) {
    var remaining = --map.remaining_;
    var listenerArray = map[objUid];
    if (!listenerArray.locked_) {
      listenerArray.locked_ = 1;
    } else {
      listenerArray.locked_++;
    }
    try {
      var length = listenerArray.length;
      for (var i = 0;i < length;i++) {
        var listener = listenerArray[i];
        if (listener && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    } finally {
      map.remaining_ = Math.max(remaining, map.remaining_);
      listenerArray.locked_--;
      goog.events.cleanUp_(type, capture, objUid, listenerArray);
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener.key);
  }
  return listener.handleEvent(eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_);
};
goog.events.dispatchEvent = function(src, e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    return src.dispatchEvent(e);
  }
  var type = e.type || e;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  if (goog.isString(e)) {
    e = new goog.events.Event(e, src);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event((type), src);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || src;
    }
  }
  var rv = 1, ancestors;
  map = map[type];
  var hasCapture = true in map;
  var targetsMap;
  if (hasCapture) {
    ancestors = [];
    for (var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent);
    }
    targetsMap = map[true];
    targetsMap.remaining_ = targetsMap.count_;
    for (var i = ancestors.length - 1;!e.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
      e.currentTarget = ancestors[i];
      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, true, e) && e.returnValue_ != false;
    }
  }
  var hasBubble = false in map;
  if (hasBubble) {
    targetsMap = map[false];
    targetsMap.remaining_ = targetsMap.count_;
    if (hasCapture) {
      for (var i = 0;!e.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
        e.currentTarget = ancestors[i];
        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, false, e) && e.returnValue_ != false;
      }
    } else {
      for (var current = src;!e.propagationStopped_ && (current && targetsMap.remaining_);current = current.getParentEventTarget()) {
        e.currentTarget = current;
        rv &= goog.events.fireListeners_(targetsMap, current, e.type, false, e) && e.returnValue_ != false;
      }
    }
  }
  return Boolean(rv);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  var type = listener.type;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  map = map[type];
  var retval, targetsMap;
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var hasCapture = true in map;
    var hasBubble = false in map;
    if (hasCapture) {
      if (goog.events.isMarkedIeEvent_(ieEvent)) {
        return true;
      }
      goog.events.markIeEvent_(ieEvent);
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, (this));
    retval = true;
    try {
      if (hasCapture) {
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        targetsMap = map[true];
        targetsMap.remaining_ = targetsMap.count_;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, true, evt);
        }
        if (hasBubble) {
          targetsMap = map[false];
          targetsMap.remaining_ = targetsMap.count_;
          for (var i = 0;!evt.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
            evt.currentTarget = ancestors[i];
            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, false, evt);
          }
        }
      } else {
        retval = goog.events.fireListener(listener, evt);
      }
    } finally {
      if (ancestors) {
        ancestors.length = 0;
      }
    }
    return retval;
  }
  var be = new goog.events.BrowserEvent(opt_evt, (this));
  retval = goog.events.fireListener(listener, be);
  return retval;
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener_ = function(listener) {
  if (goog.isFunction(listener)) {
    return listener;
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e);
  });
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.eventTargetListeners_ = {};
    this.reallyDisposed_ = false;
    this.actualEventTarget_ = this;
  }
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.Listenable.addImplementation(goog.events.EventTarget);
}
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.customEvent_ = true;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    if (this.reallyDisposed_) {
      return true;
    }
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if (ancestor) {
      ancestorsTree = [];
      var ancestorCount = 1;
      for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
        ancestorsTree.push(ancestor);
        goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
      }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
  } else {
    return goog.events.dispatchEvent(this, e);
  }
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.removeAllListeners();
    this.reallyDisposed_ = true;
  } else {
    goog.events.removeAll(this);
  }
  this.parentEventTarget_ = null;
};
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, false, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, true, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenInternal_ = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not listen on disposed object.");
    var listenerArray = this.eventTargetListeners_[type] || (this.eventTargetListeners_[type] = []);
    var listenerObj;
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      listenerObj = listenerArray[index];
      if (!callOnce) {
        listenerObj.callOnce = false;
      }
      return listenerObj;
    }
    listenerObj = new goog.events.Listener;
    listenerObj.init(listener, null, this, type, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
    return listenerObj;
  };
  goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var listenerArray = this.eventTargetListeners_[type];
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      var listenerObj = listenerArray[index];
      goog.events.cleanUp(listenerObj);
      listenerObj.removed = true;
      return goog.array.removeAt(listenerArray, index);
    }
    return false;
  };
  goog.events.EventTarget.prototype.unlistenByKey = function(key) {
    var type = key.type;
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var removed = goog.array.remove(this.eventTargetListeners_[type], key);
    if (removed) {
      goog.events.cleanUp(key);
      key.removed = true;
    }
    return removed;
  };
  goog.events.EventTarget.prototype.removeAllListeners = function(opt_type, opt_capture) {
    var count = 0;
    for (var type in this.eventTargetListeners_) {
      if (!opt_type || type == opt_type) {
        var listenerArray = this.eventTargetListeners_[type];
        for (var i = 0;i < listenerArray.length;i++) {
          ++count;
          goog.events.cleanUp(listenerArray[i]);
          listenerArray[i].removed = true;
        }
        listenerArray.length = 0;
      }
    }
    return count;
  };
  goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not fire listeners after dispose() completed.");
    if (!(type in this.eventTargetListeners_)) {
      return true;
    }
    var rv = true;
    var listenerArray = goog.array.clone(this.eventTargetListeners_[type]);
    for (var i = 0;i < listenerArray.length;++i) {
      var listener = listenerArray[i];
      if (listener && (!listener.removed && listener.capture == capture)) {
        if (listener.callOnce) {
          this.unlistenByKey(listener);
        }
        rv = listener.handleEvent(eventObject) !== false && rv;
      }
    }
    return rv && eventObject.returnValue_ != false;
  };
  goog.events.EventTarget.prototype.getListeners = function(type, capture) {
    var listenerArray = this.eventTargetListeners_[type];
    var rv = [];
    if (listenerArray) {
      for (var i = 0;i < listenerArray.length;++i) {
        var listenerObj = listenerArray[i];
        if (listenerObj.capture == capture) {
          rv.push(listenerObj);
        }
      }
    }
    return rv;
  };
  goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    var listenerArray = this.eventTargetListeners_[type];
    var i = -1;
    if (listenerArray) {
      i = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
    }
    return i > -1 ? listenerArray[i] : null;
  };
  goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.eventTargetListeners_, function(listenersArray, type) {
      for (var i = 0;i < listenersArray.length;++i) {
        if ((!hasType || listenersArray[i].type == opt_type) && (!hasCapture || listenersArray[i].capture == opt_capture)) {
          return true;
        }
      }
      return false;
    });
  };
  goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
    this.actualEventTarget_ = target;
  };
  goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
    var type = e.type || (e);
    if (goog.isString(e)) {
      e = new goog.events.Event(e, target);
    } else {
      if (!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type, target);
        goog.object.extend(e, oldEvent);
      } else {
        e.target = e.target || target;
      }
    }
    var rv = true, currentTarget;
    if (opt_ancestorsTree) {
      for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, true, e) && rv;
      }
    }
    if (!e.propagationStopped_) {
      currentTarget = e.currentTarget = target;
      rv = currentTarget.fireListeners(type, true, e) && rv;
      if (!e.propagationStopped_) {
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    if (opt_ancestorsTree) {
      for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    return rv;
  };
  goog.events.EventTarget.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && (listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope)) {
        return i;
      }
    }
    return-1;
  };
}
;goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      return f.call(opt_obj, val, undefined, iterator);
    }
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var args = arguments;
  var length = args.length;
  var i = 0;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if (i >= length) {
        throw goog.iter.StopIteration;
      }
      var current = goog.iter.toIterator(args[i]);
      return current.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      } else {
        i++;
        return this.next();
      }
    }
  };
  return newIter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    while (true) {
      b1 = b2 = false;
      var val1 = iterable1.next();
      b1 = true;
      var val2 = iterable2.next();
      b2 = true;
      if (val1 != val2) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    } else {
      if (b1 && !b2) {
        return false;
      }
      if (!b2) {
        try {
          val2 = iterable2.next();
          return false;
        } catch (ex1) {
          if (ex1 !== goog.iter.StopIteration) {
            throw ex1;
          }
          return true;
        }
      }
    }
  }
  return false;
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.require("goog.structs");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersion("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line);
    }
    logFunc({message:message, fileName:url, line:line});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var previous = new goog.structs.Set;
  var str = [];
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (previous.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  previous.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "");
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || (err.line || "Not available");
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || (err.filename || (err.sourceURL || (goog.global["$googDebugFname"] || href)));
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || (!err.lineNumber || (!err.fileName || !err.stack))) {
    return{"message":err.message, "name":err.name, "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Logger = function(name) {
  this.name_ = name;
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = true;
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    if (!this.handlers_) {
      this.handlers_ = [];
    }
    this.handlers_.push(handler);
  } else {
    goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootHandlers_.push(handler);
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler);
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    this.level_ = level;
  } else {
    goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootLevel_ = level;
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (this.isLoggable(level)) {
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.json");
goog.provide("goog.json.Serializer");
goog.json.isValid_ = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = function(s) {
  var o = String(s);
  if (goog.json.isValid_(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XmlHttpFactory");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.net.XmlHttp.ASSUME_NATIVE_XHR = false;
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory((factory), (optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && (typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined")) {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && (pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, value) {
  return goog.uri.utils.appendQueryData_([uri, "\x26", key, "\x3d", goog.string.urlEncode(value)]);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || (followingChar == goog.uri.utils.CharCode_.EQUAL || (followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH))) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.Logger");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.events.EventTarget.call(this);
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    goog.events.listen(x, goog.net.EventType.COMPLETE, opt_callback);
  }
  goog.events.listen(x, goog.net.EventType.READY, goog.partial(goog.net.XhrIo.cleanupSend_, x));
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.cleanupSend_ = function(XhrIo) {
  XhrIo.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, XhrIo);
};
goog.net.XhrIo.prototype.active_ = false;
goog.net.XhrIo.prototype.xhr_ = null;
goog.net.XhrIo.prototype.xhrOptions_ = null;
goog.net.XhrIo.prototype.lastUri_ = "";
goog.net.XhrIo.prototype.lastMethod_ = "";
goog.net.XhrIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
goog.net.XhrIo.prototype.lastError_ = "";
goog.net.XhrIo.prototype.errorDispatched_ = false;
goog.net.XhrIo.prototype.inSend_ = false;
goog.net.XhrIo.prototype.inOpen_ = false;
goog.net.XhrIo.prototype.inAbort_ = false;
goog.net.XhrIo.prototype.timeoutInterval_ = 0;
goog.net.XhrIo.prototype.timeoutId_ = null;
goog.net.XhrIo.prototype.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
goog.net.XhrIo.prototype.withCredentials_ = false;
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    this.logger_.fine(this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, url, true);
    this.inOpen_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (method == "POST" && (!headers.containsKey(goog.net.XhrIo.CONTENT_TYPE_HEADER) && !contentIsFormData)) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  goog.structs.forEach(headers, function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (this.timeoutInterval_ > 0) {
      this.logger_.fine(this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete"));
      this.timeoutId_ = goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.timeout_, this), this.timeoutInterval_);
    }
    this.logger_.fine(this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      this.logger_.fine(this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    this.logger_.fine(this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.superClass_.disposeInternal.call(this);
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (!this.inOpen_ && (!this.inSend_ && !this.inAbort_)) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && (this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2)) {
      this.logger_.fine(this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.onReadyStateChange_, this), 0);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        this.logger_.fine(this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      this.logger_.severe("Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    this.logger_.warning("Can not get status: " + e.message);
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    this.logger_.fine("Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    this.logger_.fine("Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    this.logger_.fine("Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    this.logger_.fine("Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    this.logger_.severe("Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    this.logger_.fine("Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.fx.Transition");
goog.provide("goog.fx.Transition.EventType");
goog.fx.Transition = function() {
};
goog.fx.Transition.EventType = {PLAY:"play", BEGIN:"begin", RESUME:"resume", END:"end", STOP:"stop", FINISH:"finish", PAUSE:"pause"};
goog.fx.Transition.prototype.play;
goog.fx.Transition.prototype.stop;
goog.provide("goog.fx.TransitionBase");
goog.provide("goog.fx.TransitionBase.State");
goog.require("goog.events.EventTarget");
goog.require("goog.fx.Transition");
goog.require("goog.fx.Transition.EventType");
goog.fx.TransitionBase = function() {
  goog.base(this);
  this.state_ = goog.fx.TransitionBase.State.STOPPED;
  this.startTime = null;
  this.endTime = null;
};
goog.inherits(goog.fx.TransitionBase, goog.events.EventTarget);
goog.fx.TransitionBase.State = {STOPPED:0, PAUSED:-1, PLAYING:1};
goog.fx.TransitionBase.prototype.play = goog.abstractMethod;
goog.fx.TransitionBase.prototype.stop = goog.abstractMethod;
goog.fx.TransitionBase.prototype.pause = goog.abstractMethod;
goog.fx.TransitionBase.prototype.getStateInternal = function() {
  return this.state_;
};
goog.fx.TransitionBase.prototype.setStatePlaying = function() {
  this.state_ = goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.setStatePaused = function() {
  this.state_ = goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.setStateStopped = function() {
  this.state_ = goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.isPlaying = function() {
  return this.state_ == goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.isPaused = function() {
  return this.state_ == goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.isStopped = function() {
  return this.state_ == goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.onBegin = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.BEGIN);
};
goog.fx.TransitionBase.prototype.onEnd = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.END);
};
goog.fx.TransitionBase.prototype.onFinish = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.FINISH);
};
goog.fx.TransitionBase.prototype.onPause = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.PAUSE);
};
goog.fx.TransitionBase.prototype.onPlay = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.PLAY);
};
goog.fx.TransitionBase.prototype.onResume = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.RESUME);
};
goog.fx.TransitionBase.prototype.onStop = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.STOP);
};
goog.fx.TransitionBase.prototype.dispatchAnimationEvent = function(type) {
  this.dispatchEvent(type);
};
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.Disposable.call(this);
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.provide("goog.async.AnimationDelay");
goog.require("goog.async.Delay");
goog.require("goog.functions");
goog.async.AnimationDelay = function(listener, opt_window, opt_handler) {
  goog.base(this);
  this.listener_ = listener;
  this.handler_ = opt_handler;
  this.win_ = opt_window || window;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.AnimationDelay, goog.Disposable);
goog.async.AnimationDelay.prototype.id_ = null;
goog.async.AnimationDelay.prototype.usingListeners_ = false;
goog.async.AnimationDelay.TIMEOUT = 20;
goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_ = "MozBeforePaint";
goog.async.AnimationDelay.prototype.start = function() {
  this.stop();
  this.usingListeners_ = false;
  var raf = this.getRaf_();
  var cancelRaf = this.getCancelRaf_();
  if (raf && (!cancelRaf && this.win_.mozRequestAnimationFrame)) {
    this.id_ = goog.events.listen(this.win_, goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_, this.callback_);
    this.win_.mozRequestAnimationFrame(null);
    this.usingListeners_ = true;
  } else {
    if (raf && cancelRaf) {
      this.id_ = raf.call(this.win_, this.callback_);
    } else {
      this.id_ = this.win_.setTimeout(goog.functions.lock(this.callback_), goog.async.AnimationDelay.TIMEOUT);
    }
  }
};
goog.async.AnimationDelay.prototype.stop = function() {
  if (this.isActive()) {
    var raf = this.getRaf_();
    var cancelRaf = this.getCancelRaf_();
    if (raf && (!cancelRaf && this.win_.mozRequestAnimationFrame)) {
      goog.events.unlistenByKey(this.id_);
    } else {
      if (raf && cancelRaf) {
        cancelRaf.call(this.win_, (this.id_));
      } else {
        this.win_.clearTimeout((this.id_));
      }
    }
  }
  this.id_ = null;
};
goog.async.AnimationDelay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.AnimationDelay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.AnimationDelay.prototype.isActive = function() {
  return this.id_ != null;
};
goog.async.AnimationDelay.prototype.doAction_ = function() {
  if (this.usingListeners_ && this.id_) {
    goog.events.unlistenByKey(this.id_);
  }
  this.id_ = null;
  this.listener_.call(this.handler_, goog.now());
};
goog.async.AnimationDelay.prototype.disposeInternal = function() {
  this.stop();
  goog.base(this, "disposeInternal");
};
goog.async.AnimationDelay.prototype.getRaf_ = function() {
  var win = this.win_;
  return win.requestAnimationFrame || (win.webkitRequestAnimationFrame || (win.mozRequestAnimationFrame || (win.oRequestAnimationFrame || (win.msRequestAnimationFrame || null))));
};
goog.async.AnimationDelay.prototype.getCancelRaf_ = function() {
  var win = this.win_;
  return win.cancelRequestAnimationFrame || (win.webkitCancelRequestAnimationFrame || (win.mozCancelRequestAnimationFrame || (win.oCancelRequestAnimationFrame || (win.msCancelRequestAnimationFrame || null))));
};
goog.provide("goog.fx.anim");
goog.provide("goog.fx.anim.Animated");
goog.require("goog.async.AnimationDelay");
goog.require("goog.async.Delay");
goog.require("goog.object");
goog.fx.anim.Animated = function() {
};
goog.fx.anim.Animated.prototype.onAnimationFrame;
goog.fx.anim.TIMEOUT = goog.async.AnimationDelay.TIMEOUT;
goog.fx.anim.activeAnimations_ = {};
goog.fx.anim.animationWindow_ = null;
goog.fx.anim.animationDelay_ = null;
goog.fx.anim.registerAnimation = function(animation) {
  var uid = goog.getUid(animation);
  if (!(uid in goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.activeAnimations_[uid] = animation;
  }
  goog.fx.anim.requestAnimationFrame_();
};
goog.fx.anim.unregisterAnimation = function(animation) {
  var uid = goog.getUid(animation);
  delete goog.fx.anim.activeAnimations_[uid];
  if (goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.cancelAnimationFrame_();
  }
};
goog.fx.anim.tearDown = function() {
  goog.fx.anim.animationWindow_ = null;
  goog.dispose(goog.fx.anim.animationDelay_);
  goog.fx.anim.animationDelay_ = null;
  goog.fx.anim.activeAnimations_ = {};
};
goog.fx.anim.setAnimationWindow = function(animationWindow) {
  var hasTimer = goog.fx.anim.animationDelay_ && goog.fx.anim.animationDelay_.isActive();
  goog.dispose(goog.fx.anim.animationDelay_);
  goog.fx.anim.animationDelay_ = null;
  goog.fx.anim.animationWindow_ = animationWindow;
  if (hasTimer) {
    goog.fx.anim.requestAnimationFrame_();
  }
};
goog.fx.anim.requestAnimationFrame_ = function() {
  if (!goog.fx.anim.animationDelay_) {
    if (goog.fx.anim.animationWindow_) {
      goog.fx.anim.animationDelay_ = new goog.async.AnimationDelay(function(now) {
        goog.fx.anim.cycleAnimations_(now);
      }, goog.fx.anim.animationWindow_);
    } else {
      goog.fx.anim.animationDelay_ = new goog.async.Delay(function() {
        goog.fx.anim.cycleAnimations_(goog.now());
      }, goog.fx.anim.TIMEOUT);
    }
  }
  var delay = goog.fx.anim.animationDelay_;
  if (!delay.isActive()) {
    delay.start();
  }
};
goog.fx.anim.cancelAnimationFrame_ = function() {
  if (goog.fx.anim.animationDelay_) {
    goog.fx.anim.animationDelay_.stop();
  }
};
goog.fx.anim.cycleAnimations_ = function(now) {
  goog.object.forEach(goog.fx.anim.activeAnimations_, function(anim) {
    anim.onAnimationFrame(now);
  });
  if (!goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.requestAnimationFrame_();
  }
};
goog.provide("goog.fx.Animation");
goog.provide("goog.fx.Animation.EventType");
goog.provide("goog.fx.Animation.State");
goog.provide("goog.fx.AnimationEvent");
goog.require("goog.array");
goog.require("goog.events.Event");
goog.require("goog.fx.Transition");
goog.require("goog.fx.Transition.EventType");
goog.require("goog.fx.TransitionBase.State");
goog.require("goog.fx.anim");
goog.require("goog.fx.anim.Animated");
goog.fx.Animation = function(start, end, duration, opt_acc) {
  goog.base(this);
  if (!goog.isArray(start) || !goog.isArray(end)) {
    throw Error("Start and end parameters must be arrays");
  }
  if (start.length != end.length) {
    throw Error("Start and end points must be the same length");
  }
  this.startPoint = start;
  this.endPoint = end;
  this.duration = duration;
  this.accel_ = opt_acc;
  this.coords = [];
  this.useRightPositioningForRtl_ = false;
};
goog.inherits(goog.fx.Animation, goog.fx.TransitionBase);
goog.fx.Animation.prototype.enableRightPositioningForRtl = function(useRightPositioningForRtl) {
  this.useRightPositioningForRtl_ = useRightPositioningForRtl;
};
goog.fx.Animation.prototype.isRightPositioningForRtlEnabled = function() {
  return this.useRightPositioningForRtl_;
};
goog.fx.Animation.EventType = {PLAY:goog.fx.Transition.EventType.PLAY, BEGIN:goog.fx.Transition.EventType.BEGIN, RESUME:goog.fx.Transition.EventType.RESUME, END:goog.fx.Transition.EventType.END, STOP:goog.fx.Transition.EventType.STOP, FINISH:goog.fx.Transition.EventType.FINISH, PAUSE:goog.fx.Transition.EventType.PAUSE, ANIMATE:"animate", DESTROY:"destroy"};
goog.fx.Animation.TIMEOUT = goog.fx.anim.TIMEOUT;
goog.fx.Animation.State = goog.fx.TransitionBase.State;
goog.fx.Animation.setAnimationWindow = function(animationWindow) {
  goog.fx.anim.setAnimationWindow(animationWindow);
};
goog.fx.Animation.prototype.fps_ = 0;
goog.fx.Animation.prototype.progress = 0;
goog.fx.Animation.prototype.lastFrame = null;
goog.fx.Animation.prototype.play = function(opt_restart) {
  if (opt_restart || this.isStopped()) {
    this.progress = 0;
    this.coords = this.startPoint;
  } else {
    if (this.isPlaying()) {
      return false;
    }
  }
  goog.fx.anim.unregisterAnimation(this);
  var now = (goog.now());
  this.startTime = now;
  if (this.isPaused()) {
    this.startTime -= this.duration * this.progress;
  }
  this.endTime = this.startTime + this.duration;
  this.lastFrame = this.startTime;
  if (!this.progress) {
    this.onBegin();
  }
  this.onPlay();
  if (this.isPaused()) {
    this.onResume();
  }
  this.setStatePlaying();
  goog.fx.anim.registerAnimation(this);
  this.cycle(now);
  return true;
};
goog.fx.Animation.prototype.stop = function(opt_gotoEnd) {
  goog.fx.anim.unregisterAnimation(this);
  this.setStateStopped();
  if (!!opt_gotoEnd) {
    this.progress = 1;
  }
  this.updateCoords_(this.progress);
  this.onStop();
  this.onEnd();
};
goog.fx.Animation.prototype.pause = function() {
  if (this.isPlaying()) {
    goog.fx.anim.unregisterAnimation(this);
    this.setStatePaused();
    this.onPause();
  }
};
goog.fx.Animation.prototype.getProgress = function() {
  return this.progress;
};
goog.fx.Animation.prototype.setProgress = function(progress) {
  this.progress = progress;
  if (this.isPlaying()) {
    var now = goog.now();
    this.startTime = now - this.duration * this.progress;
    this.endTime = this.startTime + this.duration;
  }
};
goog.fx.Animation.prototype.disposeInternal = function() {
  if (!this.isStopped()) {
    this.stop(false);
  }
  this.onDestroy();
  goog.base(this, "disposeInternal");
};
goog.fx.Animation.prototype.destroy = function() {
  this.dispose();
};
goog.fx.Animation.prototype.onAnimationFrame = function(now) {
  this.cycle(now);
};
goog.fx.Animation.prototype.cycle = function(now) {
  this.progress = (now - this.startTime) / (this.endTime - this.startTime);
  if (this.progress >= 1) {
    this.progress = 1;
  }
  this.fps_ = 1E3 / (now - this.lastFrame);
  this.lastFrame = now;
  this.updateCoords_(this.progress);
  if (this.progress == 1) {
    this.setStateStopped();
    goog.fx.anim.unregisterAnimation(this);
    this.onFinish();
    this.onEnd();
  } else {
    if (this.isPlaying()) {
      this.onAnimate();
    }
  }
};
goog.fx.Animation.prototype.updateCoords_ = function(t) {
  if (goog.isFunction(this.accel_)) {
    t = this.accel_(t);
  }
  this.coords = new Array(this.startPoint.length);
  for (var i = 0;i < this.startPoint.length;i++) {
    this.coords[i] = (this.endPoint[i] - this.startPoint[i]) * t + this.startPoint[i];
  }
};
goog.fx.Animation.prototype.onAnimate = function() {
  this.dispatchAnimationEvent(goog.fx.Animation.EventType.ANIMATE);
};
goog.fx.Animation.prototype.onDestroy = function() {
  this.dispatchAnimationEvent(goog.fx.Animation.EventType.DESTROY);
};
goog.fx.Animation.prototype.dispatchAnimationEvent = function(type) {
  this.dispatchEvent(new goog.fx.AnimationEvent(type, this));
};
goog.fx.AnimationEvent = function(type, anim) {
  goog.base(this, type);
  this.coords = anim.coords;
  this.x = anim.coords[0];
  this.y = anim.coords[1];
  this.z = anim.coords[2];
  this.duration = anim.duration;
  this.progress = anim.getProgress();
  this.fps = anim.fps_;
  this.state = anim.getStateInternal();
  this.anim = anim;
};
goog.inherits(goog.fx.AnimationEvent, goog.events.Event);
goog.fx.AnimationEvent.prototype.coordsAsInts = function() {
  return goog.array.map(this.coords, Math.round);
};
goog.provide("goog.fx.easing");
goog.fx.easing.easeIn = function(t) {
  return t * t * t;
};
goog.fx.easing.easeOut = function(t) {
  return 1 - Math.pow(1 - t, 3);
};
goog.fx.easing.inAndOut = function(t) {
  return 3 * t * t - 2 * t * t * t;
};
goog.provide("goog.fx");
goog.require("goog.asserts");
goog.require("goog.fx.Animation");
goog.require("goog.fx.Animation.EventType");
goog.require("goog.fx.Animation.State");
goog.require("goog.fx.AnimationEvent");
goog.require("goog.fx.Transition.EventType");
goog.require("goog.fx.easing");
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.color.names");
goog.color.names = {"aliceblue":"#f0f8ff", "antiquewhite":"#faebd7", "aqua":"#00ffff", "aquamarine":"#7fffd4", "azure":"#f0ffff", "beige":"#f5f5dc", "bisque":"#ffe4c4", "black":"#000000", "blanchedalmond":"#ffebcd", "blue":"#0000ff", "blueviolet":"#8a2be2", "brown":"#a52a2a", "burlywood":"#deb887", "cadetblue":"#5f9ea0", "chartreuse":"#7fff00", "chocolate":"#d2691e", "coral":"#ff7f50", "cornflowerblue":"#6495ed", "cornsilk":"#fff8dc", "crimson":"#dc143c", "cyan":"#00ffff", "darkblue":"#00008b", "darkcyan":"#008b8b", 
"darkgoldenrod":"#b8860b", "darkgray":"#a9a9a9", "darkgreen":"#006400", "darkgrey":"#a9a9a9", "darkkhaki":"#bdb76b", "darkmagenta":"#8b008b", "darkolivegreen":"#556b2f", "darkorange":"#ff8c00", "darkorchid":"#9932cc", "darkred":"#8b0000", "darksalmon":"#e9967a", "darkseagreen":"#8fbc8f", "darkslateblue":"#483d8b", "darkslategray":"#2f4f4f", "darkslategrey":"#2f4f4f", "darkturquoise":"#00ced1", "darkviolet":"#9400d3", "deeppink":"#ff1493", "deepskyblue":"#00bfff", "dimgray":"#696969", "dimgrey":"#696969", 
"dodgerblue":"#1e90ff", "firebrick":"#b22222", "floralwhite":"#fffaf0", "forestgreen":"#228b22", "fuchsia":"#ff00ff", "gainsboro":"#dcdcdc", "ghostwhite":"#f8f8ff", "gold":"#ffd700", "goldenrod":"#daa520", "gray":"#808080", "green":"#008000", "greenyellow":"#adff2f", "grey":"#808080", "honeydew":"#f0fff0", "hotpink":"#ff69b4", "indianred":"#cd5c5c", "indigo":"#4b0082", "ivory":"#fffff0", "khaki":"#f0e68c", "lavender":"#e6e6fa", "lavenderblush":"#fff0f5", "lawngreen":"#7cfc00", "lemonchiffon":"#fffacd", 
"lightblue":"#add8e6", "lightcoral":"#f08080", "lightcyan":"#e0ffff", "lightgoldenrodyellow":"#fafad2", "lightgray":"#d3d3d3", "lightgreen":"#90ee90", "lightgrey":"#d3d3d3", "lightpink":"#ffb6c1", "lightsalmon":"#ffa07a", "lightseagreen":"#20b2aa", "lightskyblue":"#87cefa", "lightslategray":"#778899", "lightslategrey":"#778899", "lightsteelblue":"#b0c4de", "lightyellow":"#ffffe0", "lime":"#00ff00", "limegreen":"#32cd32", "linen":"#faf0e6", "magenta":"#ff00ff", "maroon":"#800000", "mediumaquamarine":"#66cdaa", 
"mediumblue":"#0000cd", "mediumorchid":"#ba55d3", "mediumpurple":"#9370db", "mediumseagreen":"#3cb371", "mediumslateblue":"#7b68ee", "mediumspringgreen":"#00fa9a", "mediumturquoise":"#48d1cc", "mediumvioletred":"#c71585", "midnightblue":"#191970", "mintcream":"#f5fffa", "mistyrose":"#ffe4e1", "moccasin":"#ffe4b5", "navajowhite":"#ffdead", "navy":"#000080", "oldlace":"#fdf5e6", "olive":"#808000", "olivedrab":"#6b8e23", "orange":"#ffa500", "orangered":"#ff4500", "orchid":"#da70d6", "palegoldenrod":"#eee8aa", 
"palegreen":"#98fb98", "paleturquoise":"#afeeee", "palevioletred":"#db7093", "papayawhip":"#ffefd5", "peachpuff":"#ffdab9", "peru":"#cd853f", "pink":"#ffc0cb", "plum":"#dda0dd", "powderblue":"#b0e0e6", "purple":"#800080", "red":"#ff0000", "rosybrown":"#bc8f8f", "royalblue":"#4169e1", "saddlebrown":"#8b4513", "salmon":"#fa8072", "sandybrown":"#f4a460", "seagreen":"#2e8b57", "seashell":"#fff5ee", "sienna":"#a0522d", "silver":"#c0c0c0", "skyblue":"#87ceeb", "slateblue":"#6a5acd", "slategray":"#708090", 
"slategrey":"#708090", "snow":"#fffafa", "springgreen":"#00ff7f", "steelblue":"#4682b4", "tan":"#d2b48c", "teal":"#008080", "thistle":"#d8bfd8", "tomato":"#ff6347", "turquoise":"#40e0d0", "violet":"#ee82ee", "wheat":"#f5deb3", "white":"#ffffff", "whitesmoke":"#f5f5f5", "yellow":"#ffff00", "yellowgreen":"#9acd32"};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length1;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.standardDeviation = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return Math.sqrt(variance);
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.color");
goog.require("goog.color.names");
goog.require("goog.math");
goog.color.Rgb;
goog.color.Hsv;
goog.color.Hsl;
goog.color.parse = function(str) {
  var result = {};
  str = String(str);
  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
  if (goog.color.isValidHexColor_(maybeHex)) {
    result.hex = goog.color.normalizeHex(maybeHex);
    result.type = "hex";
    return result;
  } else {
    var rgb = goog.color.isValidRgbColor_(str);
    if (rgb.length) {
      result.hex = goog.color.rgbArrayToHex(rgb);
      result.type = "rgb";
      return result;
    } else {
      if (goog.color.names) {
        var hex = goog.color.names[str.toLowerCase()];
        if (hex) {
          result.hex = hex;
          result.type = "named";
          return result;
        }
      }
    }
  }
  throw Error(str + " is not a valid color string");
};
goog.color.isValidColor = function(str) {
  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
  return!!(goog.color.isValidHexColor_(maybeHex) || (goog.color.isValidRgbColor_(str).length || goog.color.names && goog.color.names[str.toLowerCase()]));
};
goog.color.parseRgb = function(str) {
  var rgb = goog.color.isValidRgbColor_(str);
  if (!rgb.length) {
    throw Error(str + " is not a valid RGB color");
  }
  return rgb;
};
goog.color.hexToRgbStyle = function(hexColor) {
  return goog.color.rgbStyle_(goog.color.hexToRgb(hexColor));
};
goog.color.hexTripletRe_ = /#(.)(.)(.)/;
goog.color.normalizeHex = function(hexColor) {
  if (!goog.color.isValidHexColor_(hexColor)) {
    throw Error("'" + hexColor + "' is not a valid hex color");
  }
  if (hexColor.length == 4) {
    hexColor = hexColor.replace(goog.color.hexTripletRe_, "#$1$1$2$2$3$3");
  }
  return hexColor.toLowerCase();
};
goog.color.hexToRgb = function(hexColor) {
  hexColor = goog.color.normalizeHex(hexColor);
  var r = parseInt(hexColor.substr(1, 2), 16);
  var g = parseInt(hexColor.substr(3, 2), 16);
  var b = parseInt(hexColor.substr(5, 2), 16);
  return[r, g, b];
};
goog.color.rgbToHex = function(r, g, b) {
  r = Number(r);
  g = Number(g);
  b = Number(b);
  if (isNaN(r) || (r < 0 || (r > 255 || (isNaN(g) || (g < 0 || (g > 255 || (isNaN(b) || (b < 0 || b > 255)))))))) {
    throw Error('"(' + r + "," + g + "," + b + '") is not a valid RGB color');
  }
  var hexR = goog.color.prependZeroIfNecessaryHelper(r.toString(16));
  var hexG = goog.color.prependZeroIfNecessaryHelper(g.toString(16));
  var hexB = goog.color.prependZeroIfNecessaryHelper(b.toString(16));
  return "#" + hexR + hexG + hexB;
};
goog.color.rgbArrayToHex = function(rgb) {
  return goog.color.rgbToHex(rgb[0], rgb[1], rgb[2]);
};
goog.color.rgbToHsl = function(r, g, b) {
  var normR = r / 255;
  var normG = g / 255;
  var normB = b / 255;
  var max = Math.max(normR, normG, normB);
  var min = Math.min(normR, normG, normB);
  var h = 0;
  var s = 0;
  var l = 0.5 * (max + min);
  if (max != min) {
    if (max == normR) {
      h = 60 * (normG - normB) / (max - min);
    } else {
      if (max == normG) {
        h = 60 * (normB - normR) / (max - min) + 120;
      } else {
        if (max == normB) {
          h = 60 * (normR - normG) / (max - min) + 240;
        }
      }
    }
    if (0 < l && l <= 0.5) {
      s = (max - min) / (2 * l);
    } else {
      s = (max - min) / (2 - 2 * l);
    }
  }
  return[Math.round(h + 360) % 360, s, l];
};
goog.color.rgbArrayToHsl = function(rgb) {
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hueToRgb_ = function(v1, v2, vH) {
  if (vH < 0) {
    vH += 1;
  } else {
    if (vH > 1) {
      vH -= 1;
    }
  }
  if (6 * vH < 1) {
    return v1 + (v2 - v1) * 6 * vH;
  } else {
    if (2 * vH < 1) {
      return v2;
    } else {
      if (3 * vH < 2) {
        return v1 + (v2 - v1) * (2 / 3 - vH) * 6;
      }
    }
  }
  return v1;
};
goog.color.hslToRgb = function(h, s, l) {
  var r = 0;
  var g = 0;
  var b = 0;
  var normH = h / 360;
  if (s == 0) {
    r = g = b = l * 255;
  } else {
    var temp1 = 0;
    var temp2 = 0;
    if (l < 0.5) {
      temp2 = l * (1 + s);
    } else {
      temp2 = l + s - s * l;
    }
    temp1 = 2 * l - temp2;
    r = 255 * goog.color.hueToRgb_(temp1, temp2, normH + 1 / 3);
    g = 255 * goog.color.hueToRgb_(temp1, temp2, normH);
    b = 255 * goog.color.hueToRgb_(temp1, temp2, normH - 1 / 3);
  }
  return[Math.round(r), Math.round(g), Math.round(b)];
};
goog.color.hslArrayToRgb = function(hsl) {
  return goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]);
};
goog.color.validHexColorRe_ = /^#(?:[0-9a-f]{3}){1,2}$/i;
goog.color.isValidHexColor_ = function(str) {
  return goog.color.validHexColorRe_.test(str);
};
goog.color.normalizedHexColorRe_ = /^#[0-9a-f]{6}$/;
goog.color.isNormalizedHexColor_ = function(str) {
  return goog.color.normalizedHexColorRe_.test(str);
};
goog.color.rgbColorRe_ = /^(?:rgb)?\((0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2})\)$/i;
goog.color.isValidRgbColor_ = function(str) {
  var regExpResultArray = str.match(goog.color.rgbColorRe_);
  if (regExpResultArray) {
    var r = Number(regExpResultArray[1]);
    var g = Number(regExpResultArray[2]);
    var b = Number(regExpResultArray[3]);
    if (r >= 0 && (r <= 255 && (g >= 0 && (g <= 255 && (b >= 0 && b <= 255))))) {
      return[r, g, b];
    }
  }
  return[];
};
goog.color.prependZeroIfNecessaryHelper = function(hex) {
  return hex.length == 1 ? "0" + hex : hex;
};
goog.color.prependHashIfNecessaryHelper = function(str) {
  return str.charAt(0) == "#" ? str : "#" + str;
};
goog.color.rgbStyle_ = function(rgb) {
  return "rgb(" + rgb.join(",") + ")";
};
goog.color.hsvToRgb = function(h, s, brightness) {
  var red = 0;
  var green = 0;
  var blue = 0;
  if (s == 0) {
    red = brightness;
    green = brightness;
    blue = brightness;
  } else {
    var sextant = Math.floor(h / 60);
    var remainder = h / 60 - sextant;
    var val1 = brightness * (1 - s);
    var val2 = brightness * (1 - s * remainder);
    var val3 = brightness * (1 - s * (1 - remainder));
    switch(sextant) {
      case 1:
        red = val2;
        green = brightness;
        blue = val1;
        break;
      case 2:
        red = val1;
        green = brightness;
        blue = val3;
        break;
      case 3:
        red = val1;
        green = val2;
        blue = brightness;
        break;
      case 4:
        red = val3;
        green = val1;
        blue = brightness;
        break;
      case 5:
        red = brightness;
        green = val1;
        blue = val2;
        break;
      case 6:
      ;
      case 0:
        red = brightness;
        green = val3;
        blue = val1;
        break;
    }
  }
  return[Math.floor(red), Math.floor(green), Math.floor(blue)];
};
goog.color.rgbToHsv = function(red, green, blue) {
  var max = Math.max(Math.max(red, green), blue);
  var min = Math.min(Math.min(red, green), blue);
  var hue;
  var saturation;
  var value = max;
  if (min == max) {
    hue = 0;
    saturation = 0;
  } else {
    var delta = max - min;
    saturation = delta / max;
    if (red == max) {
      hue = (green - blue) / delta;
    } else {
      if (green == max) {
        hue = 2 + (blue - red) / delta;
      } else {
        hue = 4 + (red - green) / delta;
      }
    }
    hue *= 60;
    if (hue < 0) {
      hue += 360;
    }
    if (hue > 360) {
      hue -= 360;
    }
  }
  return[hue, saturation, value];
};
goog.color.rgbArrayToHsv = function(rgb) {
  return goog.color.rgbToHsv(rgb[0], rgb[1], rgb[2]);
};
goog.color.hsvArrayToRgb = function(hsv) {
  return goog.color.hsvToRgb(hsv[0], hsv[1], hsv[2]);
};
goog.color.hexToHsl = function(hex) {
  var rgb = goog.color.hexToRgb(hex);
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hslToHex = function(h, s, l) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(h, s, l));
};
goog.color.hslArrayToHex = function(hsl) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]));
};
goog.color.hexToHsv = function(hex) {
  return goog.color.rgbArrayToHsv(goog.color.hexToRgb(hex));
};
goog.color.hsvToHex = function(h, s, v) {
  return goog.color.rgbArrayToHex(goog.color.hsvToRgb(h, s, v));
};
goog.color.hsvArrayToHex = function(hsv) {
  return goog.color.hsvToHex(hsv[0], hsv[1], hsv[2]);
};
goog.color.hslDistance = function(hsl1, hsl2) {
  var sl1, sl2;
  if (hsl1[2] <= 0.5) {
    sl1 = hsl1[1] * hsl1[2];
  } else {
    sl1 = hsl1[1] * (1 - hsl1[2]);
  }
  if (hsl2[2] <= 0.5) {
    sl2 = hsl2[1] * hsl2[2];
  } else {
    sl2 = hsl2[1] * (1 - hsl2[2]);
  }
  var h1 = hsl1[0] / 360;
  var h2 = hsl2[0] / 360;
  var dh = (h1 - h2) * 2 * Math.PI;
  return(hsl1[2] - hsl2[2]) * (hsl1[2] - hsl2[2]) + sl1 * sl1 + sl2 * sl2 - 2 * sl1 * sl2 * Math.cos(dh);
};
goog.color.blend = function(rgb1, rgb2, factor) {
  factor = goog.math.clamp(factor, 0, 1);
  return[Math.round(factor * rgb1[0] + (1 - factor) * rgb2[0]), Math.round(factor * rgb1[1] + (1 - factor) * rgb2[1]), Math.round(factor * rgb1[2] + (1 - factor) * rgb2[2])];
};
goog.color.darken = function(rgb, factor) {
  var black = [0, 0, 0];
  return goog.color.blend(black, rgb, factor);
};
goog.color.lighten = function(rgb, factor) {
  var white = [255, 255, 255];
  return goog.color.blend(white, rgb, factor);
};
goog.color.highContrast = function(prime, suggestions) {
  var suggestionsWithDiff = [];
  for (var i = 0;i < suggestions.length;i++) {
    suggestionsWithDiff.push({color:suggestions[i], diff:goog.color.yiqBrightnessDiff_(suggestions[i], prime) + goog.color.colorDiff_(suggestions[i], prime)});
  }
  suggestionsWithDiff.sort(function(a, b) {
    return b.diff - a.diff;
  });
  return suggestionsWithDiff[0].color;
};
goog.color.yiqBrightness_ = function(rgb) {
  return Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1E3);
};
goog.color.yiqBrightnessDiff_ = function(rgb1, rgb2) {
  return Math.abs(goog.color.yiqBrightness_(rgb1) - goog.color.yiqBrightness_(rgb2));
};
goog.color.colorDiff_ = function(rgb1, rgb2) {
  return Math.abs(rgb1[0] - rgb2[0]) + Math.abs(rgb1[1] - rgb2[1]) + Math.abs(rgb1[2] - rgb2[2]);
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || (goog.userAgent.IE && goog.userAgent.isDocumentMode(9) || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.1")), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || (goog.userAgent.OPERA || goog.userAgent.WEBKIT), INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.DomHelper");
goog.provide("goog.dom.NodeType");
goog.require("goog.array");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.TagName");
goog.require("goog.dom.classes");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.ASSUME_QUIRKS_MODE = false;
goog.dom.ASSUME_STANDARDS_MODE = false;
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.isString(element) ? document.getElementById(element) : element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  } else {
    if (parent.getElementsByClassName) {
      return parent.getElementsByClassName(className);
    }
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByClass(className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var vh = goog.dom.getViewportSize_(win).height;
    var body = doc.body;
    var docEl = doc.documentElement;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || (goog.global || window);
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  return!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && (attributes && (attributes.name || attributes.type))) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        goog.dom.classes.add.apply(null, [element].concat(attributes));
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.getCompatMode = function() {
  return goog.dom.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    return element.parentElement;
  }
  var parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentMode(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow_(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(element, text) {
  if ("textContent" in element) {
    element.textContent = text;
  } else {
    if (element.firstChild && element.firstChild.nodeType == goog.dom.NodeType.TEXT) {
      while (element.lastChild != element.firstChild) {
        element.removeChild(element.lastChild);
      }
      element.firstChild.data = text;
    } else {
      goog.dom.removeChildren(element);
      var doc = goog.dom.getOwnerDocument(element);
      element.appendChild(doc.createTextNode(String(text)));
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  if (attrNode && attrNode.specified) {
    var index = element.tabIndex;
    return goog.isNumber(index) && (index >= 0 && index < 32768);
  }
  return false;
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.dom.classes.has(node, opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || (goog.global.document || document);
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  if (goog.isString(element)) {
    return this.document_.getElementById(element);
  } else {
    return element;
  }
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.getCompatMode = function() {
  return this.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.dom.vendor");
goog.require("goog.userAgent");
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "Webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "Moz";
    } else {
      if (goog.userAgent.IE) {
        return "ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "O";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "-webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "-moz";
    } else {
      if (goog.userAgent.IE) {
        return "-ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "-o";
        }
      }
    }
  }
  return null;
};
goog.provide("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left;
};
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
  for (var i = 1;i < arguments.length;i++) {
    var coord = arguments[i];
    box.top = Math.min(box.top, coord.y);
    box.right = Math.max(box.right, coord.x);
    box.bottom = Math.max(box.bottom, coord.y);
    box.left = Math.min(box.left, coord.x);
  }
  return box;
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
  goog.math.Box.prototype.toString = function() {
    return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
  };
}
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += opt_right;
    this.bottom += opt_bottom;
    this.left -= opt_left;
  }
  return this;
};
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && (a.right == b.right && (a.bottom == b.bottom && a.left == b.left));
};
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }
  if (other instanceof goog.math.Box) {
    return other.left >= box.left && (other.right <= box.right && (other.top >= box.top && other.bottom <= box.bottom));
  }
  return other.x >= box.left && (other.x <= box.right && (other.y >= box.top && other.y <= box.bottom));
};
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else {
    if (coord.x > box.right) {
      return coord.x - box.right;
    }
  }
  return 0;
};
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else {
    if (coord.y > box.bottom) {
      return coord.y - box.bottom;
    }
  }
  return 0;
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && (b.left <= a.right && (a.top <= b.bottom && b.top <= a.bottom));
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && (b.left <= a.right + padding && (a.top <= b.bottom + padding && b.top <= a.bottom + padding));
};
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    this.left += tx;
    this.right += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};
goog.provide("goog.math.Rect");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h;
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
  goog.math.Rect.prototype.toString = function() {
    return "(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)";
  };
}
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && (a.width == b.width && (a.top == b.top && a.height == b.height));
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;
      return true;
    }
  }
  return false;
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);
  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);
    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && (b.left <= a.left + a.width && (a.top <= b.top + b.height && b.top <= a.top + a.height));
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || (!intersection.height || !intersection.width)) {
    return[a.clone()];
  }
  var result = [];
  var top = a.top;
  var height = a.height;
  var ar = a.left + a.width;
  var ab = a.top + a.height;
  var br = b.left + b.width;
  var bb = b.top + b.height;
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    height -= b.top - a.top;
  }
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }
  return result;
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }
  var clone = a.clone();
  clone.boundingRect(b);
  return clone;
};
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Rect) {
    return this.left <= another.left && (this.left + this.width >= another.left + another.width && (this.top <= another.top && this.top + this.height >= another.top + another.height));
  } else {
    return another.x >= this.left && (another.x <= this.left + this.width && (another.y >= this.top && another.y <= this.top + this.height));
  }
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
    }
  }
  return this;
};
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};
goog.provide("goog.style");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.dom.vendor");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.style.setStyle = function(element, style, opt_value) {
  if (goog.isString(style)) {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    goog.object.forEach(style, goog.partial(goog.style.setStyle_, element));
  }
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  if (propertyName) {
    element.style[propertyName] = value;
  }
};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(style);
    if (element.style[prefixedStyle] !== undefined) {
      return prefixedStyle;
    }
  }
  return camelStyle;
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(style);
    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style;
    }
  }
  return style;
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  if (typeof styleValue !== "undefined") {
    return styleValue;
  }
  return element.style[goog.style.getVendorJsStyleName_(element, property)] || "";
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      return styles[property] || (styles.getPropertyValue(property) || "");
    }
  }
  return "";
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null;
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || (goog.style.getCascadedStyle(element, style) || element.style && element.style[style]);
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position");
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor");
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX");
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY");
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex");
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign");
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor");
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;
  var buggyGeckoSubPixelPos = goog.userAgent.GECKO && ((goog.userAgent.MAC || goog.userAgent.X11) && goog.userAgent.isVersion("1.9"));
  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }
  el.style.left = goog.style.getPixelStyleValue_((x), buggyGeckoSubPixelPos);
  el.style.top = goog.style.getPixelStyleValue_((y), buggyGeckoSubPixelPos);
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate(element.offsetLeft, element.offsetTop);
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }
  if (goog.userAgent.IE && (!goog.userAgent.isDocumentMode(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode())) {
    return doc.body;
  }
  return doc.documentElement;
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect = el.getBoundingClientRect();
  if (goog.userAgent.IE) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return(rect);
};
goog.style.getOffsetParent = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentMode(8)) {
    return element.offsetParent;
  }
  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, "position");
  var skipStatic = positionStyle == "fixed" || positionStyle == "absolute";
  for (var parent = element.parentNode;parent && parent != doc;parent = parent.parentNode) {
    positionStyle = goog.style.getStyle_((parent), "position");
    skipStatic = skipStatic && (positionStyle == "static" && (parent != doc.documentElement && parent != doc.body));
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth || (parent.scrollHeight > parent.clientHeight || (positionStyle == "fixed" || (positionStyle == "absolute" || positionStyle == "relative"))))) {
      return(parent);
    }
  }
  return null;
};
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();
  for (var el = element;el = goog.style.getOffsetParent(el);) {
    if ((!goog.userAgent.IE || el.clientWidth != 0) && ((!goog.userAgent.WEBKIT || (el.clientHeight != 0 || el != body)) && (el != body && (el != documentElement && goog.style.getStyle_(el, "overflow") != "visible")))) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && (visibleRect.left >= 0 && (visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left)) ? visibleRect : null;
};
goog.style.getContainerOffsetToScrollInto = function(element, container, opt_center) {
  var elementPos = goog.style.getPageOffset(element);
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  var relX = elementPos.x - containerPos.x - containerBorder.left;
  var relY = elementPos.y - containerPos.y - containerBorder.top;
  var spaceX = container.clientWidth - element.offsetWidth;
  var spaceY = container.clientHeight - element.offsetHeight;
  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function(element, container, opt_center) {
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function(el) {
  if (goog.userAgent.GECKO && !goog.userAgent.isVersion("1.9")) {
    var left = parseFloat(goog.style.getComputedStyle(el, "borderLeftWidth"));
    if (goog.style.isRightToLeft(el)) {
      var scrollbarWidth = el.offsetWidth - el.clientWidth - left - parseFloat(goog.style.getComputedStyle(el, "borderRightWidth"));
      left += scrollbarWidth;
    }
    return new goog.math.Coordinate(left, parseFloat(goog.style.getComputedStyle(el, "borderTopWidth")));
  }
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function(el) {
  var box, doc = goog.dom.getOwnerDocument(el);
  var positionStyle = goog.style.getStyle_(el, "position");
  goog.asserts.assertObject(el, "Parameter is required");
  var BUGGY_GECKO_BOX_OBJECT = goog.userAgent.GECKO && (doc.getBoxObjectFor && (!el.getBoundingClientRect && (positionStyle == "absolute" && ((box = doc.getBoxObjectFor(el)) && (box.screenX < 0 || box.screenY < 0)))));
  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    return pos;
  }
  if (el.getBoundingClientRect) {
    box = goog.style.getBoundingClientRect_(el);
    var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
    pos.x = box.left + scrollCoord.x;
    pos.y = box.top + scrollCoord.y;
  } else {
    if (doc.getBoxObjectFor && !BUGGY_GECKO_BOX_OBJECT) {
      box = doc.getBoxObjectFor(el);
      var vpBox = doc.getBoxObjectFor(viewportElement);
      pos.x = box.screenX - vpBox.screenX;
      pos.y = box.screenY - vpBox.screenY;
    } else {
      var parent = el;
      do {
        pos.x += parent.offsetLeft;
        pos.y += parent.offsetTop;
        if (parent != el) {
          pos.x += parent.clientLeft || 0;
          pos.y += parent.clientTop || 0;
        }
        if (goog.userAgent.WEBKIT && goog.style.getComputedPosition(parent) == "fixed") {
          pos.x += doc.body.scrollLeft;
          pos.y += doc.body.scrollTop;
          break;
        }
        parent = parent.offsetParent;
      } while (parent && parent != el);
      if (goog.userAgent.OPERA || goog.userAgent.WEBKIT && positionStyle == "absolute") {
        pos.y -= doc.body.offsetTop;
      }
      for (parent = el;(parent = goog.style.getOffsetParent(parent)) && (parent != doc.body && parent != viewportElement);) {
        pos.x -= parent.scrollLeft;
        if (!goog.userAgent.OPERA || parent.tagName != "TR") {
          pos.y -= parent.scrollTop;
        }
      }
    }
  }
  return pos;
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  var currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPosition(currentEl);
    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && (currentWin != relativeWin && ((currentEl = currentWin.frameElement) && (currentWin = currentWin.parent))));
  return position;
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    if (goog.userAgent.IE && !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }
    rect.left += pos.x;
    rect.top += pos.y;
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPosition = function(el) {
  var pos = new goog.math.Coordinate;
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    el = (el);
    if (el.getBoundingClientRect) {
      var box = goog.style.getBoundingClientRect_(el);
      pos.x = box.left;
      pos.y = box.top;
    } else {
      var scrollCoord = goog.dom.getDomHelper(el).getDocumentScroll();
      var pageCoord = goog.style.getPageOffset(el);
      pos.x = pageCoord.x - scrollCoord.x;
      pos.y = pageCoord.y - scrollCoord.y;
    }
    if (goog.userAgent.GECKO && !goog.userAgent.isVersion(12)) {
      pos = goog.math.Coordinate.sum(pos, goog.style.getCssTranslation(el));
    }
  } else {
    var isAbstractedEvent = goog.isFunction(el.getBrowserEvent);
    var targetEvent = el;
    if (el.targetTouches) {
      targetEvent = el.targetTouches[0];
    } else {
      if (isAbstractedEvent && el.getBrowserEvent().targetTouches) {
        targetEvent = el.getBrowserEvent().targetTouches[0];
      }
    }
    pos.x = targetEvent.clientX;
    pos.y = targetEvent.clientY;
  }
  return pos;
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }
  var dx = x - cur.x;
  var dy = opt_y - cur.y;
  goog.style.setPosition(el, el.offsetLeft + dx, el.offsetTop + dy);
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw Error("missing height argument");
    }
    h = opt_h;
  }
  goog.style.setWidth(element, (w));
  goog.style.setHeight(element, (h));
};
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == "number") {
    value = (round ? Math.round(value) : value) + "px";
  }
  return value;
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function(element) {
  if (goog.style.getStyle_(element, "display") != "none") {
    return goog.style.getSizeWithDisplay_(element);
  }
  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var size = goog.style.getSizeWithDisplay_(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return size;
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = element.offsetWidth;
  var offsetHeight = element.offsetHeight;
  var webkitOffsetsZero = goog.userAgent.WEBKIT && (!offsetWidth && !offsetHeight);
  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function(el) {
  var style = el.style;
  var result = "";
  if ("opacity" in style) {
    result = style.opacity;
  } else {
    if ("MozOpacity" in style) {
      result = style.MozOpacity;
    } else {
      if ("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
          result = String(match[1] / 100);
        }
      }
    }
  }
  return result == "" ? result : Number(result);
};
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  if ("opacity" in style) {
    style.opacity = alpha;
  } else {
    if ("MozOpacity" in style) {
      style.MozOpacity = alpha;
    } else {
      if ("filter" in style) {
        if (alpha === "") {
          style.filter = "";
        } else {
          style.filter = "alpha(opacity\x3d" + alpha * 100 + ")";
        }
      }
    }
  }
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersion("8")) {
    style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(" + 'src\x3d"' + src + '", sizingMethod\x3d"crop")';
  } else {
    style.backgroundImage = "url(" + src + ")";
    style.backgroundPosition = "top left";
    style.backgroundRepeat = "no-repeat";
  }
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ("filter" in style) {
    style.filter = "";
  } else {
    style.backgroundImage = "none";
  }
};
goog.style.showElement = function(el, display) {
  el.style.display = display ? "" : "none";
};
goog.style.isElementShown = function(el) {
  return el.style.display != "none";
};
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var styleSheet = null;
  if (goog.userAgent.IE) {
    styleSheet = dh.getDocument().createStyleSheet();
    goog.style.setStyles(styleSheet, stylesString);
  } else {
    var head = dh.getElementsByTagNameAndClass("head")[0];
    if (!head) {
      var body = dh.getElementsByTagNameAndClass("body")[0];
      head = dh.createDom("head");
      body.parentNode.insertBefore(head, body);
    }
    styleSheet = dh.createDom("style");
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet);
  }
  return styleSheet;
};
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || (styleSheet.owningElement || (styleSheet));
  goog.dom.removeNode(node);
};
goog.style.setStyles = function(element, stylesString) {
  if (goog.userAgent.IE) {
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersion("8")) {
    style.whiteSpace = "pre";
    style.wordWrap = "break-word";
  } else {
    if (goog.userAgent.GECKO) {
      style.whiteSpace = "-moz-pre-wrap";
    } else {
      style.whiteSpace = "pre-wrap";
    }
  }
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  if (goog.userAgent.IE && !goog.userAgent.isVersion("8")) {
    style.zoom = "1";
    style.display = "inline";
  } else {
    if (goog.userAgent.GECKO) {
      style.display = goog.userAgent.isVersion("1.9a") ? "inline-block" : "-moz-inline-box";
    } else {
      style.display = "inline-block";
    }
  }
};
goog.style.isRightToLeft = function(el) {
  return "rtl" == goog.style.getStyle_(el, "direction");
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == "none";
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      return el.getAttribute("unselectable") == "on";
    }
  }
  return false;
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    var value = unselectable ? "none" : "";
    el.style[name] = value;
    if (descendants) {
      for (var i = 0, descendant;descendant = descendants[i];i++) {
        descendant.style[name] = value;
      }
    }
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      var value = unselectable ? "on" : "";
      el.setAttribute("unselectable", value);
      if (descendants) {
        for (var i = 0, descendant;descendant = descendants[i];i++) {
          descendant.setAttribute("unselectable", value);
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size(element.offsetWidth, element.offsetHeight);
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersion("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "border-box");
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle && (goog.dom.getDomHelper(doc).isCss1CompatMode() && (ieCurrentStyle.width != "auto" && (ieCurrentStyle.height != "auto" && !ieCurrentStyle.boxSizing)))) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth");
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom);
  }
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersion("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "content-box");
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else {
    if (goog.userAgent.WEBKIT) {
      style.WebkitBoxSizing = boxSizing;
    } else {
      style.boxSizing = boxSizing;
    }
  }
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px";
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return pixelValue;
  }
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0;
};
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left");
    var right = goog.style.getIePixelDistance_(element, stylePrefix + "Right");
    var top = goog.style.getIePixelDistance_(element, stylePrefix + "Top");
    var bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, stylePrefix + "Left"));
    var right = (goog.style.getComputedStyle(element, stylePrefix + "Right"));
    var top = (goog.style.getComputedStyle(element, stylePrefix + "Top"));
    var bottom = (goog.style.getComputedStyle(element, stylePrefix + "Bottom"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding");
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin");
};
goog.style.ieBorderWidthKeywords_ = {"thin":2, "medium":4, "thick":6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + "Style") == "none") {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, "left", "pixelLeft");
};
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft");
    var right = goog.style.getIePixelBorder_(element, "borderRight");
    var top = goog.style.getIePixelBorder_(element, "borderTop");
    var bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, "borderLeftWidth"));
    var right = (goog.style.getComputedStyle(element, "borderRightWidth"));
    var top = (goog.style.getComputedStyle(element, "borderTopWidth"));
    var bottom = (goog.style.getComputedStyle(element, "borderBottomWidth"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = "";
  if (doc.body.createTextRange) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName");
    } catch (e) {
      font = "";
    }
  }
  if (!font) {
    font = goog.style.getStyle_(el, "fontFamily");
  }
  var fontsArray = font.split(",");
  if (fontsArray.length > 1) {
    font = fontsArray[0];
  }
  return goog.string.stripQuotes(font, "\"'");
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {"cm":1, "in":1, "mm":1, "pc":1, "pt":1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {"em":1, "ex":1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize");
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10);
  }
  if (goog.userAgent.IE) {
    if (sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft");
    } else {
      if (el.parentNode && (el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_)) {
        var parentElement = (el.parentNode);
        var parentSize = goog.style.getStyle_(parentElement, "fontSize");
        return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft");
      }
    }
  }
  var sizeElement = goog.dom.createDom("span", {"style":"visibility:hidden;position:absolute;" + "line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize;
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.split(/\s*:\s*/);
    if (keyValue.length == 2) {
      result[goog.string.toCamelCase(keyValue[0].toLowerCase())] = keyValue[1];
    }
  });
  return result;
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";");
  });
  return buffer.join("");
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value;
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || "";
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement("div");
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = "overflow:auto;" + "position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement("div");
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp("matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, " + "[0-9\\.\\-]+, [0-9\\.\\-]+, " + "([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)");
goog.style.getCssTranslation = function(element) {
  var property;
  if (goog.userAgent.IE) {
    property = "-ms-transform";
  } else {
    if (goog.userAgent.WEBKIT) {
      property = "-webkit-transform";
    } else {
      if (goog.userAgent.OPERA) {
        property = "-o-transform";
      } else {
        if (goog.userAgent.GECKO) {
          property = "-moz-transform";
        }
      }
    }
  }
  var transform;
  if (property) {
    transform = goog.style.getStyle_(element, property);
  }
  if (!transform) {
    transform = goog.style.getStyle_(element, "transform");
  }
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide("goog.style.bidi");
goog.require("goog.dom");
goog.require("goog.style");
goog.require("goog.userAgent");
goog.style.bidi.getScrollLeft = function(element) {
  var isRtl = goog.style.isRightToLeft(element);
  if (isRtl && goog.userAgent.GECKO) {
    return-element.scrollLeft;
  } else {
    if (isRtl && !(goog.userAgent.IE && goog.userAgent.isVersion("8"))) {
      var overflowX = goog.style.getComputedOverflowX(element);
      if (overflowX == "visible") {
        return element.scrollLeft;
      } else {
        return element.scrollWidth - element.clientWidth - element.scrollLeft;
      }
    }
  }
  return element.scrollLeft;
};
goog.style.bidi.getOffsetStart = function(element) {
  var offsetLeftForReal = element.offsetLeft;
  var bestParent = element.offsetParent;
  if (!bestParent && goog.style.getComputedPosition(element) == "fixed") {
    bestParent = goog.dom.getOwnerDocument(element).documentElement;
  }
  if (!bestParent) {
    return offsetLeftForReal;
  }
  if (goog.userAgent.GECKO) {
    var borderWidths = goog.style.getBorderBox(bestParent);
    offsetLeftForReal += borderWidths.left;
  } else {
    if (goog.userAgent.isDocumentMode(8)) {
      var borderWidths = goog.style.getBorderBox(bestParent);
      offsetLeftForReal -= borderWidths.left;
    }
  }
  if (goog.style.isRightToLeft(bestParent)) {
    var elementRightOffset = offsetLeftForReal + element.offsetWidth;
    return bestParent.clientWidth - elementRightOffset;
  }
  return offsetLeftForReal;
};
goog.style.bidi.setScrollOffset = function(element, offsetStart) {
  offsetStart = Math.max(offsetStart, 0);
  if (!goog.style.isRightToLeft(element)) {
    element.scrollLeft = offsetStart;
  } else {
    if (goog.userAgent.GECKO) {
      element.scrollLeft = -offsetStart;
    } else {
      if (!(goog.userAgent.IE && goog.userAgent.isVersion("8"))) {
        element.scrollLeft = element.scrollWidth - offsetStart - element.clientWidth;
      } else {
        element.scrollLeft = offsetStart;
      }
    }
  }
};
goog.style.bidi.setPosition = function(elem, left, top, isRtl) {
  if (!goog.isNull(top)) {
    elem.style.top = top + "px";
  }
  if (isRtl) {
    elem.style.right = left + "px";
    elem.style.left = "";
  } else {
    elem.style.left = left + "px";
    elem.style.right = "";
  }
};
goog.provide("goog.fx.dom");
goog.provide("goog.fx.dom.BgColorTransform");
goog.provide("goog.fx.dom.ColorTransform");
goog.provide("goog.fx.dom.Fade");
goog.provide("goog.fx.dom.FadeIn");
goog.provide("goog.fx.dom.FadeInAndShow");
goog.provide("goog.fx.dom.FadeOut");
goog.provide("goog.fx.dom.FadeOutAndHide");
goog.provide("goog.fx.dom.PredefinedEffect");
goog.provide("goog.fx.dom.Resize");
goog.provide("goog.fx.dom.ResizeHeight");
goog.provide("goog.fx.dom.ResizeWidth");
goog.provide("goog.fx.dom.Scroll");
goog.provide("goog.fx.dom.Slide");
goog.provide("goog.fx.dom.SlideFrom");
goog.provide("goog.fx.dom.Swipe");
goog.require("goog.color");
goog.require("goog.events");
goog.require("goog.fx.Animation");
goog.require("goog.fx.Transition.EventType");
goog.require("goog.style");
goog.require("goog.style.bidi");
goog.fx.dom.PredefinedEffect = function(element, start, end, time, opt_acc) {
  goog.fx.Animation.call(this, start, end, time, opt_acc);
  this.element = element;
  this.rightToLeft_;
};
goog.inherits(goog.fx.dom.PredefinedEffect, goog.fx.Animation);
goog.fx.dom.PredefinedEffect.prototype.updateStyle = goog.nullFunction;
goog.fx.dom.PredefinedEffect.prototype.rightToLeft_;
goog.fx.dom.PredefinedEffect.prototype.isRightToLeft = function() {
  if (!goog.isDef(this.rightToLeft_)) {
    this.rightToLeft_ = goog.style.isRightToLeft(this.element);
  }
  return this.rightToLeft_;
};
goog.fx.dom.PredefinedEffect.prototype.onAnimate = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onAnimate.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onEnd = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onEnd.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onBegin = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onBegin.call(this);
};
goog.fx.dom.Slide = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Slide, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Slide.prototype.updateStyle = function() {
  var pos = this.isRightPositioningForRtlEnabled() && this.isRightToLeft() ? "right" : "left";
  this.element.style[pos] = Math.round(this.coords[0]) + "px";
  this.element.style.top = Math.round(this.coords[1]) + "px";
};
goog.fx.dom.SlideFrom = function(element, end, time, opt_acc) {
  var offsetLeft = this.isRightPositioningForRtlEnabled() ? goog.style.bidi.getOffsetStart(element) : element.offsetLeft;
  var start = [offsetLeft, element.offsetTop];
  goog.fx.dom.Slide.call(this, element, start, end, time, opt_acc);
};
goog.inherits(goog.fx.dom.SlideFrom, goog.fx.dom.Slide);
goog.fx.dom.SlideFrom.prototype.onBegin = function() {
  var offsetLeft = this.isRightPositioningForRtlEnabled() ? goog.style.bidi.getOffsetStart(this.element) : this.element.offsetLeft;
  this.startPoint = [offsetLeft, this.element.offsetTop];
  goog.fx.dom.SlideFrom.superClass_.onBegin.call(this);
};
goog.fx.dom.Swipe = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
  this.maxWidth_ = Math.max(this.endPoint[0], this.startPoint[0]);
  this.maxHeight_ = Math.max(this.endPoint[1], this.startPoint[1]);
};
goog.inherits(goog.fx.dom.Swipe, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Swipe.prototype.updateStyle = function() {
  var x = this.coords[0];
  var y = this.coords[1];
  this.clip_(Math.round(x), Math.round(y), this.maxWidth_, this.maxHeight_);
  this.element.style.width = Math.round(x) + "px";
  var marginX = this.isRightPositioningForRtlEnabled() && this.isRightToLeft() ? "marginRight" : "marginLeft";
  this.element.style[marginX] = Math.round(x) - this.maxWidth_ + "px";
  this.element.style.marginTop = Math.round(y) - this.maxHeight_ + "px";
};
goog.fx.dom.Swipe.prototype.clip_ = function(x, y, w, h) {
  this.element.style.clip = "rect(" + (h - y) + "px " + w + "px " + h + "px " + (w - x) + "px)";
};
goog.fx.dom.Scroll = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Scroll, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Scroll.prototype.updateStyle = function() {
  if (this.isRightPositioningForRtlEnabled()) {
    goog.style.bidi.setScrollOffset(this.element, Math.round(this.coords[0]));
  } else {
    this.element.scrollLeft = Math.round(this.coords[0]);
  }
  this.element.scrollTop = Math.round(this.coords[1]);
};
goog.fx.dom.Resize = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Resize, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Resize.prototype.updateStyle = function() {
  this.element.style.width = Math.round(this.coords[0]) + "px";
  this.element.style.height = Math.round(this.coords[1]) + "px";
};
goog.fx.dom.ResizeWidth = function(element, start, end, time, opt_acc) {
  goog.fx.dom.PredefinedEffect.call(this, element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeWidth, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeWidth.prototype.updateStyle = function() {
  this.element.style.width = Math.round(this.coords[0]) + "px";
};
goog.fx.dom.ResizeHeight = function(element, start, end, time, opt_acc) {
  goog.fx.dom.PredefinedEffect.call(this, element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeHeight, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeHeight.prototype.updateStyle = function() {
  this.element.style.height = Math.round(this.coords[0]) + "px";
};
goog.fx.dom.Fade = function(element, start, end, time, opt_acc) {
  if (goog.isNumber(start)) {
    start = [start];
  }
  if (goog.isNumber(end)) {
    end = [end];
  }
  goog.fx.dom.PredefinedEffect.call(this, element, start, end, time, opt_acc);
  if (start.length != 1 || end.length != 1) {
    throw Error("Start and end points must be 1D");
  }
};
goog.inherits(goog.fx.dom.Fade, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Fade.prototype.updateStyle = function() {
  goog.style.setOpacity(this.element, this.coords[0]);
};
goog.fx.dom.Fade.prototype.show = function() {
  this.element.style.display = "";
};
goog.fx.dom.Fade.prototype.hide = function() {
  this.element.style.display = "none";
};
goog.fx.dom.FadeOut = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOut, goog.fx.dom.Fade);
goog.fx.dom.FadeIn = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeIn, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOutAndHide, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide.prototype.onBegin = function() {
  this.show();
  goog.fx.dom.FadeOutAndHide.superClass_.onBegin.call(this);
};
goog.fx.dom.FadeOutAndHide.prototype.onEnd = function() {
  this.hide();
  goog.fx.dom.FadeOutAndHide.superClass_.onEnd.call(this);
};
goog.fx.dom.FadeInAndShow = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeInAndShow, goog.fx.dom.Fade);
goog.fx.dom.FadeInAndShow.prototype.onBegin = function() {
  this.show();
  goog.fx.dom.FadeInAndShow.superClass_.onBegin.call(this);
};
goog.fx.dom.BgColorTransform = function(element, start, end, time, opt_acc) {
  if (start.length != 3 || end.length != 3) {
    throw Error("Start and end points must be 3D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.BgColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.BgColorTransform.prototype.setColor = function() {
  var coordsAsInts = [];
  for (var i = 0;i < this.coords.length;i++) {
    coordsAsInts[i] = Math.round(this.coords[i]);
  }
  var color = "rgb(" + coordsAsInts.join(",") + ")";
  this.element.style.backgroundColor = color;
};
goog.fx.dom.BgColorTransform.prototype.updateStyle = function() {
  this.setColor();
};
goog.fx.dom.bgColorFadeIn = function(element, start, time, opt_eventHandler) {
  var initialBgColor = element.style.backgroundColor || "";
  var computedBgColor = goog.style.getBackgroundColor(element);
  var end;
  if (computedBgColor && (computedBgColor != "transparent" && computedBgColor != "rgba(0, 0, 0, 0)")) {
    end = goog.color.hexToRgb(goog.color.parse(computedBgColor).hex);
  } else {
    end = [255, 255, 255];
  }
  var anim = new goog.fx.dom.BgColorTransform(element, start, end, time);
  function setBgColor() {
    element.style.backgroundColor = initialBgColor;
  }
  if (opt_eventHandler) {
    opt_eventHandler.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
  } else {
    goog.events.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
  }
  anim.play();
};
goog.fx.dom.ColorTransform = function(element, start, end, time, opt_acc) {
  if (start.length != 3 || end.length != 3) {
    throw Error("Start and end points must be 3D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.ColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ColorTransform.prototype.updateStyle = function() {
  var coordsAsInts = [];
  for (var i = 0;i < this.coords.length;i++) {
    coordsAsInts[i] = Math.round(this.coords[i]);
  }
  var color = "rgb(" + coordsAsInts.join(",") + ")";
  this.element.style.color = color;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__21038 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__21038;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__21042 = cljs.core._EQ_;
    var expr__21043 = limit;
    if (cljs.core.truth_(pred__21042.call(null, 1, expr__21043))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__21042.call(null, 2, expr__21043))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__21045 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__21046 = limit__$1 - 1;
            var G__21047 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__21045;
            limit__$1 = G__21046;
            parts = G__21047;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__21048 = index - 1;
        index = G__21048;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___21049 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___21049)) {
        var replacement_21050 = temp__4090__auto___21049;
        buffer.append([cljs.core.str(replacement_21050)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__21051 = index + 1;
      index = G__21051;
      continue;
    }
    break;
  }
};
goog.provide("goog.dom.forms");
goog.require("goog.structs.Map");
goog.dom.forms.getFormDataMap = function(form) {
  var map = new goog.structs.Map;
  goog.dom.forms.getFormDataHelper_(form, map, goog.dom.forms.addFormDataToMap_);
  return map;
};
goog.dom.forms.getFormDataString = function(form) {
  var sb = [];
  goog.dom.forms.getFormDataHelper_(form, sb, goog.dom.forms.addFormDataToStringBuffer_);
  return sb.join("\x26");
};
goog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (el.form != form || (el.disabled || el.tagName.toLowerCase() == "fieldset")) {
      continue;
    }
    var name = el.name;
    switch(el.type.toLowerCase()) {
      case "file":
      ;
      case "submit":
      ;
      case "reset":
      ;
      case "button":
        break;
      case "select-multiple":
        var values = goog.dom.forms.getValue(el);
        if (values != null) {
          for (var value, j = 0;value = values[j];j++) {
            fnAppend(result, name, value);
          }
        }
        break;
      default:
        var value = goog.dom.forms.getValue(el);
        if (value != null) {
          fnAppend(result, name, value);
        }
      ;
    }
  }
  var inputs = form.getElementsByTagName("input");
  for (var input, i = 0;input = inputs[i];i++) {
    if (input.form == form && input.type.toLowerCase() == "image") {
      name = input.name;
      fnAppend(result, name, input.value);
      fnAppend(result, name + ".x", "0");
      fnAppend(result, name + ".y", "0");
    }
  }
};
goog.dom.forms.addFormDataToMap_ = function(map, name, value) {
  var array = map.get(name);
  if (!array) {
    array = [];
    map.set(name, array);
  }
  array.push(value);
};
goog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {
  sb.push(encodeURIComponent(name) + "\x3d" + encodeURIComponent(value));
};
goog.dom.forms.hasFileInput = function(form) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (!el.disabled && (el.type && el.type.toLowerCase() == "file")) {
      return true;
    }
  }
  return false;
};
goog.dom.forms.setDisabled = function(el, disabled) {
  if (el.tagName == "FORM") {
    var els = el.elements;
    for (var i = 0;el = els[i];i++) {
      goog.dom.forms.setDisabled(el, disabled);
    }
  } else {
    if (disabled == true) {
      el.blur();
    }
    el.disabled = disabled;
  }
};
goog.dom.forms.focusAndSelect = function(el) {
  el.focus();
  if (el.select) {
    el.select();
  }
};
goog.dom.forms.hasValue = function(el) {
  var value = goog.dom.forms.getValue(el);
  return!!value;
};
goog.dom.forms.hasValueByName = function(form, name) {
  var value = goog.dom.forms.getValueByName(form, name);
  return!!value;
};
goog.dom.forms.getValue = function(el) {
  var type = el.type;
  if (!goog.isDef(type)) {
    return null;
  }
  switch(type.toLowerCase()) {
    case "checkbox":
    ;
    case "radio":
      return goog.dom.forms.getInputChecked_(el);
    case "select-one":
      return goog.dom.forms.getSelectSingle_(el);
    case "select-multiple":
      return goog.dom.forms.getSelectMultiple_(el);
    default:
      return goog.isDef(el.value) ? el.value : null;
  }
};
goog.dom.$F = goog.dom.forms.getValue;
goog.dom.forms.getValueByName = function(form, name) {
  var els = form.elements[name];
  if (els.type) {
    return goog.dom.forms.getValue(els);
  } else {
    for (var i = 0;i < els.length;i++) {
      var val = goog.dom.forms.getValue(els[i]);
      if (val) {
        return val;
      }
    }
    return null;
  }
};
goog.dom.forms.getInputChecked_ = function(el) {
  return el.checked ? el.value : null;
};
goog.dom.forms.getSelectSingle_ = function(el) {
  var selectedIndex = el.selectedIndex;
  return selectedIndex >= 0 ? el.options[selectedIndex].value : null;
};
goog.dom.forms.getSelectMultiple_ = function(el) {
  var values = [];
  for (var option, i = 0;option = el.options[i];i++) {
    if (option.selected) {
      values.push(option.value);
    }
  }
  return values.length ? values : null;
};
goog.dom.forms.setValue = function(el, opt_value) {
  var type = el.type;
  if (goog.isDef(type)) {
    switch(type.toLowerCase()) {
      case "checkbox":
      ;
      case "radio":
        goog.dom.forms.setInputChecked_(el, (opt_value));
        break;
      case "select-one":
        goog.dom.forms.setSelectSingle_(el, (opt_value));
        break;
      case "select-multiple":
        goog.dom.forms.setSelectMultiple_(el, (opt_value));
        break;
      default:
        el.value = goog.isDefAndNotNull(opt_value) ? opt_value : "";
    }
  }
};
goog.dom.forms.setInputChecked_ = function(el, opt_value) {
  el.checked = opt_value ? "checked" : null;
};
goog.dom.forms.setSelectSingle_ = function(el, opt_value) {
  el.selectedIndex = -1;
  if (goog.isString(opt_value)) {
    for (var option, i = 0;option = el.options[i];i++) {
      if (option.value == opt_value) {
        option.selected = true;
        break;
      }
    }
  }
};
goog.dom.forms.setSelectMultiple_ = function(el, opt_value) {
  if (goog.isString(opt_value)) {
    opt_value = [opt_value];
  }
  for (var option, i = 0;option = el.options[i];i++) {
    option.selected = false;
    if (opt_value) {
      for (var value, j = 0;value = opt_value[j];j++) {
        if (option.value == value) {
          option.selected = true;
        }
      }
    }
  }
};
goog.provide("gin.ui.dom_helpers");
goog.require("cljs.core");
goog.require("goog.dom.classes");
goog.require("goog.Timer");
goog.require("goog.dom.classes");
goog.require("goog.fx");
goog.require("goog.fx.dom");
goog.require("goog.dom");
goog.require("goog.dom.forms");
goog.require("goog.dom");
goog.require("clojure.string");
goog.require("goog.fx.dom");
goog.require("goog.Timer");
goog.require("goog.style");
goog.require("clojure.string");
goog.require("goog.style");
goog.require("goog.dom.forms");
goog.require("goog.fx");
gin.ui.dom_helpers.get_element = function get_element(id) {
  return goog.dom.getElement(cljs.core.name.call(null, id));
};
gin.ui.dom_helpers.show_element = function show_element(e, b) {
  return goog.style.showElement(e, b);
};
gin.ui.dom_helpers.add_remove_class = function add_remove_class(e, add_classes, remove_classes) {
  return goog.dom.classes.addRemove(e, remove_classes, add_classes);
};
gin.ui.dom_helpers.get_radio_value = function get_radio_value(form_name, name) {
  return goog.dom.forms.getValueByName(gin.ui.dom_helpers.get_element.call(null, form_name), name);
};
gin.ui.dom_helpers.append = function() {
  var append__delegate = function(parent, children) {
    var seq__19367_19371 = cljs.core.seq.call(null, children);
    var chunk__19368_19372 = null;
    var count__19369_19373 = 0;
    var i__19370_19374 = 0;
    while (true) {
      if (i__19370_19374 < count__19369_19373) {
        var child_19375 = cljs.core._nth.call(null, chunk__19368_19372, i__19370_19374);
        goog.dom.appendChild(parent, child_19375);
        var G__19376 = seq__19367_19371;
        var G__19377 = chunk__19368_19372;
        var G__19378 = count__19369_19373;
        var G__19379 = i__19370_19374 + 1;
        seq__19367_19371 = G__19376;
        chunk__19368_19372 = G__19377;
        count__19369_19373 = G__19378;
        i__19370_19374 = G__19379;
        continue;
      } else {
        var temp__4092__auto___19380 = cljs.core.seq.call(null, seq__19367_19371);
        if (temp__4092__auto___19380) {
          var seq__19367_19381__$1 = temp__4092__auto___19380;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19367_19381__$1)) {
            var c__17409__auto___19382 = cljs.core.chunk_first.call(null, seq__19367_19381__$1);
            var G__19383 = cljs.core.chunk_rest.call(null, seq__19367_19381__$1);
            var G__19384 = c__17409__auto___19382;
            var G__19385 = cljs.core.count.call(null, c__17409__auto___19382);
            var G__19386 = 0;
            seq__19367_19371 = G__19383;
            chunk__19368_19372 = G__19384;
            count__19369_19373 = G__19385;
            i__19370_19374 = G__19386;
            continue;
          } else {
            var child_19387 = cljs.core.first.call(null, seq__19367_19381__$1);
            goog.dom.appendChild(parent, child_19387);
            var G__19388 = cljs.core.next.call(null, seq__19367_19381__$1);
            var G__19389 = null;
            var G__19390 = 0;
            var G__19391 = 0;
            seq__19367_19371 = G__19388;
            chunk__19368_19372 = G__19389;
            count__19369_19373 = G__19390;
            i__19370_19374 = G__19391;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return parent;
  };
  var append = function(parent, var_args) {
    var children = null;
    if (arguments.length > 1) {
      children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return append__delegate.call(this, parent, children);
  };
  append.cljs$lang$maxFixedArity = 1;
  append.cljs$lang$applyTo = function(arglist__19392) {
    var parent = cljs.core.first(arglist__19392);
    var children = cljs.core.rest(arglist__19392);
    return append__delegate(parent, children);
  };
  append.cljs$core$IFn$_invoke$arity$variadic = append__delegate;
  return append;
}();
gin.ui.dom_helpers.set_text = function set_text(e, s) {
  var e__$1 = e instanceof cljs.core.Keyword || typeof e === "string" ? gin.ui.dom_helpers.get_element.call(null, e) : e;
  var G__19394 = e__$1;
  goog.dom.setTextContent(G__19394, s);
  return G__19394;
};
gin.ui.dom_helpers.normalize_args = function normalize_args(tag, args) {
  var parts = clojure.string.split.call(null, tag, /(\.|#)/);
  var vec__19397 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, parts), cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.map.call(null, function(parts) {
    return function(p1__19395_SHARP_) {
      if (cljs.core._EQ_.call(null, p1__19395_SHARP_, ".")) {
        return new cljs.core.Keyword(null, "class", "class", 1108647146);
      } else {
        if (cljs.core._EQ_.call(null, p1__19395_SHARP_, "#")) {
          return new cljs.core.Keyword(null, "id", "id", 1013907597);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return p1__19395_SHARP_;
          } else {
            return null;
          }
        }
      }
    };
  }(parts), cljs.core.rest.call(null, parts)))], null);
  var tag__$1 = cljs.core.nth.call(null, vec__19397, 0, null);
  var attrs = cljs.core.nth.call(null, vec__19397, 1, null);
  if (cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, args))) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, cljs.core.merge.call(null, attrs, cljs.core.first.call(null, args)), cljs.core.rest.call(null, args)], null);
  } else {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, attrs, args], null);
  }
};
gin.ui.dom_helpers.element = function() {
  var element__delegate = function(tag, args) {
    var vec__19404 = gin.ui.dom_helpers.normalize_args.call(null, tag, args);
    var tag__$1 = cljs.core.nth.call(null, vec__19404, 0, null);
    var attrs = cljs.core.nth.call(null, vec__19404, 1, null);
    var children = cljs.core.nth.call(null, vec__19404, 2, null);
    var parent = goog.dom.createDom(cljs.core.subs.call(null, tag__$1, 1), cljs.core.clj__GT_js.call(null, cljs.core.reduce.call(null, function(vec__19404, tag__$1, attrs, children) {
      return function(m, p__19406) {
        var vec__19407 = p__19406;
        var k = cljs.core.nth.call(null, vec__19407, 0, null);
        var v = cljs.core.nth.call(null, vec__19407, 1, null);
        return cljs.core.assoc.call(null, m, k, v);
      };
    }(vec__19404, tag__$1, attrs, children), cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(vec__19404, tag__$1, attrs, children) {
      return function(p1__19398_SHARP_, p2__19399_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, p1__19398_SHARP_), p2__19399_SHARP_], null);
      };
    }(vec__19404, tag__$1, attrs, children), cljs.core.keys.call(null, attrs), cljs.core.vals.call(null, attrs)))));
    var vec__19405 = typeof cljs.core.first.call(null, children) === "string" ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [gin.ui.dom_helpers.set_text.call(null, element.call(null, tag__$1, attrs), cljs.core.first.call(null, children)), cljs.core.rest.call(null, children)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [parent, children], null);
    var parent__$1 = cljs.core.nth.call(null, vec__19405, 0, null);
    var children__$1 = cljs.core.nth.call(null, vec__19405, 1, null);
    return cljs.core.apply.call(null, gin.ui.dom_helpers.append, parent__$1, children__$1);
  };
  var element = function(tag, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return element__delegate.call(this, tag, args);
  };
  element.cljs$lang$maxFixedArity = 1;
  element.cljs$lang$applyTo = function(arglist__19408) {
    var tag = cljs.core.first(arglist__19408);
    var args = cljs.core.rest(arglist__19408);
    return element__delegate(tag, args);
  };
  element.cljs$core$IFn$_invoke$arity$variadic = element__delegate;
  return element;
}();
gin.ui.dom_helpers.remove_children = function remove_children(parent_el) {
  return goog.dom.removeChildren(parent_el);
};
gin.ui.dom_helpers.html = function html(s) {
  return goog.dom.htmlToDocumentFragment(s);
};
gin.ui.dom_helpers.element_arg_QMARK_ = function element_arg_QMARK_(x) {
  return x instanceof cljs.core.Keyword || (cljs.core.map_QMARK_.call(null, x) || typeof x === "string");
};
gin.ui.dom_helpers.build = function build(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    var vec__19410 = cljs.core.first.call(null, x) instanceof cljs.core.Keyword ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, gin.ui.dom_helpers.element, cljs.core.take_while.call(null, gin.ui.dom_helpers.element_arg_QMARK_, x)), cljs.core.drop_while.call(null, gin.ui.dom_helpers.element_arg_QMARK_, x)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, x), cljs.core.rest.call(null, 
    x)], null);
    var parent = cljs.core.nth.call(null, vec__19410, 0, null);
    var children = cljs.core.nth.call(null, vec__19410, 1, null);
    var children__$1 = cljs.core.map.call(null, build, children);
    return cljs.core.apply.call(null, gin.ui.dom_helpers.append, parent, children__$1);
  } else {
    return x;
  }
};
gin.ui.dom_helpers.insert_at = function insert_at(parent, child, index) {
  return goog.dom.insertChildAt(parent, child, index);
};
gin.ui.dom_helpers.set_timeout = function set_timeout(func, ttime) {
  return goog.Timer.callOnce(func, ttime);
};
gin.ui.dom_helpers.set_position = function set_position(e, x, y) {
  return goog.style.setPosition(e, x, y);
};
gin.ui.dom_helpers.get_position = function get_position(e) {
  var p = goog.style.getPosition(e);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p.x, p.y], null);
};
gin.ui.dom_helpers.get_bounds = function get_bounds(e) {
  return goog.style.getBounds(e);
};
gin.ui.dom_helpers.z_level = cljs.core.atom.call(null, 100);
gin.ui.dom_helpers.show_on_top = function show_on_top(card) {
  return card.style.zIndex = cljs.core.swap_BANG_.call(null, gin.ui.dom_helpers.z_level, cljs.core.inc);
};
gin.ui.dom_helpers.set_card_class = function set_card_class(card_el, card_class) {
  if (cljs.core._EQ_.call(null, card_class, "card_back")) {
    return goog.dom.classes.set(card_el, [cljs.core.str("card "), cljs.core.str(card_class)].join(""));
  } else {
    return gin.ui.dom_helpers.add_remove_class.call(null, card_el, card_class, "card_back");
  }
};
gin.ui.dom_helpers.toggle_class = function toggle_class(el, classname) {
  return goog.dom.classes.toggle(el, classname);
};
gin.ui.dom_helpers.add_class = function add_class(el, classname) {
  return goog.dom.classes.add(el, classname);
};
gin.ui.dom_helpers.remove_class = function remove_class(el, classname) {
  return goog.dom.classes.remove(el, classname);
};
goog.provide("gin.ui.animator");
goog.require("cljs.core");
goog.require("gin.ui.dom_helpers");
goog.require("gin.ui.dom_helpers");
gin.ui.animator.EL = 0;
gin.ui.animator.START = 1;
gin.ui.animator.DRAW = 2;
gin.ui.animator.TO = 3;
gin.ui.animator.STEP = 4;
gin.ui.animator.STEPS = 5;
gin.ui.animator.DX = 6;
gin.ui.animator.DY = 7;
gin.ui.animator.FINISH = 8;
gin.ui.animator.FIELD_COUNT = cljs.core.count.call(null, new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [gin.ui.animator.EL, gin.ui.animator.START, gin.ui.animator.DRAW, gin.ui.animator.TO, gin.ui.animator.STEP, gin.ui.animator.STEPS, gin.ui.animator.DX, gin.ui.animator.DY, gin.ui.animator.FINISH], null));
gin.ui.animator.a = new Array(52 * gin.ui.animator.FIELD_COUNT + 1);
gin.ui.animator.DO_DRAW = gin.ui.animator.a.length - 1;
gin.ui.animator.running = cljs.core.atom.call(null, false);
gin.ui.animator.anim_loop = function anim_loop() {
  gin.ui.animator.a[gin.ui.animator.DO_DRAW] = 0;
  var n__17509__auto___19336 = 52;
  var card_idx_19337 = 0;
  while (true) {
    if (card_idx_19337 < n__17509__auto___19336) {
      var i_19338 = card_idx_19337 * gin.ui.animator.FIELD_COUNT;
      if (cljs.core.truth_(gin.ui.animator.a[i_19338 + gin.ui.animator.DRAW])) {
        gin.ui.animator.a[gin.ui.animator.DO_DRAW] = 1;
        var el_19339 = gin.ui.animator.a[i_19338 + gin.ui.animator.EL];
        var vec__19334_19340 = gin.ui.animator.a[i_19338 + gin.ui.animator.START];
        var start_x_19341 = cljs.core.nth.call(null, vec__19334_19340, 0, null);
        var start_y_19342 = cljs.core.nth.call(null, vec__19334_19340, 1, null);
        var vec__19335_19343 = gin.ui.animator.a[i_19338 + gin.ui.animator.TO];
        var x_19344 = cljs.core.nth.call(null, vec__19335_19343, 0, null);
        var y_19345 = cljs.core.nth.call(null, vec__19335_19343, 1, null);
        var to_19346 = vec__19335_19343;
        var step_19347 = gin.ui.animator.a[i_19338 + gin.ui.animator.STEP] - 1;
        var dx_19348 = gin.ui.animator.a[i_19338 + gin.ui.animator.DX];
        var dy_19349 = gin.ui.animator.a[i_19338 + gin.ui.animator.DY];
        var steps_19350 = gin.ui.animator.a[i_19338 + gin.ui.animator.STEPS];
        var nx_19351 = cljs.core.long$.call(null, start_x_19341 + (steps_19350 - step_19347) * dx_19348);
        var ny_19352 = cljs.core.long$.call(null, start_y_19342 + (steps_19350 - step_19347) * dy_19349);
        gin.ui.dom_helpers.set_position.call(null, el_19339, nx_19351, ny_19352);
        gin.ui.animator.a[i_19338 + gin.ui.animator.STEP] = step_19347;
        if (cljs.core._EQ_.call(null, x_19344, nx_19351) && cljs.core._EQ_.call(null, y_19345, ny_19352) || (step_19347 === 0 || dx_19348 === 0 && dy_19349 === 0)) {
          gin.ui.animator.a[i_19338 + gin.ui.animator.STEP] = 0;
          gin.ui.animator.a[i_19338 + gin.ui.animator.DRAW] = false;
          var finish_19353 = gin.ui.animator.a[i_19338 + gin.ui.animator.FINISH];
          if (cljs.core.fn_QMARK_.call(null, finish_19353)) {
            gin.ui.dom_helpers.set_timeout.call(null, finish_19353, 0);
          } else {
          }
        } else {
        }
      } else {
      }
      var G__19354 = card_idx_19337 + 1;
      card_idx_19337 = G__19354;
      continue;
    } else {
    }
    break;
  }
  if (cljs.core._EQ_.call(null, 1, gin.ui.animator.a[gin.ui.animator.DO_DRAW])) {
    return gin.ui.dom_helpers.set_timeout.call(null, anim_loop, 10);
  } else {
    return cljs.core.reset_BANG_.call(null, gin.ui.animator.running, false);
  }
};
gin.ui.animator.animate = function animate() {
  if (cljs.core.compare_and_set_BANG_.call(null, gin.ui.animator.running, false, true)) {
    return gin.ui.animator.anim_loop.call(null);
  } else {
    return null;
  }
};
gin.ui.animator.slide = function() {
  var slide__delegate = function(el, to, p__19355) {
    var vec__19359 = p__19355;
    var finish = cljs.core.nth.call(null, vec__19359, 0, null);
    var idx = el.anim_idx;
    var i = idx * gin.ui.animator.FIELD_COUNT;
    var vec__19360 = gin.ui.dom_helpers.get_position.call(null, el);
    var from_x = cljs.core.nth.call(null, vec__19360, 0, null);
    var from_y = cljs.core.nth.call(null, vec__19360, 1, null);
    var from = vec__19360;
    var vec__19361 = to;
    var to_x = cljs.core.nth.call(null, vec__19361, 0, null);
    var to_y = cljs.core.nth.call(null, vec__19361, 1, null);
    var step = gin.ui.animator.a[i + gin.ui.animator.STEP];
    var steps = step > 0 ? step : 30;
    var dx = (to_x - from_x) / steps;
    var dy = (to_y - from_y) / steps;
    gin.ui.animator.a[i] = el;
    gin.ui.animator.a[i + gin.ui.animator.START] = from;
    gin.ui.animator.a[i + gin.ui.animator.DRAW] = true;
    gin.ui.animator.a[i + gin.ui.animator.TO] = to;
    gin.ui.animator.a[i + gin.ui.animator.STEP] = steps;
    gin.ui.animator.a[i + gin.ui.animator.STEPS] = steps;
    gin.ui.animator.a[i + gin.ui.animator.DX] = dx;
    gin.ui.animator.a[i + gin.ui.animator.DY] = dy;
    gin.ui.animator.a[i + gin.ui.animator.FINISH] = finish;
    gin.ui.animator.a[gin.ui.animator.DO_DRAW] = 1;
    return gin.ui.animator.animate.call(null);
  };
  var slide = function(el, to, var_args) {
    var p__19355 = null;
    if (arguments.length > 2) {
      p__19355 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return slide__delegate.call(this, el, to, p__19355);
  };
  slide.cljs$lang$maxFixedArity = 2;
  slide.cljs$lang$applyTo = function(arglist__19362) {
    var el = cljs.core.first(arglist__19362);
    arglist__19362 = cljs.core.next(arglist__19362);
    var to = cljs.core.first(arglist__19362);
    var p__19355 = cljs.core.rest(arglist__19362);
    return slide__delegate(el, to, p__19355);
  };
  slide.cljs$core$IFn$_invoke$arity$variadic = slide__delegate;
  return slide;
}();
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.array");
goog.require("goog.events");
goog.require("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_handler) {
  goog.Disposable.call(this);
  this.handler_ = opt_handler;
  this.keys_ = [];
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (!goog.isArray(type)) {
    goog.events.EventHandler.typeArray_[0] = (type);
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var key = (goog.events.listen(src, type[i], opt_fn || this, opt_capture || false, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var key = (goog.events.listenOnce(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  return this.keys_.length;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this));
    if (listener) {
      var key = listener.key;
      goog.events.unlistenByKey(key);
      goog.array.remove(this.keys_, key);
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.array.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_.length = 0;
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.fx.DragEvent");
goog.provide("goog.fx.Dragger");
goog.provide("goog.fx.Dragger.EventType");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.style");
goog.require("goog.style.bidi");
goog.require("goog.userAgent");
goog.fx.Dragger = function(target, opt_handle, opt_limits) {
  goog.events.EventTarget.call(this);
  this.target = target;
  this.handle = opt_handle || target;
  this.limits = opt_limits || new goog.math.Rect(NaN, NaN, NaN, NaN);
  this.document_ = goog.dom.getOwnerDocument(target);
  this.eventHandler_ = new goog.events.EventHandler(this);
  goog.events.listen(this.handle, [goog.events.EventType.TOUCHSTART, goog.events.EventType.MOUSEDOWN], this.startDrag, false, this);
};
goog.inherits(goog.fx.Dragger, goog.events.EventTarget);
goog.fx.Dragger.HAS_SET_CAPTURE_ = goog.userAgent.IE || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.3");
goog.fx.Dragger.EventType = {EARLY_CANCEL:"earlycancel", START:"start", BEFOREDRAG:"beforedrag", DRAG:"drag", END:"end"};
goog.fx.Dragger.prototype.target;
goog.fx.Dragger.prototype.handle;
goog.fx.Dragger.prototype.limits;
goog.fx.Dragger.prototype.rightToLeft_;
goog.fx.Dragger.prototype.clientX = 0;
goog.fx.Dragger.prototype.clientY = 0;
goog.fx.Dragger.prototype.screenX = 0;
goog.fx.Dragger.prototype.screenY = 0;
goog.fx.Dragger.prototype.startX = 0;
goog.fx.Dragger.prototype.startY = 0;
goog.fx.Dragger.prototype.deltaX = 0;
goog.fx.Dragger.prototype.deltaY = 0;
goog.fx.Dragger.prototype.pageScroll;
goog.fx.Dragger.prototype.enabled_ = true;
goog.fx.Dragger.prototype.dragging_ = false;
goog.fx.Dragger.prototype.hysteresisDistanceSquared_ = 0;
goog.fx.Dragger.prototype.mouseDownTime_ = 0;
goog.fx.Dragger.prototype.document_;
goog.fx.Dragger.prototype.eventHandler_;
goog.fx.Dragger.prototype.scrollTarget_;
goog.fx.Dragger.prototype.ieDragStartCancellingOn_ = false;
goog.fx.Dragger.prototype.useRightPositioningForRtl_ = false;
goog.fx.Dragger.prototype.enableRightPositioningForRtl = function(useRightPositioningForRtl) {
  this.useRightPositioningForRtl_ = useRightPositioningForRtl;
};
goog.fx.Dragger.prototype.getHandler = function() {
  return this.eventHandler_;
};
goog.fx.Dragger.prototype.setLimits = function(limits) {
  this.limits = limits || new goog.math.Rect(NaN, NaN, NaN, NaN);
};
goog.fx.Dragger.prototype.setHysteresis = function(distance) {
  this.hysteresisDistanceSquared_ = Math.pow(distance, 2);
};
goog.fx.Dragger.prototype.getHysteresis = function() {
  return Math.sqrt(this.hysteresisDistanceSquared_);
};
goog.fx.Dragger.prototype.setScrollTarget = function(scrollTarget) {
  this.scrollTarget_ = scrollTarget;
};
goog.fx.Dragger.prototype.setCancelIeDragStart = function(cancelIeDragStart) {
  this.ieDragStartCancellingOn_ = cancelIeDragStart;
};
goog.fx.Dragger.prototype.getEnabled = function() {
  return this.enabled_;
};
goog.fx.Dragger.prototype.setEnabled = function(enabled) {
  this.enabled_ = enabled;
};
goog.fx.Dragger.prototype.disposeInternal = function() {
  goog.fx.Dragger.superClass_.disposeInternal.call(this);
  goog.events.unlisten(this.handle, [goog.events.EventType.TOUCHSTART, goog.events.EventType.MOUSEDOWN], this.startDrag, false, this);
  this.cleanUpAfterDragging_();
  this.target = null;
  this.handle = null;
  this.eventHandler_ = null;
};
goog.fx.Dragger.prototype.isRightToLeft_ = function() {
  if (!goog.isDef(this.rightToLeft_)) {
    this.rightToLeft_ = goog.style.isRightToLeft(this.target);
  }
  return this.rightToLeft_;
};
goog.fx.Dragger.prototype.startDrag = function(e) {
  var isMouseDown = e.type == goog.events.EventType.MOUSEDOWN;
  if (this.enabled_ && (!this.dragging_ && (!isMouseDown || e.isMouseActionButton()))) {
    this.maybeReinitTouchEvent_(e);
    if (this.hysteresisDistanceSquared_ == 0) {
      if (this.fireDragStart_(e)) {
        this.dragging_ = true;
        e.preventDefault();
      } else {
        return;
      }
    } else {
      e.preventDefault();
    }
    this.setupDragHandlers();
    this.clientX = this.startX = e.clientX;
    this.clientY = this.startY = e.clientY;
    this.screenX = e.screenX;
    this.screenY = e.screenY;
    this.deltaX = this.useRightPositioningForRtl_ ? goog.style.bidi.getOffsetStart(this.target) : this.target.offsetLeft;
    this.deltaY = this.target.offsetTop;
    this.pageScroll = goog.dom.getDomHelper(this.document_).getDocumentScroll();
    this.mouseDownTime_ = goog.now();
  } else {
    this.dispatchEvent(goog.fx.Dragger.EventType.EARLY_CANCEL);
  }
};
goog.fx.Dragger.prototype.setupDragHandlers = function() {
  var doc = this.document_;
  var docEl = doc.documentElement;
  var useCapture = !goog.fx.Dragger.HAS_SET_CAPTURE_;
  this.eventHandler_.listen(doc, [goog.events.EventType.TOUCHMOVE, goog.events.EventType.MOUSEMOVE], this.handleMove_, useCapture);
  this.eventHandler_.listen(doc, [goog.events.EventType.TOUCHEND, goog.events.EventType.MOUSEUP], this.endDrag, useCapture);
  if (goog.fx.Dragger.HAS_SET_CAPTURE_) {
    docEl.setCapture(false);
    this.eventHandler_.listen(docEl, goog.events.EventType.LOSECAPTURE, this.endDrag);
  } else {
    this.eventHandler_.listen(goog.dom.getWindow(doc), goog.events.EventType.BLUR, this.endDrag);
  }
  if (goog.userAgent.IE && this.ieDragStartCancellingOn_) {
    this.eventHandler_.listen(doc, goog.events.EventType.DRAGSTART, goog.events.Event.preventDefault);
  }
  if (this.scrollTarget_) {
    this.eventHandler_.listen(this.scrollTarget_, goog.events.EventType.SCROLL, this.onScroll_, useCapture);
  }
};
goog.fx.Dragger.prototype.fireDragStart_ = function(e) {
  return this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.START, this, e.clientX, e.clientY, e));
};
goog.fx.Dragger.prototype.cleanUpAfterDragging_ = function() {
  this.eventHandler_.removeAll();
  if (goog.fx.Dragger.HAS_SET_CAPTURE_) {
    this.document_.releaseCapture();
  }
};
goog.fx.Dragger.prototype.endDrag = function(e, opt_dragCanceled) {
  this.cleanUpAfterDragging_();
  if (this.dragging_) {
    this.maybeReinitTouchEvent_(e);
    this.dragging_ = false;
    var x = this.limitX(this.deltaX);
    var y = this.limitY(this.deltaY);
    var dragCanceled = opt_dragCanceled || e.type == goog.events.EventType.TOUCHCANCEL;
    this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.END, this, e.clientX, e.clientY, e, x, y, dragCanceled));
  } else {
    this.dispatchEvent(goog.fx.Dragger.EventType.EARLY_CANCEL);
  }
  if (e.type == goog.events.EventType.TOUCHEND || e.type == goog.events.EventType.TOUCHCANCEL) {
    e.preventDefault();
  }
};
goog.fx.Dragger.prototype.endDragCancel = function(e) {
  this.endDrag(e, true);
};
goog.fx.Dragger.prototype.maybeReinitTouchEvent_ = function(e) {
  var type = e.type;
  if (type == goog.events.EventType.TOUCHSTART || type == goog.events.EventType.TOUCHMOVE) {
    e.init(e.getBrowserEvent().targetTouches[0], e.currentTarget);
  } else {
    if (type == goog.events.EventType.TOUCHEND || type == goog.events.EventType.TOUCHCANCEL) {
      e.init(e.getBrowserEvent().changedTouches[0], e.currentTarget);
    }
  }
};
goog.fx.Dragger.prototype.handleMove_ = function(e) {
  if (this.enabled_) {
    this.maybeReinitTouchEvent_(e);
    var sign = this.useRightPositioningForRtl_ && this.isRightToLeft_() ? -1 : 1;
    var dx = sign * (e.clientX - this.clientX);
    var dy = e.clientY - this.clientY;
    this.clientX = e.clientX;
    this.clientY = e.clientY;
    this.screenX = e.screenX;
    this.screenY = e.screenY;
    if (!this.dragging_) {
      var diffX = this.startX - this.clientX;
      var diffY = this.startY - this.clientY;
      var distance = diffX * diffX + diffY * diffY;
      if (distance > this.hysteresisDistanceSquared_) {
        if (this.fireDragStart_(e)) {
          this.dragging_ = true;
        } else {
          if (!this.isDisposed()) {
            this.endDrag(e);
          }
          return;
        }
      }
    }
    var pos = this.calculatePosition_(dx, dy);
    var x = pos.x;
    var y = pos.y;
    if (this.dragging_) {
      var rv = this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.BEFOREDRAG, this, e.clientX, e.clientY, e, x, y));
      if (rv) {
        this.doDrag(e, x, y, false);
        e.preventDefault();
      }
    }
  }
};
goog.fx.Dragger.prototype.calculatePosition_ = function(dx, dy) {
  var pageScroll = goog.dom.getDomHelper(this.document_).getDocumentScroll();
  dx += pageScroll.x - this.pageScroll.x;
  dy += pageScroll.y - this.pageScroll.y;
  this.pageScroll = pageScroll;
  this.deltaX += dx;
  this.deltaY += dy;
  var x = this.limitX(this.deltaX);
  var y = this.limitY(this.deltaY);
  return new goog.math.Coordinate(x, y);
};
goog.fx.Dragger.prototype.onScroll_ = function(e) {
  var pos = this.calculatePosition_(0, 0);
  e.clientX = this.clientX;
  e.clientY = this.clientY;
  this.doDrag(e, pos.x, pos.y, true);
};
goog.fx.Dragger.prototype.doDrag = function(e, x, y, dragFromScroll) {
  this.defaultAction(x, y);
  this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.DRAG, this, e.clientX, e.clientY, e, x, y));
};
goog.fx.Dragger.prototype.limitX = function(x) {
  var rect = this.limits;
  var left = !isNaN(rect.left) ? rect.left : null;
  var width = !isNaN(rect.width) ? rect.width : 0;
  var maxX = left != null ? left + width : Infinity;
  var minX = left != null ? left : -Infinity;
  return Math.min(maxX, Math.max(minX, x));
};
goog.fx.Dragger.prototype.limitY = function(y) {
  var rect = this.limits;
  var top = !isNaN(rect.top) ? rect.top : null;
  var height = !isNaN(rect.height) ? rect.height : 0;
  var maxY = top != null ? top + height : Infinity;
  var minY = top != null ? top : -Infinity;
  return Math.min(maxY, Math.max(minY, y));
};
goog.fx.Dragger.prototype.defaultAction = function(x, y) {
  if (this.useRightPositioningForRtl_ && this.isRightToLeft_()) {
    this.target.style.right = x + "px";
  } else {
    this.target.style.left = x + "px";
  }
  this.target.style.top = y + "px";
};
goog.fx.Dragger.prototype.isDragging = function() {
  return this.dragging_;
};
goog.fx.DragEvent = function(type, dragobj, clientX, clientY, browserEvent, opt_actX, opt_actY, opt_dragCanceled) {
  goog.events.Event.call(this, type);
  this.clientX = clientX;
  this.clientY = clientY;
  this.browserEvent = browserEvent;
  this.left = goog.isDef(opt_actX) ? opt_actX : dragobj.deltaX;
  this.top = goog.isDef(opt_actY) ? opt_actY : dragobj.deltaY;
  this.dragger = dragobj;
  this.dragCanceled = !!opt_dragCanceled;
};
goog.inherits(goog.fx.DragEvent, goog.events.Event);
goog.provide("gin.ui.game_panel");
goog.require("cljs.core");
goog.require("goog.math");
goog.require("gin.transact");
goog.require("gin.transact");
goog.require("datascript");
goog.require("goog.events");
goog.require("gin.ui.dom_helpers");
goog.require("gin.ui.animator");
goog.require("gin.datascript_helpers");
goog.require("gin.ui.animator");
goog.require("datascript");
goog.require("goog.math");
goog.require("gin.ui.dom_helpers");
goog.require("goog.fx.Dragger");
goog.require("goog.events");
goog.require("gin.datascript_helpers");
goog.require("goog.fx.Dragger");
gin.ui.game_panel.set_msg = function set_msg(msg) {
  return gin.ui.dom_helpers.set_text.call(null, gin.ui.dom_helpers.get_element.call(null, "msg"), msg);
};
gin.ui.game_panel.in_rect = function in_rect(rect, p__24123) {
  var vec__24125 = p__24123;
  var x = cljs.core.nth.call(null, vec__24125, 0, null);
  var y = cljs.core.nth.call(null, vec__24125, 1, null);
  return x >= rect.left && (x <= rect.left + rect.width && (y >= rect.top && y <= rect.top + rect.height));
};
gin.ui.game_panel.in_our_region = function in_our_region(x, y) {
  var our_region_bounds = gin.ui.dom_helpers.get_bounds.call(null, gin.ui.dom_helpers.get_element.call(null, "our_region"));
  return gin.ui.game_panel.in_rect.call(null, our_region_bounds, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null));
};
gin.ui.game_panel.in_discard_pile = function in_discard_pile(x, y) {
  var discard_bounds = gin.ui.dom_helpers.get_bounds.call(null, gin.ui.dom_helpers.get_element.call(null, "discard_pile"));
  return gin.ui.game_panel.in_rect.call(null, discard_bounds, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null));
};
gin.ui.game_panel.pile_position = function pile_position() {
  var vec__24127 = gin.ui.dom_helpers.get_position.call(null, gin.ui.dom_helpers.get_element.call(null, "pile"));
  var x = cljs.core.nth.call(null, vec__24127, 0, null);
  var y = cljs.core.nth.call(null, vec__24127, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x + 4, y + 4], null);
};
gin.ui.game_panel.discard_position = function discard_position() {
  var vec__24129 = gin.ui.dom_helpers.get_position.call(null, gin.ui.dom_helpers.get_element.call(null, "discard_pile"));
  var x = cljs.core.nth.call(null, vec__24129, 0, null);
  var y = cljs.core.nth.call(null, vec__24129, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [12 + x, 12 + y], null);
};
gin.ui.game_panel.their_region_position = function their_region_position() {
  var vec__24131 = gin.ui.dom_helpers.get_position.call(null, gin.ui.dom_helpers.get_element.call(null, "their_region"));
  var x = cljs.core.nth.call(null, vec__24131, 0, null);
  var y = cljs.core.nth.call(null, vec__24131, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [10 + x, 10 + y], null);
};
gin.ui.game_panel.our_region_position = function our_region_position() {
  var vec__24133 = gin.ui.dom_helpers.get_position.call(null, gin.ui.dom_helpers.get_element.call(null, "our_region"));
  var x = cljs.core.nth.call(null, vec__24133, 0, null);
  var y = cljs.core.nth.call(null, vec__24133, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [10 + x, 10 + y], null);
};
gin.ui.game_panel.set_drag_handler = function set_drag_handler(card_el, handler) {
  var cursor = (new cljs.core.Keyword(null, "cursor", "cursor", 3959752392)).cljs$core$IFn$_invoke$arity$1(handler);
  if (cljs.core._EQ_.call(null, cursor, new cljs.core.Keyword(null, "hand", "hand", 1017099233))) {
    gin.ui.dom_helpers.add_class.call(null, card_el, "cursor_hand");
  } else {
    gin.ui.dom_helpers.remove_class.call(null, card_el, "cursor_hand");
  }
  return card_el.drag_handler = handler;
};
gin.ui.game_panel.undraggable_handler = function undraggable_handler(conn) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), new cljs.core.Keyword(null, "none", "none", 1017291434), new cljs.core.Keyword(null, "drag-start", "drag-start", 2816557563), function(card_id, event) {
    return event.preventDefault();
  }, new cljs.core.Keyword(null, "drag", "drag", 1016996006), function(card_id, event) {
    return null;
  }, new cljs.core.Keyword(null, "drag-end", "drag-end", 4466041908), function(card_id, event) {
    return null;
  }], null);
};
gin.ui.game_panel.pile_pick_handler = function pile_pick_handler(conn) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), new cljs.core.Keyword(null, "hand", "hand", 1017099233), new cljs.core.Keyword(null, "drag-start", "drag-start", 2816557563), function(card_id, event) {
    return event.preventDefault();
  }, new cljs.core.Keyword(null, "drag", "drag", 1016996006), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    var vec__24135 = gin.ui.dom_helpers.get_position.call(null, card_el);
    var x = cljs.core.nth.call(null, vec__24135, 0, null);
    var y = cljs.core.nth.call(null, vec__24135, 1, null);
    if (gin.ui.game_panel.in_our_region.call(null, x, y)) {
      return null;
    } else {
      gin.ui.game_panel.set_drag_handler.call(null, card_el, gin.ui.game_panel.pile_drag_handler.call(null, conn));
      return gin.ui.dom_helpers.remove_class.call(null, gin.ui.dom_helpers.get_element.call(null, "our_region"), "region_hover");
    }
  }, new cljs.core.Keyword(null, "drag-end", "drag-end", 4466041908), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    gin.ui.dom_helpers.add_remove_class.call(null, card_el, "cursor_hand", "cursor_drag");
    gin.ui.dom_helpers.remove_class.call(null, gin.ui.dom_helpers.get_element.call(null, "our_region"), "region_hover");
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.our_pile_picked, card_id], null)], null));
  }], null);
};
gin.ui.game_panel.pile_drag_handler = function pile_drag_handler(conn) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), new cljs.core.Keyword(null, "hand", "hand", 1017099233), new cljs.core.Keyword(null, "drag-start", "drag-start", 2816557563), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    gin.ui.dom_helpers.add_remove_class.call(null, card_el, "cursor_drag", "cursor_hand");
    return gin.ui.dom_helpers.show_on_top.call(null, card_el);
  }, new cljs.core.Keyword(null, "drag", "drag", 1016996006), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    var vec__24137 = gin.ui.dom_helpers.get_position.call(null, card_el);
    var x = cljs.core.nth.call(null, vec__24137, 0, null);
    var y = cljs.core.nth.call(null, vec__24137, 1, null);
    if (gin.ui.game_panel.in_our_region.call(null, x, y)) {
      gin.ui.game_panel.set_drag_handler.call(null, card_el, gin.ui.game_panel.pile_pick_handler.call(null, conn));
      return gin.ui.dom_helpers.add_class.call(null, gin.ui.dom_helpers.get_element.call(null, "our_region"), "region_hover");
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "drag-end", "drag-end", 4466041908), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    gin.ui.dom_helpers.add_remove_class.call(null, card_el, "cursor_hand", "cursor_drag");
    return gin.ui.animator.slide.call(null, card_el, gin.ui.game_panel.pile_position.call(null));
  }], null);
};
gin.ui.game_panel.home_region_handler = function home_region_handler(conn) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), new cljs.core.Keyword(null, "hand", "hand", 1017099233), new cljs.core.Keyword(null, "drag-start", "drag-start", 2816557563), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    gin.ui.dom_helpers.add_remove_class.call(null, gin.ui.dom_helpers.get_element.call(null, card_id), "cursor_drag", "cursor_hand");
    card_el.drag_origin = gin.ui.dom_helpers.get_position.call(null, card_el);
    return gin.ui.dom_helpers.show_on_top.call(null, card_el);
  }, new cljs.core.Keyword(null, "drag", "drag", 1016996006), function(card_id, event) {
    return null;
  }, new cljs.core.Keyword(null, "drag-end", "drag-end", 4466041908), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    var vec__24139 = gin.ui.dom_helpers.get_position.call(null, card_el);
    var x = cljs.core.nth.call(null, vec__24139, 0, null);
    var y = cljs.core.nth.call(null, vec__24139, 1, null);
    gin.ui.dom_helpers.add_remove_class.call(null, card_el, "cursor_hand", "cursor_drag");
    if (gin.ui.game_panel.in_our_region.call(null, x, y)) {
      return null;
    } else {
      return gin.ui.animator.slide.call(null, card_el, card_el.drag_origin);
    }
  }], null);
};
gin.ui.game_panel.discard_pick_handler = function discard_pick_handler(conn) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), new cljs.core.Keyword(null, "hand", "hand", 1017099233), new cljs.core.Keyword(null, "drag-start", "drag-start", 2816557563), function(card_id, event) {
    return event.preventDefault();
  }, new cljs.core.Keyword(null, "drag", "drag", 1016996006), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    var vec__24141 = gin.ui.dom_helpers.get_position.call(null, card_el);
    var x = cljs.core.nth.call(null, vec__24141, 0, null);
    var y = cljs.core.nth.call(null, vec__24141, 1, null);
    if (gin.ui.game_panel.in_our_region.call(null, x, y)) {
      return null;
    } else {
      gin.ui.game_panel.set_drag_handler.call(null, card_el, gin.ui.game_panel.discard_drag_handler.call(null, conn));
      return gin.ui.dom_helpers.remove_class.call(null, gin.ui.dom_helpers.get_element.call(null, "our_region"), "region_hover");
    }
  }, new cljs.core.Keyword(null, "drag-end", "drag-end", 4466041908), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    gin.ui.dom_helpers.add_remove_class.call(null, card_el, "cursor_hand", "cursor_drag");
    gin.ui.dom_helpers.remove_class.call(null, gin.ui.dom_helpers.get_element.call(null, "our_region"), "region_hover");
    gin.ui.game_panel.set_drag_handler.call(null, card_el, gin.ui.game_panel.home_region_handler.call(null, conn));
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.our_discard_picked, card_id], null)], null));
  }], null);
};
gin.ui.game_panel.discard_drag_handler = function discard_drag_handler(conn) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), new cljs.core.Keyword(null, "hand", "hand", 1017099233), new cljs.core.Keyword(null, "drag-start", "drag-start", 2816557563), function(card_id, event) {
    gin.ui.dom_helpers.add_remove_class.call(null, gin.ui.dom_helpers.get_element.call(null, card_id), "cursor_drag", "cursor_hand");
    return gin.ui.dom_helpers.show_on_top.call(null, gin.ui.dom_helpers.get_element.call(null, card_id));
  }, new cljs.core.Keyword(null, "drag", "drag", 1016996006), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    var vec__24143 = gin.ui.dom_helpers.get_position.call(null, card_el);
    var x = cljs.core.nth.call(null, vec__24143, 0, null);
    var y = cljs.core.nth.call(null, vec__24143, 1, null);
    if (gin.ui.game_panel.in_our_region.call(null, x, y)) {
      gin.ui.game_panel.set_drag_handler.call(null, card_el, gin.ui.game_panel.discard_pick_handler.call(null, conn));
      return gin.ui.dom_helpers.add_class.call(null, gin.ui.dom_helpers.get_element.call(null, "our_region"), "region_hover");
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "drag-end", "drag-end", 4466041908), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    gin.ui.dom_helpers.add_remove_class.call(null, card_el, "cursor_hand", "cursor_drag");
    return gin.ui.animator.slide.call(null, card_el, gin.ui.game_panel.discard_position.call(null));
  }], null);
};
gin.ui.game_panel.snap_to_discard_handler = function snap_to_discard_handler(conn) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), new cljs.core.Keyword(null, "hand", "hand", 1017099233), new cljs.core.Keyword(null, "drag-start", "drag-start", 2816557563), function(card_id, event) {
    return event.preventDefault();
  }, new cljs.core.Keyword(null, "drag", "drag", 1016996006), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    if (gin.ui.game_panel.in_discard_pile.call(null, event.clientX, event.clientY)) {
      return null;
    } else {
      gin.ui.game_panel.set_drag_handler.call(null, card_el, gin.ui.game_panel.home_discard_handler.call(null, conn));
      return gin.ui.dom_helpers.remove_class.call(null, gin.ui.dom_helpers.get_element.call(null, "discard_pile"), "region_hover");
    }
  }, new cljs.core.Keyword(null, "drag-end", "drag-end", 4466041908), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    gin.ui.dom_helpers.add_remove_class.call(null, card_el, "cursor_hand", "cursor_drag");
    gin.ui.dom_helpers.remove_class.call(null, gin.ui.dom_helpers.get_element.call(null, "discard_pile"), "region_hover");
    return gin.ui.animator.slide.call(null, card_el, gin.ui.game_panel.discard_position.call(null), function() {
      return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.our_discard_chosen, card_id], null)], null));
    });
  }], null);
};
gin.ui.game_panel.home_discard_handler = function home_discard_handler(conn) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), new cljs.core.Keyword(null, "hand", "hand", 1017099233), new cljs.core.Keyword(null, "drag-start", "drag-start", 2816557563), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    gin.ui.dom_helpers.add_remove_class.call(null, gin.ui.dom_helpers.get_element.call(null, card_id), "cursor_drag", "cursor_hand");
    card_el.drag_origin = gin.ui.dom_helpers.get_position.call(null, card_el);
    return gin.ui.dom_helpers.show_on_top.call(null, card_el);
  }, new cljs.core.Keyword(null, "drag", "drag", 1016996006), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    if (gin.ui.game_panel.in_discard_pile.call(null, event.clientX, event.clientY)) {
      gin.ui.dom_helpers.add_class.call(null, gin.ui.dom_helpers.get_element.call(null, "discard_pile"), "region_hover");
      return gin.ui.game_panel.set_drag_handler.call(null, card_el, gin.ui.game_panel.snap_to_discard_handler.call(null, conn));
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "drag-end", "drag-end", 4466041908), function(card_id, event) {
    var card_el = gin.ui.dom_helpers.get_element.call(null, card_id);
    var vec__24145 = gin.ui.dom_helpers.get_position.call(null, card_el);
    var x = cljs.core.nth.call(null, vec__24145, 0, null);
    var y = cljs.core.nth.call(null, vec__24145, 1, null);
    gin.ui.dom_helpers.add_remove_class.call(null, card_el, "cursor_hand", "cursor_drag");
    if (gin.ui.game_panel.in_our_region.call(null, x, y)) {
      return null;
    } else {
      return gin.ui.animator.slide.call(null, card_el, card_el.drag_origin);
    }
  }], null);
};
gin.ui.game_panel.draw_table = function draw_table(conn) {
  var G__24170_24194 = gin.ui.dom_helpers.get_element.call(null, "game-panel");
  gin.ui.dom_helpers.append.call(null, G__24170_24194, gin.ui.dom_helpers.build.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "table"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 
  2, [new cljs.core.Keyword(null, "id", "id", 1013907597), "their_region", new cljs.core.Keyword(null, "class", "class", 1108647146), "region their_region"], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.pile_row", "div.pile_row", 1891661180), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.pile", "div.pile", 1324047329), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "pile"], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.discard_pile", "div.discard_pile", 3988861410), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "discard_pile"], null)], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", 
  "div", 1014003715), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), "our_region", new cljs.core.Keyword(null, "class", "class", 1108647146), "region our_region"], null)], null)], null)));
  gin.ui.dom_helpers.append.call(null, G__24170_24194, gin.ui.dom_helpers.build.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.msg", "div.msg", 2686474262), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "msg"], null)], null)));
  gin.ui.dom_helpers.append.call(null, G__24170_24194, gin.ui.dom_helpers.build.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", 1108647146), [cljs.core.str("offscreen_loading card card_back")].join("")], null)], null)));
  var container_wrap = function() {
    var r = gin.ui.dom_helpers.get_bounds.call(null, gin.ui.dom_helpers.get_element.call(null, "game-panel"));
    return new goog.math.Rect(r.left, r.top, r.width - 81, r.height - 96 - 37);
  }();
  var vec__24171 = gin.ui.game_panel.pile_position.call(null);
  var pile_x = cljs.core.nth.call(null, vec__24171, 0, null);
  var pile_y = cljs.core.nth.call(null, vec__24171, 1, null);
  var cards = function() {
    var iter__17431__auto__ = function(container_wrap, vec__24171, pile_x, pile_y) {
      return function iter__24172(s__24173) {
        return new cljs.core.LazySeq(null, function(container_wrap, vec__24171, pile_x, pile_y) {
          return function() {
            var s__24173__$1 = s__24173;
            while (true) {
              var temp__4092__auto__ = cljs.core.seq.call(null, s__24173__$1);
              if (temp__4092__auto__) {
                var s__24173__$2 = temp__4092__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__24173__$2)) {
                  var c__17429__auto__ = cljs.core.chunk_first.call(null, s__24173__$2);
                  var size__17430__auto__ = cljs.core.count.call(null, c__17429__auto__);
                  var b__24175 = cljs.core.chunk_buffer.call(null, size__17430__auto__);
                  if (function() {
                    var i__24174 = 0;
                    while (true) {
                      if (i__24174 < size__17430__auto__) {
                        var i = cljs.core._nth.call(null, c__17429__auto__, i__24174);
                        cljs.core.chunk_append.call(null, b__24175, function() {
                          var card_id = [cljs.core.str("card-"), cljs.core.str(i)].join("");
                          var card_el = gin.ui.dom_helpers.element.call(null, new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), card_id, new cljs.core.Keyword(null, "class", "class", 1108647146), "card card_back"], null));
                          var dragger = function() {
                            var G__24178 = new goog.fx.Dragger(card_el);
                            G__24178.setLimits(container_wrap);
                            return G__24178;
                          }();
                          card_el.dispose = function(i__24174, card_id, card_el, dragger, i, c__17429__auto__, size__17430__auto__, b__24175, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y) {
                            return function() {
                              return dragger.dispose;
                            };
                          }(i__24174, card_id, card_el, dragger, i, c__17429__auto__, size__17430__auto__, b__24175, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y);
                          gin.ui.game_panel.set_drag_handler.call(null, card_el, gin.ui.game_panel.undraggable_handler.call(null, conn));
                          goog.events.listen(dragger, goog.fx.Dragger.EventType.START, function(i__24174, card_id, card_el, dragger, i, c__17429__auto__, size__17430__auto__, b__24175, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y) {
                            return function(event) {
                              return(new cljs.core.Keyword(null, "drag-start", "drag-start", 2816557563)).cljs$core$IFn$_invoke$arity$1(card_el.drag_handler).call(null, card_id, event);
                            };
                          }(i__24174, card_id, card_el, dragger, i, c__17429__auto__, size__17430__auto__, b__24175, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y));
                          goog.events.listen(dragger, goog.fx.Dragger.EventType.DRAG, function(i__24174, card_id, card_el, dragger, i, c__17429__auto__, size__17430__auto__, b__24175, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y) {
                            return function(event) {
                              return(new cljs.core.Keyword(null, "drag", "drag", 1016996006)).cljs$core$IFn$_invoke$arity$1(card_el.drag_handler).call(null, card_id, event);
                            };
                          }(i__24174, card_id, card_el, dragger, i, c__17429__auto__, size__17430__auto__, b__24175, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y));
                          goog.events.listen(dragger, goog.fx.Dragger.EventType.END, function(i__24174, card_id, card_el, dragger, i, c__17429__auto__, size__17430__auto__, b__24175, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y) {
                            return function(event) {
                              return(new cljs.core.Keyword(null, "drag-end", "drag-end", 4466041908)).cljs$core$IFn$_invoke$arity$1(card_el.drag_handler).call(null, card_id, event);
                            };
                          }(i__24174, card_id, card_el, dragger, i, c__17429__auto__, size__17430__auto__, b__24175, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y));
                          return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", 1013907597), card_id, new cljs.core.Keyword(null, "idx", "idx", 1014008367), i, new cljs.core.Keyword(null, "card-el", "card-el", 1567790070), card_el], null);
                        }());
                        var G__24195 = i__24174 + 1;
                        i__24174 = G__24195;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__24175), iter__24172.call(null, cljs.core.chunk_rest.call(null, s__24173__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__24175), null);
                  }
                } else {
                  var i = cljs.core.first.call(null, s__24173__$2);
                  return cljs.core.cons.call(null, function() {
                    var card_id = [cljs.core.str("card-"), cljs.core.str(i)].join("");
                    var card_el = gin.ui.dom_helpers.element.call(null, new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), card_id, new cljs.core.Keyword(null, "class", "class", 1108647146), "card card_back"], null));
                    var dragger = function() {
                      var G__24179 = new goog.fx.Dragger(card_el);
                      G__24179.setLimits(container_wrap);
                      return G__24179;
                    }();
                    card_el.dispose = function(card_id, card_el, dragger, i, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y) {
                      return function() {
                        return dragger.dispose;
                      };
                    }(card_id, card_el, dragger, i, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y);
                    gin.ui.game_panel.set_drag_handler.call(null, card_el, gin.ui.game_panel.undraggable_handler.call(null, conn));
                    goog.events.listen(dragger, goog.fx.Dragger.EventType.START, function(card_id, card_el, dragger, i, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y) {
                      return function(event) {
                        return(new cljs.core.Keyword(null, "drag-start", "drag-start", 2816557563)).cljs$core$IFn$_invoke$arity$1(card_el.drag_handler).call(null, card_id, event);
                      };
                    }(card_id, card_el, dragger, i, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y));
                    goog.events.listen(dragger, goog.fx.Dragger.EventType.DRAG, function(card_id, card_el, dragger, i, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y) {
                      return function(event) {
                        return(new cljs.core.Keyword(null, "drag", "drag", 1016996006)).cljs$core$IFn$_invoke$arity$1(card_el.drag_handler).call(null, card_id, event);
                      };
                    }(card_id, card_el, dragger, i, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y));
                    goog.events.listen(dragger, goog.fx.Dragger.EventType.END, function(card_id, card_el, dragger, i, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y) {
                      return function(event) {
                        return(new cljs.core.Keyword(null, "drag-end", "drag-end", 4466041908)).cljs$core$IFn$_invoke$arity$1(card_el.drag_handler).call(null, card_id, event);
                      };
                    }(card_id, card_el, dragger, i, s__24173__$2, temp__4092__auto__, container_wrap, vec__24171, pile_x, pile_y));
                    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", 1013907597), card_id, new cljs.core.Keyword(null, "idx", "idx", 1014008367), i, new cljs.core.Keyword(null, "card-el", "card-el", 1567790070), card_el], null);
                  }(), iter__24172.call(null, cljs.core.rest.call(null, s__24173__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(container_wrap, vec__24171, pile_x, pile_y), null, null);
      };
    }(container_wrap, vec__24171, pile_x, pile_y);
    return iter__17431__auto__.call(null, cljs.core.range.call(null, 52));
  }();
  var seq__24180_24196 = cljs.core.seq.call(null, cards);
  var chunk__24181_24197 = null;
  var count__24182_24198 = 0;
  var i__24183_24199 = 0;
  while (true) {
    if (i__24183_24199 < count__24182_24198) {
      var map__24184_24200 = cljs.core._nth.call(null, chunk__24181_24197, i__24183_24199);
      var map__24184_24201__$1 = cljs.core.seq_QMARK_.call(null, map__24184_24200) ? cljs.core.apply.call(null, cljs.core.hash_map, map__24184_24200) : map__24184_24200;
      var idx_24202 = cljs.core.get.call(null, map__24184_24201__$1, new cljs.core.Keyword(null, "idx", "idx", 1014008367));
      var card_el_24203 = cljs.core.get.call(null, map__24184_24201__$1, new cljs.core.Keyword(null, "card-el", "card-el", 1567790070));
      card_el_24203.anim_idx = idx_24202;
      gin.ui.dom_helpers.append.call(null, gin.ui.dom_helpers.get_element.call(null, "pile"), card_el_24203);
      var G__24204 = seq__24180_24196;
      var G__24205 = chunk__24181_24197;
      var G__24206 = count__24182_24198;
      var G__24207 = i__24183_24199 + 1;
      seq__24180_24196 = G__24204;
      chunk__24181_24197 = G__24205;
      count__24182_24198 = G__24206;
      i__24183_24199 = G__24207;
      continue;
    } else {
      var temp__4092__auto___24208 = cljs.core.seq.call(null, seq__24180_24196);
      if (temp__4092__auto___24208) {
        var seq__24180_24209__$1 = temp__4092__auto___24208;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__24180_24209__$1)) {
          var c__17462__auto___24210 = cljs.core.chunk_first.call(null, seq__24180_24209__$1);
          var G__24211 = cljs.core.chunk_rest.call(null, seq__24180_24209__$1);
          var G__24212 = c__17462__auto___24210;
          var G__24213 = cljs.core.count.call(null, c__17462__auto___24210);
          var G__24214 = 0;
          seq__24180_24196 = G__24211;
          chunk__24181_24197 = G__24212;
          count__24182_24198 = G__24213;
          i__24183_24199 = G__24214;
          continue;
        } else {
          var map__24185_24215 = cljs.core.first.call(null, seq__24180_24209__$1);
          var map__24185_24216__$1 = cljs.core.seq_QMARK_.call(null, map__24185_24215) ? cljs.core.apply.call(null, cljs.core.hash_map, map__24185_24215) : map__24185_24215;
          var idx_24217 = cljs.core.get.call(null, map__24185_24216__$1, new cljs.core.Keyword(null, "idx", "idx", 1014008367));
          var card_el_24218 = cljs.core.get.call(null, map__24185_24216__$1, new cljs.core.Keyword(null, "card-el", "card-el", 1567790070));
          card_el_24218.anim_idx = idx_24217;
          gin.ui.dom_helpers.append.call(null, gin.ui.dom_helpers.get_element.call(null, "pile"), card_el_24218);
          var G__24219 = cljs.core.next.call(null, seq__24180_24209__$1);
          var G__24220 = null;
          var G__24221 = 0;
          var G__24222 = 0;
          seq__24180_24196 = G__24219;
          chunk__24181_24197 = G__24220;
          count__24182_24198 = G__24221;
          i__24183_24199 = G__24222;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return datascript.transact_BANG_.call(null, conn, function() {
    var iter__17431__auto__ = function iter__24186(s__24187) {
      return new cljs.core.LazySeq(null, function() {
        var s__24187__$1 = s__24187;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__24187__$1);
          if (temp__4092__auto__) {
            var s__24187__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__24187__$2)) {
              var c__17429__auto__ = cljs.core.chunk_first.call(null, s__24187__$2);
              var size__17430__auto__ = cljs.core.count.call(null, c__17429__auto__);
              var b__24189 = cljs.core.chunk_buffer.call(null, size__17430__auto__);
              if (function() {
                var i__24188 = 0;
                while (true) {
                  if (i__24188 < size__17430__auto__) {
                    var map__24192 = cljs.core._nth.call(null, c__17429__auto__, i__24188);
                    var map__24192__$1 = cljs.core.seq_QMARK_.call(null, map__24192) ? cljs.core.apply.call(null, cljs.core.hash_map, map__24192) : map__24192;
                    var card_el = cljs.core.get.call(null, map__24192__$1, new cljs.core.Keyword(null, "card-el", "card-el", 1567790070));
                    var idx = cljs.core.get.call(null, map__24192__$1, new cljs.core.Keyword(null, "idx", "idx", 1014008367));
                    var id = cljs.core.get.call(null, map__24192__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
                    cljs.core.chunk_append.call(null, b__24189, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -1 * idx, new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), id, new cljs.core.Keyword("dom", "el", "dom/el", 1020278571), card_el, new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092), new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), new cljs.core.Keyword(null, 
                    "hidden", "hidden", 4091384092)], null));
                    var G__24223 = i__24188 + 1;
                    i__24188 = G__24223;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__24189), iter__24186.call(null, cljs.core.chunk_rest.call(null, s__24187__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__24189), null);
              }
            } else {
              var map__24193 = cljs.core.first.call(null, s__24187__$2);
              var map__24193__$1 = cljs.core.seq_QMARK_.call(null, map__24193) ? cljs.core.apply.call(null, cljs.core.hash_map, map__24193) : map__24193;
              var card_el = cljs.core.get.call(null, map__24193__$1, new cljs.core.Keyword(null, "card-el", "card-el", 1567790070));
              var idx = cljs.core.get.call(null, map__24193__$1, new cljs.core.Keyword(null, "idx", "idx", 1014008367));
              var id = cljs.core.get.call(null, map__24193__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
              return cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -1 * idx, new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), id, new cljs.core.Keyword("dom", "el", "dom/el", 1020278571), card_el, new cljs.core.Keyword("card", "suit", "card/suit", 1215370835), new cljs.core.Keyword(null, "hidden", "hidden", 4091384092), new cljs.core.Keyword("card", "rank", "card/rank", 1215352178), new cljs.core.Keyword(null, 
              "hidden", "hidden", 4091384092)], null), iter__24186.call(null, cljs.core.rest.call(null, s__24187__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__17431__auto__.call(null, cards);
  }());
};
gin.ui.game_panel.anim_deal = function anim_deal(db, game_id, conn) {
  var game = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
  var opp_cards_el = cljs.core.map.call(null, cljs.core.comp.call(null, new cljs.core.Keyword("dom", "el", "dom/el", 1020278571), function(game) {
    return function(p1__24224_SHARP_) {
      return gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), p1__24224_SHARP_], null));
    };
  }(game)), (new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874)).cljs$core$IFn$_invoke$arity$1(game));
  var our_cards_es = cljs.core.map.call(null, function(game, opp_cards_el) {
    return function(p1__24225_SHARP_) {
      return gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), p1__24225_SHARP_], null));
    };
  }(game, opp_cards_el), (new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)).cljs$core$IFn$_invoke$arity$1(game));
  var discard = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), cljs.core.first.call(null, (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(game))], null));
  var vec__24236 = gin.ui.game_panel.their_region_position.call(null);
  var their_region_offset_x = cljs.core.nth.call(null, vec__24236, 0, null);
  var their_region_offset_y = cljs.core.nth.call(null, vec__24236, 1, null);
  var vec__24237 = gin.ui.game_panel.our_region_position.call(null);
  var our_region_offset_x = cljs.core.nth.call(null, vec__24237, 0, null);
  var our_region_offset_y = cljs.core.nth.call(null, vec__24237, 1, null);
  var their_deal = cljs.core.map.call(null, function(game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y) {
    return function(idx, el) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [el, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [their_region_offset_x + idx * 53, their_region_offset_y + idx * 4], null)], null);
    };
  }(game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y), cljs.core.range.call(null), opp_cards_el);
  var our_deal = cljs.core.map.call(null, function(game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal) {
    return function(idx, p__24239) {
      var map__24240 = p__24239;
      var map__24240__$1 = cljs.core.seq_QMARK_.call(null, map__24240) ? cljs.core.apply.call(null, cljs.core.hash_map, map__24240) : map__24240;
      var id = cljs.core.get.call(null, map__24240__$1, new cljs.core.Keyword("dom", "id", "dom/id", 1020278687));
      var el = cljs.core.get.call(null, map__24240__$1, new cljs.core.Keyword("dom", "el", "dom/el", 1020278571));
      var suit = cljs.core.get.call(null, map__24240__$1, new cljs.core.Keyword("card", "suit", "card/suit", 1215370835));
      var rank = cljs.core.get.call(null, map__24240__$1, new cljs.core.Keyword("card", "rank", "card/rank", 1215352178));
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [el, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [our_region_offset_x + idx * 53, our_region_offset_y + idx * 4], null), function(map__24240, map__24240__$1, id, el, suit, rank, game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal) {
        return function() {
          gin.ui.dom_helpers.set_card_class.call(null, el, [cljs.core.str(cljs.core.name.call(null, suit)), cljs.core.str("_"), cljs.core.str(cljs.core.name.call(null, rank))].join(""));
          return gin.ui.game_panel.set_drag_handler.call(null, el, gin.ui.game_panel.home_region_handler.call(null, conn));
        };
      }(map__24240, map__24240__$1, id, el, suit, rank, game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal)], null);
    };
  }(game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal), cljs.core.range.call(null), our_cards_es);
  var vec__24238 = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "starting", "starting", 2330710962)).cljs$core$IFn$_invoke$arity$1(game), (new cljs.core.Keyword(null, "us", "us", 1013907984)).cljs$core$IFn$_invoke$arity$1(game)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [our_deal, their_deal], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [their_deal, our_deal], null);
  var first_deal = cljs.core.nth.call(null, vec__24238, 0, null);
  var second_deal = cljs.core.nth.call(null, vec__24238, 1, null);
  var discard_deal = function() {
    var discard_el = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(discard);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [discard_el, gin.ui.game_panel.discard_position.call(null), function(discard_el, game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal, our_deal, vec__24238, first_deal, second_deal) {
      return function() {
        gin.ui.dom_helpers.set_card_class.call(null, discard_el, [cljs.core.str(cljs.core.name.call(null, (new cljs.core.Keyword("card", "suit", "card/suit", 1215370835)).cljs$core$IFn$_invoke$arity$1(discard))), cljs.core.str("_"), cljs.core.str(cljs.core.name.call(null, (new cljs.core.Keyword("card", "rank", "card/rank", 1215352178)).cljs$core$IFn$_invoke$arity$1(discard)))].join(""));
        return gin.ui.dom_helpers.set_timeout.call(null, function(discard_el, game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal, our_deal, vec__24238, first_deal, second_deal) {
          return function() {
            return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.player_ready, (new cljs.core.Keyword(null, "game-id", "game-id", 818249800)).cljs$core$IFn$_invoke$arity$1(game), (new cljs.core.Keyword(null, "us", "us", 1013907984)).cljs$core$IFn$_invoke$arity$1(game)], 
            null)], null));
          };
        }(discard_el, game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal, our_deal, vec__24238, first_deal, second_deal), 300);
      };
    }(discard_el, game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal, our_deal, vec__24238, first_deal, second_deal)], null);
  }();
  var actions = cljs.core.concat.call(null, first_deal, second_deal, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [discard_deal], null));
  var step = function(game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal, our_deal, vec__24238, first_deal, second_deal, discard_deal, actions) {
    return function step(p__24241) {
      var vec__24244 = p__24241;
      var action = cljs.core.nth.call(null, vec__24244, 0, null);
      var actions__$1 = cljs.core.nthnext.call(null, vec__24244, 1);
      if (cljs.core.truth_(action)) {
        var vec__24245 = action;
        var el = cljs.core.nth.call(null, vec__24245, 0, null);
        var to = cljs.core.nth.call(null, vec__24245, 1, null);
        var f = cljs.core.nth.call(null, vec__24245, 2, null);
        gin.ui.dom_helpers.show_on_top.call(null, el);
        return gin.ui.animator.slide.call(null, el, to, function(vec__24245, el, to, f, vec__24244, action, actions__$1, game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal, our_deal, vec__24238, first_deal, second_deal, discard_deal, actions) {
          return function() {
            if (cljs.core.truth_(f)) {
              f.call(null);
            } else {
            }
            return step.call(null, actions__$1);
          };
        }(vec__24245, el, to, f, vec__24244, action, actions__$1, game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal, our_deal, vec__24238, first_deal, second_deal, discard_deal, actions));
      } else {
        return null;
      }
    };
  }(game, opp_cards_el, our_cards_es, discard, vec__24236, their_region_offset_x, their_region_offset_y, vec__24237, our_region_offset_x, our_region_offset_y, their_deal, our_deal, vec__24238, first_deal, second_deal, discard_deal, actions);
  return step.call(null, actions);
};
gin.ui.game_panel.draw = function draw(db, game_id, conn) {
  var game = gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
  if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "starting", "starting", 2330710962)).cljs$core$IFn$_invoke$arity$1(game))) {
    return gin.ui.game_panel.set_msg.call(null, "Game created.");
  } else {
    if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "turn", "turn", 1017476079)).cljs$core$IFn$_invoke$arity$1(game)) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "ready", "ready", 1122290965)).cljs$core$IFn$_invoke$arity$1(game))) {
      gin.ui.game_panel.set_msg.call(null, "Dealing ...");
      return gin.ui.game_panel.anim_deal.call(null, db, game_id, conn);
    } else {
      if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "turn", "turn", 1017476079)).cljs$core$IFn$_invoke$arity$1(game)) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "result", "result", 4374444943)).cljs$core$IFn$_invoke$arity$1(game))) {
        return gin.ui.game_panel.set_msg.call(null, "Ready, waiting on opponent");
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var us_pick_card = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "us", "us", 1013907984)).cljs$core$IFn$_invoke$arity$1(game), (new cljs.core.Keyword(null, "turn", "turn", 1017476079)).cljs$core$IFn$_invoke$arity$1(game)) && (cljs.core._EQ_.call(null, 10, cljs.core.count.call(null, (new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)).cljs$core$IFn$_invoke$arity$1(game))) && (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "move", "move", 1017261891)).cljs$core$IFn$_invoke$arity$1(game), 
          new cljs.core.Keyword(null, "assigned", "assigned", 644022592)) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "result", "result", 4374444943)).cljs$core$IFn$_invoke$arity$1(game))));
          var our_cards_es = cljs.core.map.call(null, function(us_pick_card) {
            return function(p1__24246_SHARP_) {
              return gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), p1__24246_SHARP_], null));
            };
          }(us_pick_card), (new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)).cljs$core$IFn$_invoke$arity$1(game));
          var opp_cards_es = cljs.core.map.call(null, function(us_pick_card, our_cards_es) {
            return function(p1__24247_SHARP_) {
              return gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), p1__24247_SHARP_], null));
            };
          }(us_pick_card, our_cards_es), (new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874)).cljs$core$IFn$_invoke$arity$1(game));
          var pile_cards_es = cljs.core.map.call(null, function(us_pick_card, our_cards_es, opp_cards_es) {
            return function(p1__24248_SHARP_) {
              return gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), p1__24248_SHARP_], null));
            };
          }(us_pick_card, our_cards_es, opp_cards_es), (new cljs.core.Keyword(null, "pile", "pile", 1017345188)).cljs$core$IFn$_invoke$arity$1(game));
          var discard_cards_es = cljs.core.map.call(null, function(us_pick_card, our_cards_es, opp_cards_es, pile_cards_es) {
            return function(p1__24249_SHARP_) {
              return gin.datascript_helpers.entity_lookup.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dom", "id", "dom/id", 1020278687), p1__24249_SHARP_], null));
            };
          }(us_pick_card, our_cards_es, opp_cards_es, pile_cards_es), (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(game));
          var vec__24299 = gin.ui.game_panel.their_region_position.call(null);
          var their_region_offset_x = cljs.core.nth.call(null, vec__24299, 0, null);
          var their_region_offset_y = cljs.core.nth.call(null, vec__24299, 1, null);
          var vec__24300 = gin.ui.game_panel.our_region_position.call(null);
          var our_region_offset_x = cljs.core.nth.call(null, vec__24300, 0, null);
          var our_region_offset_y = cljs.core.nth.call(null, vec__24300, 1, null);
          var pile_position = gin.ui.game_panel.pile_position.call(null);
          var discard_position = gin.ui.game_panel.discard_position.call(null);
          var seq__24301_24348 = cljs.core.seq.call(null, pile_cards_es);
          var chunk__24303_24349 = null;
          var count__24304_24350 = 0;
          var i__24305_24351 = 0;
          while (true) {
            if (i__24305_24351 < count__24304_24350) {
              var pile_card_es_24352 = cljs.core._nth.call(null, chunk__24303_24349, i__24305_24351);
              var pile_card_el_24353 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(pile_card_es_24352);
              gin.ui.dom_helpers.set_card_class.call(null, pile_card_el_24353, "card_back");
              gin.ui.dom_helpers.show_on_top.call(null, pile_card_el_24353);
              gin.ui.animator.slide.call(null, pile_card_el_24353, pile_position);
              var G__24354 = seq__24301_24348;
              var G__24355 = chunk__24303_24349;
              var G__24356 = count__24304_24350;
              var G__24357 = i__24305_24351 + 1;
              seq__24301_24348 = G__24354;
              chunk__24303_24349 = G__24355;
              count__24304_24350 = G__24356;
              i__24305_24351 = G__24357;
              continue;
            } else {
              var temp__4092__auto___24358 = cljs.core.seq.call(null, seq__24301_24348);
              if (temp__4092__auto___24358) {
                var seq__24301_24359__$1 = temp__4092__auto___24358;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__24301_24359__$1)) {
                  var c__17462__auto___24360 = cljs.core.chunk_first.call(null, seq__24301_24359__$1);
                  var G__24361 = cljs.core.chunk_rest.call(null, seq__24301_24359__$1);
                  var G__24362 = c__17462__auto___24360;
                  var G__24363 = cljs.core.count.call(null, c__17462__auto___24360);
                  var G__24364 = 0;
                  seq__24301_24348 = G__24361;
                  chunk__24303_24349 = G__24362;
                  count__24304_24350 = G__24363;
                  i__24305_24351 = G__24364;
                  continue;
                } else {
                  var pile_card_es_24365 = cljs.core.first.call(null, seq__24301_24359__$1);
                  var pile_card_el_24366 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(pile_card_es_24365);
                  gin.ui.dom_helpers.set_card_class.call(null, pile_card_el_24366, "card_back");
                  gin.ui.dom_helpers.show_on_top.call(null, pile_card_el_24366);
                  gin.ui.animator.slide.call(null, pile_card_el_24366, pile_position);
                  var G__24367 = cljs.core.next.call(null, seq__24301_24359__$1);
                  var G__24368 = null;
                  var G__24369 = 0;
                  var G__24370 = 0;
                  seq__24301_24348 = G__24367;
                  chunk__24303_24349 = G__24368;
                  count__24304_24350 = G__24369;
                  i__24305_24351 = G__24370;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var temp__4092__auto___24371 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(cljs.core.last.call(null, pile_cards_es));
          if (cljs.core.truth_(temp__4092__auto___24371)) {
            var pile_card_el_24372 = temp__4092__auto___24371;
            if (us_pick_card) {
              gin.ui.game_panel.set_drag_handler.call(null, pile_card_el_24372, gin.ui.game_panel.pile_drag_handler.call(null, conn));
            } else {
              gin.ui.game_panel.set_drag_handler.call(null, pile_card_el_24372, gin.ui.game_panel.undraggable_handler.call(null, conn));
            }
          } else {
          }
          var opp_cards_el_24373 = cljs.core.map.call(null, new cljs.core.Keyword("dom", "el", "dom/el", 1020278571), opp_cards_es);
          var vec__24307_24374 = cljs.core._EQ_.call(null, 10, cljs.core.count.call(null, opp_cards_el_24373)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [53, 4], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [48.18, 3.63], null);
          var x_step_24375 = cljs.core.nth.call(null, vec__24307_24374, 0, null);
          var y_step_24376 = cljs.core.nth.call(null, vec__24307_24374, 1, null);
          var seq__24308_24377 = cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.list, cljs.core.range.call(null), opp_cards_es));
          var chunk__24309_24378 = null;
          var count__24310_24379 = 0;
          var i__24311_24380 = 0;
          while (true) {
            if (i__24311_24380 < count__24310_24379) {
              var vec__24312_24381 = cljs.core._nth.call(null, chunk__24309_24378, i__24311_24380);
              var i_24382 = cljs.core.nth.call(null, vec__24312_24381, 0, null);
              var e_24383 = cljs.core.nth.call(null, vec__24312_24381, 1, null);
              var el_24384 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(e_24383);
              gin.ui.animator.slide.call(null, el_24384, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.long$.call(null, their_region_offset_x + i_24382 * x_step_24375), cljs.core.long$.call(null, their_region_offset_y + i_24382 * y_step_24376)], null));
              var G__24385 = seq__24308_24377;
              var G__24386 = chunk__24309_24378;
              var G__24387 = count__24310_24379;
              var G__24388 = i__24311_24380 + 1;
              seq__24308_24377 = G__24385;
              chunk__24309_24378 = G__24386;
              count__24310_24379 = G__24387;
              i__24311_24380 = G__24388;
              continue;
            } else {
              var temp__4092__auto___24389 = cljs.core.seq.call(null, seq__24308_24377);
              if (temp__4092__auto___24389) {
                var seq__24308_24390__$1 = temp__4092__auto___24389;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__24308_24390__$1)) {
                  var c__17462__auto___24391 = cljs.core.chunk_first.call(null, seq__24308_24390__$1);
                  var G__24392 = cljs.core.chunk_rest.call(null, seq__24308_24390__$1);
                  var G__24393 = c__17462__auto___24391;
                  var G__24394 = cljs.core.count.call(null, c__17462__auto___24391);
                  var G__24395 = 0;
                  seq__24308_24377 = G__24392;
                  chunk__24309_24378 = G__24393;
                  count__24310_24379 = G__24394;
                  i__24311_24380 = G__24395;
                  continue;
                } else {
                  var vec__24313_24396 = cljs.core.first.call(null, seq__24308_24390__$1);
                  var i_24397 = cljs.core.nth.call(null, vec__24313_24396, 0, null);
                  var e_24398 = cljs.core.nth.call(null, vec__24313_24396, 1, null);
                  var el_24399 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(e_24398);
                  gin.ui.animator.slide.call(null, el_24399, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.long$.call(null, their_region_offset_x + i_24397 * x_step_24375), cljs.core.long$.call(null, their_region_offset_y + i_24397 * y_step_24376)], null));
                  var G__24400 = cljs.core.next.call(null, seq__24308_24390__$1);
                  var G__24401 = null;
                  var G__24402 = 0;
                  var G__24403 = 0;
                  seq__24308_24377 = G__24400;
                  chunk__24309_24378 = G__24401;
                  count__24310_24379 = G__24402;
                  i__24311_24380 = G__24403;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var seq__24314_24404 = cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.list, opp_cards_el_24373, opp_cards_es));
          var chunk__24315_24405 = null;
          var count__24316_24406 = 0;
          var i__24317_24407 = 0;
          while (true) {
            if (i__24317_24407 < count__24316_24406) {
              var vec__24318_24408 = cljs.core._nth.call(null, chunk__24315_24405, i__24317_24407);
              var el_24409 = cljs.core.nth.call(null, vec__24318_24408, 0, null);
              var es_24410 = cljs.core.nth.call(null, vec__24318_24408, 1, null);
              var suit_24411 = (new cljs.core.Keyword("card", "suit", "card/suit", 1215370835)).cljs$core$IFn$_invoke$arity$1(es_24410);
              var rank_24412 = (new cljs.core.Keyword("card", "rank", "card/rank", 1215352178)).cljs$core$IFn$_invoke$arity$1(es_24410);
              gin.ui.dom_helpers.show_on_top.call(null, el_24409);
              gin.ui.dom_helpers.set_card_class.call(null, el_24409, cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "hidden", "hidden", 4091384092), suit_24411) ? "card_back" : [cljs.core.str(cljs.core.name.call(null, suit_24411)), cljs.core.str("_"), cljs.core.str(cljs.core.name.call(null, rank_24412))].join(""));
              var G__24413 = seq__24314_24404;
              var G__24414 = chunk__24315_24405;
              var G__24415 = count__24316_24406;
              var G__24416 = i__24317_24407 + 1;
              seq__24314_24404 = G__24413;
              chunk__24315_24405 = G__24414;
              count__24316_24406 = G__24415;
              i__24317_24407 = G__24416;
              continue;
            } else {
              var temp__4092__auto___24417 = cljs.core.seq.call(null, seq__24314_24404);
              if (temp__4092__auto___24417) {
                var seq__24314_24418__$1 = temp__4092__auto___24417;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__24314_24418__$1)) {
                  var c__17462__auto___24419 = cljs.core.chunk_first.call(null, seq__24314_24418__$1);
                  var G__24420 = cljs.core.chunk_rest.call(null, seq__24314_24418__$1);
                  var G__24421 = c__17462__auto___24419;
                  var G__24422 = cljs.core.count.call(null, c__17462__auto___24419);
                  var G__24423 = 0;
                  seq__24314_24404 = G__24420;
                  chunk__24315_24405 = G__24421;
                  count__24316_24406 = G__24422;
                  i__24317_24407 = G__24423;
                  continue;
                } else {
                  var vec__24319_24424 = cljs.core.first.call(null, seq__24314_24418__$1);
                  var el_24425 = cljs.core.nth.call(null, vec__24319_24424, 0, null);
                  var es_24426 = cljs.core.nth.call(null, vec__24319_24424, 1, null);
                  var suit_24427 = (new cljs.core.Keyword("card", "suit", "card/suit", 1215370835)).cljs$core$IFn$_invoke$arity$1(es_24426);
                  var rank_24428 = (new cljs.core.Keyword("card", "rank", "card/rank", 1215352178)).cljs$core$IFn$_invoke$arity$1(es_24426);
                  gin.ui.dom_helpers.show_on_top.call(null, el_24425);
                  gin.ui.dom_helpers.set_card_class.call(null, el_24425, cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "hidden", "hidden", 4091384092), suit_24427) ? "card_back" : [cljs.core.str(cljs.core.name.call(null, suit_24427)), cljs.core.str("_"), cljs.core.str(cljs.core.name.call(null, rank_24428))].join(""));
                  var G__24429 = cljs.core.next.call(null, seq__24314_24418__$1);
                  var G__24430 = null;
                  var G__24431 = 0;
                  var G__24432 = 0;
                  seq__24314_24404 = G__24429;
                  chunk__24315_24405 = G__24430;
                  count__24316_24406 = G__24431;
                  i__24317_24407 = G__24432;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var seq__24320_24433 = cljs.core.seq.call(null, discard_cards_es);
          var chunk__24322_24434 = null;
          var count__24323_24435 = 0;
          var i__24324_24436 = 0;
          while (true) {
            if (i__24324_24436 < count__24323_24435) {
              var discard_card_es_24437 = cljs.core._nth.call(null, chunk__24322_24434, i__24324_24436);
              var discard_card_el_24438 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(discard_card_es_24437);
              var suit_24439 = (new cljs.core.Keyword("card", "suit", "card/suit", 1215370835)).cljs$core$IFn$_invoke$arity$1(discard_card_es_24437);
              var rank_24440 = (new cljs.core.Keyword("card", "rank", "card/rank", 1215352178)).cljs$core$IFn$_invoke$arity$1(discard_card_es_24437);
              gin.ui.dom_helpers.set_card_class.call(null, discard_card_el_24438, [cljs.core.str(cljs.core.name.call(null, suit_24439)), cljs.core.str("_"), cljs.core.str(cljs.core.name.call(null, rank_24440))].join(""));
              gin.ui.animator.slide.call(null, discard_card_el_24438, discard_position);
              var G__24441 = seq__24320_24433;
              var G__24442 = chunk__24322_24434;
              var G__24443 = count__24323_24435;
              var G__24444 = i__24324_24436 + 1;
              seq__24320_24433 = G__24441;
              chunk__24322_24434 = G__24442;
              count__24323_24435 = G__24443;
              i__24324_24436 = G__24444;
              continue;
            } else {
              var temp__4092__auto___24445 = cljs.core.seq.call(null, seq__24320_24433);
              if (temp__4092__auto___24445) {
                var seq__24320_24446__$1 = temp__4092__auto___24445;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__24320_24446__$1)) {
                  var c__17462__auto___24447 = cljs.core.chunk_first.call(null, seq__24320_24446__$1);
                  var G__24448 = cljs.core.chunk_rest.call(null, seq__24320_24446__$1);
                  var G__24449 = c__17462__auto___24447;
                  var G__24450 = cljs.core.count.call(null, c__17462__auto___24447);
                  var G__24451 = 0;
                  seq__24320_24433 = G__24448;
                  chunk__24322_24434 = G__24449;
                  count__24323_24435 = G__24450;
                  i__24324_24436 = G__24451;
                  continue;
                } else {
                  var discard_card_es_24452 = cljs.core.first.call(null, seq__24320_24446__$1);
                  var discard_card_el_24453 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(discard_card_es_24452);
                  var suit_24454 = (new cljs.core.Keyword("card", "suit", "card/suit", 1215370835)).cljs$core$IFn$_invoke$arity$1(discard_card_es_24452);
                  var rank_24455 = (new cljs.core.Keyword("card", "rank", "card/rank", 1215352178)).cljs$core$IFn$_invoke$arity$1(discard_card_es_24452);
                  gin.ui.dom_helpers.set_card_class.call(null, discard_card_el_24453, [cljs.core.str(cljs.core.name.call(null, suit_24454)), cljs.core.str("_"), cljs.core.str(cljs.core.name.call(null, rank_24455))].join(""));
                  gin.ui.animator.slide.call(null, discard_card_el_24453, discard_position);
                  var G__24456 = cljs.core.next.call(null, seq__24320_24446__$1);
                  var G__24457 = null;
                  var G__24458 = 0;
                  var G__24459 = 0;
                  seq__24320_24433 = G__24456;
                  chunk__24322_24434 = G__24457;
                  count__24323_24435 = G__24458;
                  i__24324_24436 = G__24459;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var temp__4092__auto___24460 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(cljs.core.last.call(null, discard_cards_es));
          if (cljs.core.truth_(temp__4092__auto___24460)) {
            var discard_card_el_24461 = temp__4092__auto___24460;
            if (cljs.core._EQ_.call(null, cljs.core.count.call(null, opp_cards_es), 10)) {
              gin.ui.dom_helpers.show_on_top.call(null, discard_card_el_24461);
            } else {
            }
            if (us_pick_card) {
              gin.ui.game_panel.set_drag_handler.call(null, discard_card_el_24461, gin.ui.game_panel.discard_drag_handler.call(null, conn));
            } else {
              gin.ui.game_panel.set_drag_handler.call(null, discard_card_el_24461, gin.ui.game_panel.undraggable_handler.call(null, conn));
            }
          } else {
          }
          if (cljs.core._EQ_.call(null, pile_position, gin.ui.dom_helpers.get_position.call(null, (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, our_cards_es))), gin.ui.dom_helpers.get_position.call(null, (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, our_cards_es))))) {
            var vec__24326_24462 = cljs.core._EQ_.call(null, 10, cljs.core.count.call(null, our_cards_es)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [53, 4], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [48.18, 3.63], null);
            var x_step_24463 = cljs.core.nth.call(null, vec__24326_24462, 0, null);
            var y_step_24464 = cljs.core.nth.call(null, vec__24326_24462, 1, null);
            var seq__24327_24465 = cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.list, cljs.core.range.call(null), our_cards_es));
            var chunk__24328_24466 = null;
            var count__24329_24467 = 0;
            var i__24330_24468 = 0;
            while (true) {
              if (i__24330_24468 < count__24329_24467) {
                var vec__24331_24469 = cljs.core._nth.call(null, chunk__24328_24466, i__24330_24468);
                var i_24470 = cljs.core.nth.call(null, vec__24331_24469, 0, null);
                var e_24471 = cljs.core.nth.call(null, vec__24331_24469, 1, null);
                var el_24472 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(e_24471);
                var suit_24473 = (new cljs.core.Keyword("card", "suit", "card/suit", 1215370835)).cljs$core$IFn$_invoke$arity$1(e_24471);
                var rank_24474 = (new cljs.core.Keyword("card", "rank", "card/rank", 1215352178)).cljs$core$IFn$_invoke$arity$1(e_24471);
                gin.ui.dom_helpers.set_card_class.call(null, el_24472, [cljs.core.str(cljs.core.name.call(null, suit_24473)), cljs.core.str("_"), cljs.core.str(cljs.core.name.call(null, rank_24474))].join(""));
                gin.ui.animator.slide.call(null, el_24472, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.long$.call(null, our_region_offset_x + i_24470 * x_step_24463), cljs.core.long$.call(null, our_region_offset_y + i_24470 * y_step_24464)], null));
                var G__24475 = seq__24327_24465;
                var G__24476 = chunk__24328_24466;
                var G__24477 = count__24329_24467;
                var G__24478 = i__24330_24468 + 1;
                seq__24327_24465 = G__24475;
                chunk__24328_24466 = G__24476;
                count__24329_24467 = G__24477;
                i__24330_24468 = G__24478;
                continue;
              } else {
                var temp__4092__auto___24479 = cljs.core.seq.call(null, seq__24327_24465);
                if (temp__4092__auto___24479) {
                  var seq__24327_24480__$1 = temp__4092__auto___24479;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__24327_24480__$1)) {
                    var c__17462__auto___24481 = cljs.core.chunk_first.call(null, seq__24327_24480__$1);
                    var G__24482 = cljs.core.chunk_rest.call(null, seq__24327_24480__$1);
                    var G__24483 = c__17462__auto___24481;
                    var G__24484 = cljs.core.count.call(null, c__17462__auto___24481);
                    var G__24485 = 0;
                    seq__24327_24465 = G__24482;
                    chunk__24328_24466 = G__24483;
                    count__24329_24467 = G__24484;
                    i__24330_24468 = G__24485;
                    continue;
                  } else {
                    var vec__24332_24486 = cljs.core.first.call(null, seq__24327_24480__$1);
                    var i_24487 = cljs.core.nth.call(null, vec__24332_24486, 0, null);
                    var e_24488 = cljs.core.nth.call(null, vec__24332_24486, 1, null);
                    var el_24489 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(e_24488);
                    var suit_24490 = (new cljs.core.Keyword("card", "suit", "card/suit", 1215370835)).cljs$core$IFn$_invoke$arity$1(e_24488);
                    var rank_24491 = (new cljs.core.Keyword("card", "rank", "card/rank", 1215352178)).cljs$core$IFn$_invoke$arity$1(e_24488);
                    gin.ui.dom_helpers.set_card_class.call(null, el_24489, [cljs.core.str(cljs.core.name.call(null, suit_24490)), cljs.core.str("_"), cljs.core.str(cljs.core.name.call(null, rank_24491))].join(""));
                    gin.ui.animator.slide.call(null, el_24489, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.long$.call(null, our_region_offset_x + i_24487 * x_step_24463), cljs.core.long$.call(null, our_region_offset_y + i_24487 * y_step_24464)], null));
                    var G__24492 = cljs.core.next.call(null, seq__24327_24480__$1);
                    var G__24493 = null;
                    var G__24494 = 0;
                    var G__24495 = 0;
                    seq__24327_24465 = G__24492;
                    chunk__24328_24466 = G__24493;
                    count__24329_24467 = G__24494;
                    i__24330_24468 = G__24495;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
          } else {
          }
          if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "turn", "turn", 1017476079)).cljs$core$IFn$_invoke$arity$1(game), (new cljs.core.Keyword(null, "us", "us", 1013907984)).cljs$core$IFn$_invoke$arity$1(game)) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "move", "move", 1017261891)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "assigned", "assigned", 644022592))) {
            if (cljs.core._EQ_.call(null, 11, cljs.core.count.call(null, our_cards_es))) {
              gin.ui.game_panel.set_msg.call(null, "Your turn. Drag a card from your hand to discard.");
              var seq__24333_24496 = cljs.core.seq.call(null, our_cards_es);
              var chunk__24334_24497 = null;
              var count__24335_24498 = 0;
              var i__24336_24499 = 0;
              while (true) {
                if (i__24336_24499 < count__24335_24498) {
                  var our_card_es_24500 = cljs.core._nth.call(null, chunk__24334_24497, i__24336_24499);
                  var our_card_el_24501 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(our_card_es_24500);
                  var suit_24502 = (new cljs.core.Keyword("card", "suit", "card/suit", 1215370835)).cljs$core$IFn$_invoke$arity$1(our_card_es_24500);
                  var rank_24503 = (new cljs.core.Keyword("card", "rank", "card/rank", 1215352178)).cljs$core$IFn$_invoke$arity$1(our_card_es_24500);
                  gin.ui.dom_helpers.set_card_class.call(null, our_card_el_24501, cljs.core._EQ_.call(null, suit_24502, new cljs.core.Keyword(null, "hidden", "hidden", 4091384092)) ? "card_back" : [cljs.core.str(cljs.core.name.call(null, suit_24502)), cljs.core.str("_"), cljs.core.str(cljs.core.name.call(null, rank_24503))].join(""));
                  gin.ui.game_panel.set_drag_handler.call(null, our_card_el_24501, gin.ui.game_panel.home_discard_handler.call(null, conn));
                  var G__24504 = seq__24333_24496;
                  var G__24505 = chunk__24334_24497;
                  var G__24506 = count__24335_24498;
                  var G__24507 = i__24336_24499 + 1;
                  seq__24333_24496 = G__24504;
                  chunk__24334_24497 = G__24505;
                  count__24335_24498 = G__24506;
                  i__24336_24499 = G__24507;
                  continue;
                } else {
                  var temp__4092__auto___24508 = cljs.core.seq.call(null, seq__24333_24496);
                  if (temp__4092__auto___24508) {
                    var seq__24333_24509__$1 = temp__4092__auto___24508;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__24333_24509__$1)) {
                      var c__17462__auto___24510 = cljs.core.chunk_first.call(null, seq__24333_24509__$1);
                      var G__24511 = cljs.core.chunk_rest.call(null, seq__24333_24509__$1);
                      var G__24512 = c__17462__auto___24510;
                      var G__24513 = cljs.core.count.call(null, c__17462__auto___24510);
                      var G__24514 = 0;
                      seq__24333_24496 = G__24511;
                      chunk__24334_24497 = G__24512;
                      count__24335_24498 = G__24513;
                      i__24336_24499 = G__24514;
                      continue;
                    } else {
                      var our_card_es_24515 = cljs.core.first.call(null, seq__24333_24509__$1);
                      var our_card_el_24516 = (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(our_card_es_24515);
                      var suit_24517 = (new cljs.core.Keyword("card", "suit", "card/suit", 1215370835)).cljs$core$IFn$_invoke$arity$1(our_card_es_24515);
                      var rank_24518 = (new cljs.core.Keyword("card", "rank", "card/rank", 1215352178)).cljs$core$IFn$_invoke$arity$1(our_card_es_24515);
                      gin.ui.dom_helpers.set_card_class.call(null, our_card_el_24516, cljs.core._EQ_.call(null, suit_24517, new cljs.core.Keyword(null, "hidden", "hidden", 4091384092)) ? "card_back" : [cljs.core.str(cljs.core.name.call(null, suit_24517)), cljs.core.str("_"), cljs.core.str(cljs.core.name.call(null, rank_24518))].join(""));
                      gin.ui.game_panel.set_drag_handler.call(null, our_card_el_24516, gin.ui.game_panel.home_discard_handler.call(null, conn));
                      var G__24519 = cljs.core.next.call(null, seq__24333_24509__$1);
                      var G__24520 = null;
                      var G__24521 = 0;
                      var G__24522 = 0;
                      seq__24333_24496 = G__24519;
                      chunk__24334_24497 = G__24520;
                      count__24335_24498 = G__24521;
                      i__24336_24499 = G__24522;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
            } else {
              gin.ui.game_panel.set_msg.call(null, "Your turn. Draw a card or pickup a discard.");
              var seq__24337_24523 = cljs.core.seq.call(null, our_cards_es);
              var chunk__24338_24524 = null;
              var count__24339_24525 = 0;
              var i__24340_24526 = 0;
              while (true) {
                if (i__24340_24526 < count__24339_24525) {
                  var our_card_es_24527 = cljs.core._nth.call(null, chunk__24338_24524, i__24340_24526);
                  gin.ui.game_panel.set_drag_handler.call(null, (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(our_card_es_24527), gin.ui.game_panel.home_region_handler.call(null, conn));
                  var G__24528 = seq__24337_24523;
                  var G__24529 = chunk__24338_24524;
                  var G__24530 = count__24339_24525;
                  var G__24531 = i__24340_24526 + 1;
                  seq__24337_24523 = G__24528;
                  chunk__24338_24524 = G__24529;
                  count__24339_24525 = G__24530;
                  i__24340_24526 = G__24531;
                  continue;
                } else {
                  var temp__4092__auto___24532 = cljs.core.seq.call(null, seq__24337_24523);
                  if (temp__4092__auto___24532) {
                    var seq__24337_24533__$1 = temp__4092__auto___24532;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__24337_24533__$1)) {
                      var c__17462__auto___24534 = cljs.core.chunk_first.call(null, seq__24337_24533__$1);
                      var G__24535 = cljs.core.chunk_rest.call(null, seq__24337_24533__$1);
                      var G__24536 = c__17462__auto___24534;
                      var G__24537 = cljs.core.count.call(null, c__17462__auto___24534);
                      var G__24538 = 0;
                      seq__24337_24523 = G__24535;
                      chunk__24338_24524 = G__24536;
                      count__24339_24525 = G__24537;
                      i__24340_24526 = G__24538;
                      continue;
                    } else {
                      var our_card_es_24539 = cljs.core.first.call(null, seq__24337_24533__$1);
                      gin.ui.game_panel.set_drag_handler.call(null, (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(our_card_es_24539), gin.ui.game_panel.home_region_handler.call(null, conn));
                      var G__24540 = cljs.core.next.call(null, seq__24337_24533__$1);
                      var G__24541 = null;
                      var G__24542 = 0;
                      var G__24543 = 0;
                      seq__24337_24523 = G__24540;
                      chunk__24338_24524 = G__24541;
                      count__24339_24525 = G__24542;
                      i__24340_24526 = G__24543;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
            }
          } else {
            if (cljs.core.truth_((new cljs.core.Keyword(null, "result", "result", 4374444943)).cljs$core$IFn$_invoke$arity$1(game))) {
            } else {
              if (cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "turn", "turn", 1017476079)).cljs$core$IFn$_invoke$arity$1(game), (new cljs.core.Keyword(null, "us", "us", 1013907984)).cljs$core$IFn$_invoke$arity$1(game))) {
                gin.ui.game_panel.set_msg.call(null, "Opponent's turn.");
              } else {
                gin.ui.game_panel.set_msg.call(null, "Your turn is done.");
              }
              var seq__24341_24544 = cljs.core.seq.call(null, our_cards_es);
              var chunk__24342_24545 = null;
              var count__24343_24546 = 0;
              var i__24344_24547 = 0;
              while (true) {
                if (i__24344_24547 < count__24343_24546) {
                  var our_card_es_24548 = cljs.core._nth.call(null, chunk__24342_24545, i__24344_24547);
                  gin.ui.game_panel.set_drag_handler.call(null, (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(our_card_es_24548), gin.ui.game_panel.home_region_handler.call(null, conn));
                  var G__24549 = seq__24341_24544;
                  var G__24550 = chunk__24342_24545;
                  var G__24551 = count__24343_24546;
                  var G__24552 = i__24344_24547 + 1;
                  seq__24341_24544 = G__24549;
                  chunk__24342_24545 = G__24550;
                  count__24343_24546 = G__24551;
                  i__24344_24547 = G__24552;
                  continue;
                } else {
                  var temp__4092__auto___24553 = cljs.core.seq.call(null, seq__24341_24544);
                  if (temp__4092__auto___24553) {
                    var seq__24341_24554__$1 = temp__4092__auto___24553;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__24341_24554__$1)) {
                      var c__17462__auto___24555 = cljs.core.chunk_first.call(null, seq__24341_24554__$1);
                      var G__24556 = cljs.core.chunk_rest.call(null, seq__24341_24554__$1);
                      var G__24557 = c__17462__auto___24555;
                      var G__24558 = cljs.core.count.call(null, c__17462__auto___24555);
                      var G__24559 = 0;
                      seq__24341_24544 = G__24556;
                      chunk__24342_24545 = G__24557;
                      count__24343_24546 = G__24558;
                      i__24344_24547 = G__24559;
                      continue;
                    } else {
                      var our_card_es_24560 = cljs.core.first.call(null, seq__24341_24554__$1);
                      gin.ui.game_panel.set_drag_handler.call(null, (new cljs.core.Keyword("dom", "el", "dom/el", 1020278571)).cljs$core$IFn$_invoke$arity$1(our_card_es_24560), gin.ui.game_panel.home_region_handler.call(null, conn));
                      var G__24561 = cljs.core.next.call(null, seq__24341_24554__$1);
                      var G__24562 = null;
                      var G__24563 = 0;
                      var G__24564 = 0;
                      seq__24341_24544 = G__24561;
                      chunk__24342_24545 = G__24562;
                      count__24343_24546 = G__24563;
                      i__24344_24547 = G__24564;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
            }
          }
          var temp__4092__auto__ = (new cljs.core.Keyword(null, "result", "result", 4374444943)).cljs$core$IFn$_invoke$arity$1(game);
          if (cljs.core.truth_(temp__4092__auto__)) {
            var result = temp__4092__auto__;
            gin.ui.game_panel.set_msg.call(null, function() {
              var pred__24345 = cljs.core._EQ_;
              var expr__24346 = result;
              if (cljs.core.truth_(pred__24345.call(null, new cljs.core.Keyword(null, "pat-tie", "pat-tie", 4515680216), expr__24346))) {
                return "Game over: Both dealt gin for a tie.";
              } else {
                if (cljs.core.truth_(pred__24345.call(null, new cljs.core.Keyword(null, "pat-our-win", "pat-our-win", 532651555), expr__24346))) {
                  return "Game over: You win, dealt gin.";
                } else {
                  if (cljs.core.truth_(pred__24345.call(null, new cljs.core.Keyword(null, "pat-opp-win", "pat-opp-win", 4682626054), expr__24346))) {
                    return "Game over: Opponent wins, dealt gin.";
                  } else {
                    if (cljs.core.truth_(pred__24345.call(null, new cljs.core.Keyword(null, "our-win", "our-win", 4198915405), expr__24346))) {
                      return "Game over: You win!";
                    } else {
                      if (cljs.core.truth_(pred__24345.call(null, new cljs.core.Keyword(null, "opp-win", "opp-win", 4053922608), expr__24346))) {
                        return "Game over: Opponent wins.";
                      } else {
                        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__24346)].join(""));
                      }
                    }
                  }
                }
              }
            }());
            var msg_area = gin.ui.dom_helpers.get_element.call(null, "msg");
            var back_button = gin.ui.dom_helpers.element.call(null, new cljs.core.Keyword(null, "a", "a", 1013904339), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", 1017115293), "/"], null), gin.ui.dom_helpers.element.call(null, new cljs.core.Keyword(null, "span", "span", 1017440956), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), "back_button", new cljs.core.Keyword(null, "class", "class", 1108647146), "back_button"], 
            null), "Back to lobby"));
            return gin.ui.dom_helpers.append.call(null, msg_area, back_button);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
gin.ui.game_panel.draw_game = function draw_game(report, conn) {
  var map__24568 = report;
  var map__24568__$1 = cljs.core.seq_QMARK_.call(null, map__24568) ? cljs.core.apply.call(null, cljs.core.hash_map, map__24568) : map__24568;
  var db_after = cljs.core.get.call(null, map__24568__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
  var temp__4092__auto__ = cljs.core.first.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?event", "?event", 259996532, null), new cljs.core.Symbol(null, "?args", "?args", -1579347115, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Symbol(null, "$", "$", -1640531491, null), new cljs.core.Symbol(null, "?tx", "?tx", -1640467268, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "event", "event", 1110795788), new cljs.core.Symbol(null, "?event", 
  "?event", 259996532, null), new cljs.core.Symbol(null, "?tx", "?tx", -1640467268, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "args", "args", 1016906831), new cljs.core.Symbol(null, "?args", "?args", -1579347115, null)], null)], null)], null), db_after, (new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)).cljs$core$IFn$_invoke$arity$1(db_after)));
  if (cljs.core.truth_(temp__4092__auto__)) {
    var vec__24569 = temp__4092__auto__;
    var event = cljs.core.nth.call(null, vec__24569, 0, null);
    var vec__24570 = cljs.core.nth.call(null, vec__24569, 1, null);
    var game_id = cljs.core.nth.call(null, vec__24570, 0, null);
    var args = cljs.core.nthnext.call(null, vec__24570, 1);
    if (cljs.core._EQ_.call(null, event, new cljs.core.Keyword(null, "error", "error", 1110689146))) {
      return gin.ui.game_panel.set_msg.call(null, "An error occured, refresh the page.");
    } else {
      return gin.ui.game_panel.draw.call(null, db_after, game_id, conn);
    }
  } else {
    return null;
  }
};
gin.ui.game_panel.start_game_panel = function start_game_panel(conn) {
  datascript.listen_BANG_.call(null, conn, function(report) {
    return gin.ui.game_panel.draw_game.call(null, report, conn);
  });
  return gin.ui.game_panel.draw_table.call(null, conn);
};
goog.provide("gin.local.game");
goog.require("cljs.core");
gin.local.game.rank__GT_value = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "A", "A", 1013904307), new cljs.core.Keyword(null, "r3", "r3", 1013907827), new cljs.core.Keyword(null, "r2", "r2", 1013907826), new cljs.core.Keyword(null, "T", "T", 1013904326), new cljs.core.Keyword(null, "r5", "r5", 1013907829), new cljs.core.Keyword(null, "r4", "r4", 1013907828), new cljs.core.Keyword(null, "Q", "Q", 1013904323), new cljs.core.Keyword(null, "r8", "r8", 1013907832), new cljs.core.Keyword(null, 
"r9", "r9", 1013907833), new cljs.core.Keyword(null, "r6", "r6", 1013907830), new cljs.core.Keyword(null, "r7", "r7", 1013907831), new cljs.core.Keyword(null, "K", "K", 1013904317), new cljs.core.Keyword(null, "J", "J", 1013904316)], [1, 3, 2, 10, 5, 4, 12, 8, 9, 6, 7, 13, 11]);
gin.local.game.value__GT_rank = cljs.core.zipmap.call(null, cljs.core.vals.call(null, gin.local.game.rank__GT_value), cljs.core.keys.call(null, gin.local.game.rank__GT_value));
gin.local.game.suit__GT_value = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "heart", "heart", 1113056184), 0, new cljs.core.Keyword(null, "club", "club", 1016961064), 1, new cljs.core.Keyword(null, "spade", "spade", 1123542167), 2, new cljs.core.Keyword(null, "diamond", "diamond", 2668958918), 3], null);
gin.local.game.value__GT_suit = cljs.core.zipmap.call(null, cljs.core.vals.call(null, gin.local.game.suit__GT_value), cljs.core.keys.call(null, gin.local.game.suit__GT_value));
gin.local.game.add_rank = function add_rank(rank, n) {
  var v = gin.local.game.rank__GT_value.call(null, rank) + n;
  if (cljs.core._EQ_.call(null, v, 14)) {
    return new cljs.core.Keyword(null, "A", "A", 1013904307);
  } else {
    return gin.local.game.value__GT_rank.call(null, v);
  }
};
gin.local.game.value_sorted = function value_sorted(cards) {
  return cljs.core.sort_by.call(null, cljs.core.comp.call(null, gin.local.game.rank__GT_value, new cljs.core.Keyword(null, "rank", "rank", 1017397150)), cards);
};
gin.local.game.dec_rank = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "A", "A", 1013904307), new cljs.core.Keyword(null, "r3", "r3", 1013907827), new cljs.core.Keyword(null, "r2", "r2", 1013907826), new cljs.core.Keyword(null, "T", "T", 1013904326), new cljs.core.Keyword(null, "r5", "r5", 1013907829), new cljs.core.Keyword(null, "r4", "r4", 1013907828), new cljs.core.Keyword(null, "Q", "Q", 1013904323), new cljs.core.Keyword(null, "r8", "r8", 1013907832), new cljs.core.Keyword(null, 
"r9", "r9", 1013907833), new cljs.core.Keyword(null, "r6", "r6", 1013907830), new cljs.core.Keyword(null, "r7", "r7", 1013907831), new cljs.core.Keyword(null, "K", "K", 1013904317), new cljs.core.Keyword(null, "J", "J", 1013904316)], [new cljs.core.Keyword(null, "K", "K", 1013904317), new cljs.core.Keyword(null, "r2", "r2", 1013907826), new cljs.core.Keyword(null, "A", "A", 1013904307), new cljs.core.Keyword(null, "r9", "r9", 1013907833), new cljs.core.Keyword(null, "r4", "r4", 1013907828), new cljs.core.Keyword(null, 
"r3", "r3", 1013907827), new cljs.core.Keyword(null, "J", "J", 1013904316), new cljs.core.Keyword(null, "r7", "r7", 1013907831), new cljs.core.Keyword(null, "r8", "r8", 1013907832), new cljs.core.Keyword(null, "r5", "r5", 1013907829), new cljs.core.Keyword(null, "r6", "r6", 1013907830), new cljs.core.Keyword(null, "Q", "Q", 1013904323), new cljs.core.Keyword(null, "T", "T", 1013904326)]);
gin.local.game.remove_when_card = function remove_when_card(cards, suit, rank) {
  var vec__23839 = cljs.core.split_with.call(null, function(p1__23837_SHARP_) {
    return!(cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(p1__23837_SHARP_), suit) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(p1__23837_SHARP_), rank));
  }, cards);
  var before = cljs.core.nth.call(null, vec__23839, 0, null);
  var after = cljs.core.nth.call(null, vec__23839, 1, null);
  if (cljs.core.truth_(cljs.core.first.call(null, after))) {
    return cljs.core.concat.call(null, before, cljs.core.rest.call(null, after));
  } else {
    return null;
  }
};
gin.local.game.remove_when_straight = function remove_when_straight(cards, end_suit, end_rank) {
  var temp__4092__auto__ = gin.local.game.remove_when_card.call(null, cards, end_suit, gin.local.game.dec_rank.call(null, end_rank));
  if (cljs.core.truth_(temp__4092__auto__)) {
    var found_middle = temp__4092__auto__;
    return gin.local.game.remove_when_card.call(null, found_middle, end_suit, end_rank);
  } else {
    return null;
  }
};
gin.local.game.gin_hand_size = function gin_hand_size(ginhand) {
  if (cljs.core.count.call(null, ginhand) < 3) {
    return 0;
  } else {
    var pivot = cljs.core.first.call(null, ginhand);
    var postpivot = cljs.core.rest.call(null, ginhand);
    var skipscore = 0 + gin_hand_size.call(null, postpivot);
    var c1 = cljs.core.nth.call(null, ginhand, 1);
    var c2 = cljs.core.nth.call(null, ginhand, 2);
    var c3 = cljs.core.nth.call(null, ginhand, 3, null);
    var samescore = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(pivot), (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(c1)) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(c1), (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(c2)) ? function() {
      var x__16968__auto__ = 3 + gin_hand_size.call(null, cljs.core.rest.call(null, cljs.core.rest.call(null, postpivot)));
      var y__16969__auto__ = cljs.core.truth_(function() {
        var and__16649__auto__ = c3;
        if (cljs.core.truth_(and__16649__auto__)) {
          return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(pivot), (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(c3));
        } else {
          return and__16649__auto__;
        }
      }()) ? function() {
        var notsame = cljs.core.rest.call(null, cljs.core.rest.call(null, cljs.core.rest.call(null, postpivot)));
        var x__16968__auto____$1 = function() {
          var x__16968__auto____$1 = 3 + gin_hand_size.call(null, cljs.core.conj.call(null, notsame, c1));
          var y__16969__auto__ = 3 + gin_hand_size.call(null, cljs.core.conj.call(null, notsame, c2));
          return x__16968__auto____$1 > y__16969__auto__ ? x__16968__auto____$1 : y__16969__auto__;
        }();
        var y__16969__auto__ = 4 + gin_hand_size.call(null, notsame);
        return x__16968__auto____$1 > y__16969__auto__ ? x__16968__auto____$1 : y__16969__auto__;
      }() : 0;
      return x__16968__auto__ > y__16969__auto__ ? x__16968__auto__ : y__16969__auto__;
    }() : 0;
    var wostraight = gin.local.game.remove_when_straight.call(null, postpivot, (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(pivot), gin.local.game.add_rank.call(null, (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(pivot), 2));
    var straightscore = cljs.core.truth_(wostraight) ? function() {
      var x__16968__auto__ = 3 + gin_hand_size.call(null, wostraight);
      var y__16969__auto__ = function() {
        var temp__4090__auto__ = gin.local.game.remove_when_card.call(null, wostraight, (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(pivot), gin.local.game.add_rank.call(null, (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(pivot), 3));
        if (cljs.core.truth_(temp__4090__auto__)) {
          var wo4straight = temp__4090__auto__;
          return 4 + gin_hand_size.call(null, wo4straight);
        } else {
          return 0;
        }
      }();
      return x__16968__auto__ > y__16969__auto__ ? x__16968__auto__ : y__16969__auto__;
    }() : 0;
    var acescore = !cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "A", "A", 1013904307), (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(pivot)) ? 0 : function() {
      var temp__4090__auto__ = gin.local.game.remove_when_straight.call(null, postpivot, (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(pivot), new cljs.core.Keyword(null, "K", "K", 1013904317));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var wostraight__$1 = temp__4090__auto__;
        var x__16968__auto__ = 3 + gin_hand_size.call(null, wostraight__$1);
        var y__16969__auto__ = function() {
          var temp__4090__auto____$1 = gin.local.game.remove_when_card.call(null, wostraight__$1, (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(pivot), new cljs.core.Keyword(null, "J", "J", 1013904316));
          if (cljs.core.truth_(temp__4090__auto____$1)) {
            var woj = temp__4090__auto____$1;
            return 4 + gin_hand_size.call(null, woj);
          } else {
            return 0;
          }
        }();
        return x__16968__auto__ > y__16969__auto__ ? x__16968__auto__ : y__16969__auto__;
      } else {
        return 0;
      }
    }();
    var x__16968__auto__ = function() {
      var x__16968__auto__ = function() {
        var x__16968__auto__ = skipscore;
        var y__16969__auto__ = samescore;
        return x__16968__auto__ > y__16969__auto__ ? x__16968__auto__ : y__16969__auto__;
      }();
      var y__16969__auto__ = straightscore;
      return x__16968__auto__ > y__16969__auto__ ? x__16968__auto__ : y__16969__auto__;
    }();
    var y__16969__auto__ = acescore;
    return x__16968__auto__ > y__16969__auto__ ? x__16968__auto__ : y__16969__auto__;
  }
};
gin.local.game.gin_size = function gin_size(cards) {
  return gin.local.game.gin_hand_size.call(null, gin.local.game.value_sorted.call(null, cards));
};
gin.local.game.count_gone = function count_gone(rank, gone_cards) {
  return(cljs.core.truth_(gone_cards.call(null, rank + 0)) ? 1 : 0) + (cljs.core.truth_(gone_cards.call(null, rank + 20)) ? 1 : 0) + (cljs.core.truth_(gone_cards.call(null, rank + 40)) ? 1 : 0) + (cljs.core.truth_(gone_cards.call(null, rank + 60)) ? 1 : 0);
};
gin.local.game.count_avail = function count_avail(rank, suit, gone_cards) {
  if (cljs.core.truth_(gone_cards.call(null, suit * 20 + rank))) {
    return 0;
  } else {
    return 1;
  }
};
gin.local.game.cards_to_gone_cards = function cards_to_gone_cards(cards) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__23840_SHARP_) {
    return gin.local.game.suit__GT_value.call(null, (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(p1__23840_SHARP_)) * 20 + gin.local.game.rank__GT_value.call(null, (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(p1__23840_SHARP_));
  }, cards));
};
gin.local.game.rate_straight = function rate_straight(suit, value, value2, gone_cards) {
  var v1 = cljs.core._EQ_.call(null, value, 1) ? value2 > 6 ? 14 : 1 : value;
  var v2 = cljs.core._EQ_.call(null, value2, 1) ? value > 6 ? 14 : 1 : value2;
  var delta = function() {
    var x__16968__auto__ = v1;
    var y__16969__auto__ = v2;
    return x__16968__auto__ > y__16969__auto__ ? x__16968__auto__ : y__16969__auto__;
  }() - function() {
    var x__16975__auto__ = v1;
    var y__16976__auto__ = v2;
    return x__16975__auto__ < y__16976__auto__ ? x__16975__auto__ : y__16976__auto__;
  }();
  if (cljs.core._EQ_.call(null, delta, 1)) {
    if (cljs.core._EQ_.call(null, v1, 1) || cljs.core._EQ_.call(null, v2, 1)) {
      return gin.local.game.count_avail.call(null, 3, suit, gone_cards);
    } else {
      if (cljs.core._EQ_.call(null, v1, 14) || cljs.core._EQ_.call(null, v2, 14)) {
        return gin.local.game.count_avail.call(null, 12, suit, gone_cards);
      } else {
        if (cljs.core._EQ_.call(null, v1, 13) || cljs.core._EQ_.call(null, v2, 13)) {
          return gin.local.game.count_avail.call(null, 11, suit, gone_cards) + gin.local.game.count_avail.call(null, 1, suit, gone_cards);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return gin.local.game.count_avail.call(null, function() {
              var x__16975__auto__ = v1;
              var y__16976__auto__ = v2;
              return x__16975__auto__ < y__16976__auto__ ? x__16975__auto__ : y__16976__auto__;
            }() - 1, suit, gone_cards) + gin.local.game.count_avail.call(null, function() {
              var x__16968__auto__ = v1;
              var y__16969__auto__ = v2;
              return x__16968__auto__ > y__16969__auto__ ? x__16968__auto__ : y__16969__auto__;
            }() + 1, suit, gone_cards);
          } else {
            return null;
          }
        }
      }
    }
  } else {
    if (cljs.core._EQ_.call(null, delta, 2)) {
      var middle = cljs.core.quot.call(null, v1 + v2, 2);
      return gin.local.game.count_avail.call(null, middle, suit, gone_cards);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
gin.local.game.pair_rating = function pair_rating(cards, goneset) {
  var rating = 0;
  var cards__$1 = cards;
  while (true) {
    if (cljs.core._EQ_.call(null, cljs.core.count.call(null, cards__$1), 1)) {
      return 20 + 2 * rating;
    } else {
      var card = cljs.core.first.call(null, cards__$1);
      var others = cljs.core.rest.call(null, cards__$1);
      var suit = (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(card);
      var rank = (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(card);
      var card_score = cljs.core.reduce.call(null, cljs.core._PLUS_, cljs.core.map.call(null, function(rating, cards__$1, card, others, suit, rank) {
        return function(card2) {
          var suit2 = (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(card2);
          var rank2 = (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(card2);
          if (cljs.core._EQ_.call(null, rank, rank2)) {
            return 2 - gin.local.game.count_gone.call(null, gin.local.game.rank__GT_value.call(null, rank), goneset);
          } else {
            if (cljs.core._EQ_.call(null, suit, suit2)) {
              return gin.local.game.rate_straight.call(null, gin.local.game.suit__GT_value.call(null, suit), gin.local.game.rank__GT_value.call(null, rank), gin.local.game.rank__GT_value.call(null, rank2), goneset);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return 0;
              } else {
                return null;
              }
            }
          }
        };
      }(rating, cards__$1, card, others, suit, rank), others));
      var G__23841 = rating + card_score;
      var G__23842 = others;
      rating = G__23841;
      cards__$1 = G__23842;
      continue;
    }
    break;
  }
};
gin.local.game.choosediscard = function choosediscard(hand, gone_cards) {
  var sorted_hand = gin.local.game.value_sorted.call(null, hand);
  var best = cljs.core.PersistentVector.EMPTY;
  var best_gin_size = 0;
  var hands = cljs.core.map.call(null, function(best, best_gin_size) {
    return function(p1__23843_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([p1__23843_SHARP_], true), sorted_hand), p1__23843_SHARP_], null);
    };
  }(best, best_gin_size), sorted_hand);
  while (true) {
    var temp__4090__auto__ = cljs.core.first.call(null, hands);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var h = temp__4090__auto__;
      var gs = gin.local.game.gin_size.call(null, cljs.core.first.call(null, h));
      if (gs > best_gin_size) {
        var G__23845 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [h], null);
        var G__23846 = gs;
        var G__23847 = cljs.core.rest.call(null, hands);
        best = G__23845;
        best_gin_size = G__23846;
        hands = G__23847;
        continue;
      } else {
        if (cljs.core._EQ_.call(null, gs, best_gin_size)) {
          var G__23848 = cljs.core.conj.call(null, best, h);
          var G__23849 = best_gin_size;
          var G__23850 = cljs.core.rest.call(null, hands);
          best = G__23848;
          best_gin_size = G__23849;
          hands = G__23850;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__23851 = best;
            var G__23852 = best_gin_size;
            var G__23853 = cljs.core.rest.call(null, hands);
            best = G__23851;
            best_gin_size = G__23852;
            hands = G__23853;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, best), 1)) {
        return cljs.core.second.call(null, cljs.core.first.call(null, best));
      } else {
        var gone_set = gin.local.game.cards_to_gone_cards.call(null, gone_cards);
        return cljs.core.second.call(null, cljs.core.apply.call(null, cljs.core.max_key, cljs.core.comp.call(null, function(best, best_gin_size, hands, gone_set, temp__4090__auto__) {
          return function(p1__23844_SHARP_) {
            return gin.local.game.pair_rating.call(null, p1__23844_SHARP_, gone_set);
          };
        }(best, best_gin_size, hands, gone_set, temp__4090__auto__), cljs.core.first), best));
      }
    }
    break;
  }
};
gin.local.game.takediscardordeck = function takediscardordeck(in_hand_cards, discard, gone_discards) {
  var orig_size = gin.local.game.gin_size.call(null, in_hand_cards);
  var hand_with_discard = cljs.core.conj.call(null, in_hand_cards, discard);
  var trade_card = gin.local.game.choosediscard.call(null, hand_with_discard, gone_discards);
  var new_gin_cards = cljs.core.remove.call(null, function(orig_size, hand_with_discard, trade_card) {
    return function(p1__23854_SHARP_) {
      return cljs.core._EQ_.call(null, trade_card, p1__23854_SHARP_);
    };
  }(orig_size, hand_with_discard, trade_card), hand_with_discard);
  var new_size = gin.local.game.gin_size.call(null, new_gin_cards);
  if (function() {
    var or__16661__auto__ = new_size > orig_size;
    if (or__16661__auto__) {
      return or__16661__auto__;
    } else {
      var and__16649__auto__ = cljs.core._EQ_.call(null, new_size, orig_size);
      if (and__16649__auto__) {
        var gone_set = gin.local.game.cards_to_gone_cards.call(null, gone_discards);
        return gin.local.game.pair_rating.call(null, new_gin_cards, gone_set) > gin.local.game.pair_rating.call(null, in_hand_cards, gone_set);
      } else {
        return and__16649__auto__;
      }
    }
  }()) {
    return new cljs.core.Keyword(null, "discard", "discard", 2685271056);
  } else {
    return new cljs.core.Keyword(null, "pile", "pile", 1017345188);
  }
};
gin.local.game.decide_move = function decide_move(table) {
  var opp_hand = (new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999)).cljs$core$IFn$_invoke$arity$1(table);
  var discards = (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(table);
  var discard = cljs.core.peek.call(null, discards);
  var gone_discards = cljs.core.pop.call(null, discards);
  return gin.local.game.takediscardordeck.call(null, opp_hand, discard, gone_discards);
};
goog.provide("gin.local.table");
goog.require("cljs.core");
goog.require("gin.local.game");
goog.require("gin.local.game");
gin.local.table.table = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
gin.local.table.table_state = function table_state() {
  var table = cljs.core.deref.call(null, gin.local.table.table);
  var opp_gin_size = (new cljs.core.Keyword(null, "opp-gin-size", "opp-gin-size", 3810086450)).cljs$core$IFn$_invoke$arity$1(table);
  var our_gin_size = (new cljs.core.Keyword(null, "our-gin-size", "our-gin-size", 3022237237)).cljs$core$IFn$_invoke$arity$1(table);
  if (cljs.core._EQ_.call(null, opp_gin_size, 10) && cljs.core._EQ_.call(null, our_gin_size, 10)) {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "result", "result", 4374444943), new cljs.core.Keyword(null, "tie", "tie", 1014019074), new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999), (new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999)).cljs$core$IFn$_invoke$arity$1(table)], null);
  } else {
    if (cljs.core._EQ_.call(null, opp_gin_size, 10)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "result", "result", 4374444943), new cljs.core.Keyword(null, "opp-win", "opp-win", 4053922608), new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999), (new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999)).cljs$core$IFn$_invoke$arity$1(table)], null);
    } else {
      if (cljs.core._EQ_.call(null, our_gin_size, 10)) {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "result", "result", 4374444943), new cljs.core.Keyword(null, "our-win", "our-win", 4198915405), new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999), (new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999)).cljs$core$IFn$_invoke$arity$1(table)], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "result", "result", 4374444943), new cljs.core.Keyword(null, "continue", "continue", 4741668889)], null);
        } else {
          return null;
        }
      }
    }
  }
};
gin.local.table.shuffle_set = function shuffle_set(s, n) {
  var ss = cljs.core.seq.call(null, s);
  if (ss && 0 < n) {
    var pick = cljs.core.rand_nth.call(null, ss);
    return cljs.core.cons.call(null, pick, shuffle_set.call(null, cljs.core.disj.call(null, s, pick), n - 1));
  } else {
    return s;
  }
};
gin.local.table.get_init_shuffle = function get_init_shuffle() {
  var deck = gin.local.table.shuffle_set.call(null, cljs.core.set.call(null, function() {
    var iter__17378__auto__ = function iter__18825(s__18826) {
      return new cljs.core.LazySeq(null, function() {
        var s__18826__$1 = s__18826;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__18826__$1);
          if (temp__4092__auto__) {
            var xs__4579__auto__ = temp__4092__auto__;
            var suit = cljs.core.first.call(null, xs__4579__auto__);
            var iterys__17374__auto__ = function(s__18826__$1, suit, xs__4579__auto__, temp__4092__auto__) {
              return function iter__18827(s__18828) {
                return new cljs.core.LazySeq(null, function(s__18826__$1, suit, xs__4579__auto__, temp__4092__auto__) {
                  return function() {
                    var s__18828__$1 = s__18828;
                    while (true) {
                      var temp__4092__auto____$1 = cljs.core.seq.call(null, s__18828__$1);
                      if (temp__4092__auto____$1) {
                        var s__18828__$2 = temp__4092__auto____$1;
                        if (cljs.core.chunked_seq_QMARK_.call(null, s__18828__$2)) {
                          var c__17376__auto__ = cljs.core.chunk_first.call(null, s__18828__$2);
                          var size__17377__auto__ = cljs.core.count.call(null, c__17376__auto__);
                          var b__18830 = cljs.core.chunk_buffer.call(null, size__17377__auto__);
                          if (function() {
                            var i__18829 = 0;
                            while (true) {
                              if (i__18829 < size__17377__auto__) {
                                var rank = cljs.core._nth.call(null, c__17376__auto__, i__18829);
                                cljs.core.chunk_append.call(null, b__18830, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "suit", "suit", 1017446015), suit, new cljs.core.Keyword(null, "rank", "rank", 1017397150), rank], null));
                                var G__18831 = i__18829 + 1;
                                i__18829 = G__18831;
                                continue;
                              } else {
                                return true;
                              }
                              break;
                            }
                          }()) {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18830), iter__18827.call(null, cljs.core.chunk_rest.call(null, s__18828__$2)));
                          } else {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18830), null);
                          }
                        } else {
                          var rank = cljs.core.first.call(null, s__18828__$2);
                          return cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "suit", "suit", 1017446015), suit, new cljs.core.Keyword(null, "rank", "rank", 1017397150), rank], null), iter__18827.call(null, cljs.core.rest.call(null, s__18828__$2)));
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(s__18826__$1, suit, xs__4579__auto__, temp__4092__auto__), null, null);
              };
            }(s__18826__$1, suit, xs__4579__auto__, temp__4092__auto__);
            var fs__17375__auto__ = cljs.core.seq.call(null, iterys__17374__auto__.call(null, new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "A", "A", 1013904307), new cljs.core.Keyword(null, "K", "K", 1013904317), new cljs.core.Keyword(null, "Q", "Q", 1013904323), new cljs.core.Keyword(null, "J", "J", 1013904316), new cljs.core.Keyword(null, "T", "T", 1013904326), new cljs.core.Keyword(null, "r9", "r9", 1013907833), new cljs.core.Keyword(null, 
            "r8", "r8", 1013907832), new cljs.core.Keyword(null, "r7", "r7", 1013907831), new cljs.core.Keyword(null, "r6", "r6", 1013907830), new cljs.core.Keyword(null, "r5", "r5", 1013907829), new cljs.core.Keyword(null, "r4", "r4", 1013907828), new cljs.core.Keyword(null, "r3", "r3", 1013907827), new cljs.core.Keyword(null, "r2", "r2", 1013907826)], null)));
            if (fs__17375__auto__) {
              return cljs.core.concat.call(null, fs__17375__auto__, iter__18825.call(null, cljs.core.rest.call(null, s__18826__$1)));
            } else {
              var G__18832 = cljs.core.rest.call(null, s__18826__$1);
              s__18826__$1 = G__18832;
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__17378__auto__.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "heart", "heart", 1113056184), new cljs.core.Keyword(null, "club", "club", 1016961064), new cljs.core.Keyword(null, "spade", "spade", 1123542167), new cljs.core.Keyword(null, "diamond", "diamond", 2668958918)], null));
  }()), 21);
  var vec__18822 = cljs.core.split_at.call(null, 10, deck);
  var opp_cards = cljs.core.nth.call(null, vec__18822, 0, null);
  var others = cljs.core.nth.call(null, vec__18822, 1, null);
  var vec__18823 = cljs.core.split_at.call(null, 10, others);
  var our_cards = cljs.core.nth.call(null, vec__18823, 0, null);
  var vec__18824 = cljs.core.nth.call(null, vec__18823, 1, null);
  var discard = cljs.core.nth.call(null, vec__18824, 0, null);
  var pile = cljs.core.nthnext.call(null, vec__18824, 1);
  var starting = cljs.core.rand_nth.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "us", "us", 1013907984), new cljs.core.Keyword(null, "opp", "opp", 1014014497)], null));
  return cljs.core.swap_BANG_.call(null, gin.local.table.table, cljs.core.merge, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444), cljs.core.set.call(null, our_cards), new cljs.core.Keyword(null, "our-gin-size", "our-gin-size", 3022237237), gin.local.game.gin_size.call(null, our_cards), new cljs.core.Keyword(null, "discards", "discards", 1286668039), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [discard], 
  null), new cljs.core.Keyword(null, "pile-cards", "pile-cards", 4041294458), cljs.core.set.call(null, pile), new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999), cljs.core.set.call(null, opp_cards), new cljs.core.Keyword(null, "opp-gin-size", "opp-gin-size", 3810086450), gin.local.game.gin_size.call(null, opp_cards), new cljs.core.Keyword(null, "starting", "starting", 2330710962), starting], null));
};
gin.local.table.restock_pile = function restock_pile() {
  return cljs.core.swap_BANG_.call(null, gin.local.table.table, function(t) {
    if (cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "pile-cards", "pile-cards", 4041294458)).cljs$core$IFn$_invoke$arity$1(t))) {
      var discards = (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(t);
      return cljs.core.assoc.call(null, cljs.core.assoc.call(null, t, new cljs.core.Keyword(null, "discards", "discards", 1286668039), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.peek.call(null, discards)], null)), new cljs.core.Keyword(null, "pile-cards", "pile-cards", 4041294458), cljs.core.set.call(null, cljs.core.pop.call(null, discards)));
    } else {
      return t;
    }
  });
};
gin.local.table.get_pile_card = function get_pile_card() {
  var new_card = (new cljs.core.Keyword(null, "last", "last", 1017218568)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, gin.local.table.table, function(old_table) {
    var card = cljs.core.rand_nth.call(null, cljs.core.seq.call(null, (new cljs.core.Keyword(null, "pile-cards", "pile-cards", 4041294458)).cljs$core$IFn$_invoke$arity$1(old_table)));
    return cljs.core.assoc.call(null, cljs.core.update_in.call(null, cljs.core.update_in.call(null, old_table, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pile-cards", "pile-cards", 4041294458)], null), cljs.core.disj, card), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)], null), cljs.core.conj, card), new cljs.core.Keyword(null, 
    "last", "last", 1017218568), card);
  }));
  gin.local.table.restock_pile.call(null);
  return new_card;
};
gin.local.table.get_discard = function get_discard() {
  return(new cljs.core.Keyword(null, "last", "last", 1017218568)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, gin.local.table.table, function(old_table) {
    var card = cljs.core.peek.call(null, (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(old_table));
    return cljs.core.assoc.call(null, cljs.core.update_in.call(null, cljs.core.update_in.call(null, old_table, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "discards", "discards", 1286668039)], null), cljs.core.pop), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)], null), cljs.core.conj, card), new cljs.core.Keyword(null, "last", "last", 
    1017218568), card);
  }));
};
gin.local.table.set_our_discard = function set_our_discard(discard) {
  cljs.core.swap_BANG_.call(null, gin.local.table.table, function(p1__18833_SHARP_) {
    return cljs.core.update_in.call(null, cljs.core.update_in.call(null, p1__18833_SHARP_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)], null), cljs.core.disj, discard), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "discards", "discards", 1286668039)], null), cljs.core.conj, discard);
  });
  return cljs.core.swap_BANG_.call(null, gin.local.table.table, function(t) {
    return cljs.core.assoc.call(null, t, new cljs.core.Keyword(null, "our-gin-size", "our-gin-size", 3022237237), gin.local.game.gin_size.call(null, (new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)).cljs$core$IFn$_invoke$arity$1(t)));
  });
};
gin.local.table.get_opponent_move = function get_opponent_move() {
  var vec__18835 = (new cljs.core.Keyword(null, "last", "last", 1017218568)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, gin.local.table.table, function(t) {
    var from = gin.local.game.decide_move.call(null, t);
    var take_card = cljs.core._EQ_.call(null, from, new cljs.core.Keyword(null, "pile", "pile", 1017345188)) ? cljs.core.rand_nth.call(null, cljs.core.seq.call(null, (new cljs.core.Keyword(null, "pile-cards", "pile-cards", 4041294458)).cljs$core$IFn$_invoke$arity$1(t))) : cljs.core._EQ_.call(null, from, new cljs.core.Keyword(null, "discard", "discard", 2685271056)) ? cljs.core.peek.call(null, (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(t)) : null;
    var t__$1 = cljs.core.update_in.call(null, cljs.core._EQ_.call(null, from, new cljs.core.Keyword(null, "pile", "pile", 1017345188)) ? cljs.core.update_in.call(null, t, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pile-cards", "pile-cards", 4041294458)], null), cljs.core.disj, take_card) : cljs.core._EQ_.call(null, from, new cljs.core.Keyword(null, "discard", "discard", 2685271056)) ? cljs.core.update_in.call(null, t, new cljs.core.PersistentVector(null, 
    1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "discards", "discards", 1286668039)], null), cljs.core.pop) : null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999)], null), cljs.core.conj, take_card);
    var trade_card = gin.local.game.choosediscard.call(null, (new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999)).cljs$core$IFn$_invoke$arity$1(t__$1), (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(t__$1));
    return cljs.core.assoc.call(null, cljs.core.update_in.call(null, cljs.core.update_in.call(null, t__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999)], null), cljs.core.disj, trade_card), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "discards", "discards", 1286668039)], null), cljs.core.conj, trade_card), new cljs.core.Keyword(null, 
    "last", "last", 1017218568), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [trade_card, from], null));
  }));
  var new_card = cljs.core.nth.call(null, vec__18835, 0, null);
  var from = cljs.core.nth.call(null, vec__18835, 1, null);
  if (cljs.core._EQ_.call(null, from, new cljs.core.Keyword(null, "pile", "pile", 1017345188))) {
    gin.local.table.restock_pile.call(null);
  } else {
  }
  cljs.core.swap_BANG_.call(null, gin.local.table.table, function(t) {
    return cljs.core.assoc.call(null, t, new cljs.core.Keyword(null, "opp-gin-size", "opp-gin-size", 3810086450), gin.local.game.gin_size.call(null, (new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999)).cljs$core$IFn$_invoke$arity$1(t)));
  });
  return from;
};
goog.provide("gin.local.services");
goog.require("cljs.core");
goog.require("gin.transact");
goog.require("goog.Timer");
goog.require("gin.local.game");
goog.require("gin.transact");
goog.require("gin.local.table");
goog.require("datascript");
goog.require("gin.local.game");
goog.require("gin.datascript_helpers");
goog.require("goog.Timer");
goog.require("datascript");
goog.require("gin.local.table");
goog.require("gin.datascript_helpers");
gin.local.services.handle = function() {
  var method_table__17519__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__17520__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__17521__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__17522__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__17523__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("handle", function(event, args, report, conn) {
    return event;
  }, new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__17523__auto__, method_table__17519__auto__, prefer_table__17520__auto__, method_cache__17521__auto__, cached_hierarchy__17522__auto__);
}();
cljs.core._add_method.call(null, gin.local.services.handle, new cljs.core.Keyword(null, "player-ready", "player-ready", 3966504745), function(event, p__18836, report, conn) {
  var vec__18837 = p__18836;
  var game_id = cljs.core.nth.call(null, vec__18837, 0, null);
  var player = cljs.core.nth.call(null, vec__18837, 1, null);
  var game = gin.datascript_helpers.entity_lookup.call(null, (new cljs.core.Keyword(null, "db-after", "db-after", 1658340159)).cljs$core$IFn$_invoke$arity$1(report), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
  var starting = (new cljs.core.Keyword(null, "starting", "starting", 2330710962)).cljs$core$IFn$_invoke$arity$1(game);
  var map__18838 = gin.local.table.table_state.call(null);
  var map__18838__$1 = cljs.core.seq_QMARK_.call(null, map__18838) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18838) : map__18838;
  var opp_cards = cljs.core.get.call(null, map__18838__$1, new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999));
  var result = cljs.core.get.call(null, map__18838__$1, new cljs.core.Keyword(null, "result", "result", 4374444943));
  return datascript.transact_BANG_.call(null, conn, function() {
    var temp__4090__auto__ = cljs.core.get.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tie", "tie", 1014019074), new cljs.core.Keyword(null, "pat-tie", "pat-tie", 4515680216), new cljs.core.Keyword(null, "our-win", "our-win", 4198915405), new cljs.core.Keyword(null, "pat-our-win", "pat-our-win", 532651555), new cljs.core.Keyword(null, "opp-win", "opp-win", 4053922608), new cljs.core.Keyword(null, "pat-opp-win", "pat-opp-win", 4682626054)], null), result);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var result__$1 = temp__4090__auto__;
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.game_finished, game_id, result__$1, opp_cards], null)], null);
    } else {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.turn_assigned, game_id, starting], null)], null);
    }
  }());
});
cljs.core._add_method.call(null, gin.local.services.handle, new cljs.core.Keyword(null, "our-pile-picked", "our-pile-picked", 3992106988), function(event, p__18839, p__18840, conn) {
  var vec__18841 = p__18839;
  var game_id = cljs.core.nth.call(null, vec__18841, 0, null);
  var card_id = cljs.core.nth.call(null, vec__18841, 1, null);
  var map__18842 = p__18840;
  var map__18842__$1 = cljs.core.seq_QMARK_.call(null, map__18842) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18842) : map__18842;
  var report = map__18842__$1;
  var db_after = cljs.core.get.call(null, map__18842__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
  var map__18843 = gin.local.table.get_pile_card.call(null);
  var map__18843__$1 = cljs.core.seq_QMARK_.call(null, map__18843) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18843) : map__18843;
  var card = map__18843__$1;
  var rank = cljs.core.get.call(null, map__18843__$1, new cljs.core.Keyword(null, "rank", "rank", 1017397150));
  var suit = cljs.core.get.call(null, map__18843__$1, new cljs.core.Keyword(null, "suit", "suit", 1017446015));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.our_pile_pick_revealed, game_id, suit, rank], null)], null));
});
cljs.core._add_method.call(null, gin.local.services.handle, new cljs.core.Keyword(null, "our-discard-picked", "our-discard-picked", 3880258722), function(event, p__18844, p__18845, conn) {
  var vec__18846 = p__18844;
  var game_id = cljs.core.nth.call(null, vec__18846, 0, null);
  var card_id = cljs.core.nth.call(null, vec__18846, 1, null);
  var map__18847 = p__18845;
  var map__18847__$1 = cljs.core.seq_QMARK_.call(null, map__18847) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18847) : map__18847;
  var report = map__18847__$1;
  var db_after = cljs.core.get.call(null, map__18847__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
  return gin.local.table.get_discard.call(null);
});
cljs.core._add_method.call(null, gin.local.services.handle, new cljs.core.Keyword(null, "our-discard-chosen", "our-discard-chosen", 3507521428), function(event, p__18848, p__18849, conn) {
  var vec__18850 = p__18848;
  var game_id = cljs.core.nth.call(null, vec__18850, 0, null);
  var card_id = cljs.core.nth.call(null, vec__18850, 1, null);
  var suit = cljs.core.nth.call(null, vec__18850, 2, null);
  var rank = cljs.core.nth.call(null, vec__18850, 3, null);
  var map__18851 = p__18849;
  var map__18851__$1 = cljs.core.seq_QMARK_.call(null, map__18851) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18851) : map__18851;
  var report = map__18851__$1;
  var db_after = cljs.core.get.call(null, map__18851__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
  gin.local.table.set_our_discard.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "suit", "suit", 1017446015), suit, new cljs.core.Keyword(null, "rank", "rank", 1017397150), rank], null));
  var map__18852 = gin.local.table.table_state.call(null);
  var map__18852__$1 = cljs.core.seq_QMARK_.call(null, map__18852) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18852) : map__18852;
  var opp_cards = cljs.core.get.call(null, map__18852__$1, new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999));
  var result = cljs.core.get.call(null, map__18852__$1, new cljs.core.Keyword(null, "result", "result", 4374444943));
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tie", "tie", 1014019074), null, new cljs.core.Keyword(null, "our-win", "our-win", 4198915405), null, new cljs.core.Keyword(null, "opp-win", "opp-win", 4053922608), null], null), null), result)) {
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.game_finished, game_id, result, opp_cards], null)], null));
  } else {
    var turn = cljs.core.get.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "player1", "player1", 520336610), new cljs.core.Keyword(null, "player2", "player2", 520336611), new cljs.core.Keyword(null, "player2", "player2", 520336611), new cljs.core.Keyword(null, "player1", "player1", 520336610)], null), (new cljs.core.Keyword(null, "turn", "turn", 1017476079)).cljs$core$IFn$_invoke$arity$1(gin.datascript_helpers.entity_lookup.call(null, db_after, new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null))));
    console.log("find turn: ", cljs.core.pr_str.call(null, gin.datascript_helpers.entity_lookup.call(null, db_after, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null))));
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.turn_assigned, game_id, turn], null)], null));
  }
});
cljs.core._add_method.call(null, gin.local.services.handle, new cljs.core.Keyword(null, "turn-assigned", "turn-assigned", 4620042384), function(event, p__18853, p__18854, conn) {
  var vec__18855 = p__18853;
  var game_id = cljs.core.nth.call(null, vec__18855, 0, null);
  var turn = cljs.core.nth.call(null, vec__18855, 1, null);
  var map__18856 = p__18854;
  var map__18856__$1 = cljs.core.seq_QMARK_.call(null, map__18856) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18856) : map__18856;
  var report = map__18856__$1;
  var db_after = cljs.core.get.call(null, map__18856__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
  var game = gin.datascript_helpers.entity_lookup.call(null, db_after, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null));
  if (cljs.core.not_EQ_.call(null, turn, (new cljs.core.Keyword(null, "us", "us", 1013907984)).cljs$core$IFn$_invoke$arity$1(game))) {
    var from = gin.local.table.get_opponent_move.call(null);
    var move = cljs.core._EQ_.call(null, from, new cljs.core.Keyword(null, "pile", "pile", 1017345188)) ? gin.transact.their_pile_picked : gin.transact.their_discard_picked;
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), move, game_id], null)], null));
  } else {
    return null;
  }
});
cljs.core._add_method.call(null, gin.local.services.handle, new cljs.core.Keyword(null, "their-discard-picked", "their-discard-picked", 4096501972), function(event, p__18857, p__18858, conn) {
  var vec__18859 = p__18857;
  var game_id = cljs.core.nth.call(null, vec__18859, 0, null);
  var map__18860 = p__18858;
  var map__18860__$1 = cljs.core.seq_QMARK_.call(null, map__18860) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18860) : map__18860;
  var report = map__18860__$1;
  var db_after = cljs.core.get.call(null, map__18860__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
  var vec__18861 = (new cljs.core.Keyword(null, "last", "last", 1017218568)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, gin.local.table.table));
  var map__18862 = cljs.core.nth.call(null, vec__18861, 0, null);
  var map__18862__$1 = cljs.core.seq_QMARK_.call(null, map__18862) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18862) : map__18862;
  var rank = cljs.core.get.call(null, map__18862__$1, new cljs.core.Keyword(null, "rank", "rank", 1017397150));
  var suit = cljs.core.get.call(null, map__18862__$1, new cljs.core.Keyword(null, "suit", "suit", 1017446015));
  var from = cljs.core.nth.call(null, vec__18861, 1, null);
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.their_discard_chosen, game_id, suit, rank], null)], null));
});
cljs.core._add_method.call(null, gin.local.services.handle, new cljs.core.Keyword(null, "their-pile-picked", "their-pile-picked", 4382382330), function(event, p__18863, p__18864, conn) {
  var vec__18865 = p__18863;
  var game_id = cljs.core.nth.call(null, vec__18865, 0, null);
  var map__18866 = p__18864;
  var map__18866__$1 = cljs.core.seq_QMARK_.call(null, map__18866) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18866) : map__18866;
  var report = map__18866__$1;
  var db_after = cljs.core.get.call(null, map__18866__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.their_pile_pick_revealed, game_id], null)], null));
});
cljs.core._add_method.call(null, gin.local.services.handle, new cljs.core.Keyword(null, "their-pile-pick-revealed", "their-pile-pick-revealed", 3002247874), function(event, p__18867, p__18868, conn) {
  var vec__18869 = p__18867;
  var game_id = cljs.core.nth.call(null, vec__18869, 0, null);
  var map__18870 = p__18868;
  var map__18870__$1 = cljs.core.seq_QMARK_.call(null, map__18870) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18870) : map__18870;
  var report = map__18870__$1;
  var db_after = cljs.core.get.call(null, map__18870__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
  var vec__18871 = (new cljs.core.Keyword(null, "last", "last", 1017218568)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, gin.local.table.table));
  var map__18872 = cljs.core.nth.call(null, vec__18871, 0, null);
  var map__18872__$1 = cljs.core.seq_QMARK_.call(null, map__18872) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18872) : map__18872;
  var rank = cljs.core.get.call(null, map__18872__$1, new cljs.core.Keyword(null, "rank", "rank", 1017397150));
  var suit = cljs.core.get.call(null, map__18872__$1, new cljs.core.Keyword(null, "suit", "suit", 1017446015));
  var from = cljs.core.nth.call(null, vec__18871, 1, null);
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.their_discard_chosen, game_id, suit, rank], null)], null));
});
cljs.core._add_method.call(null, gin.local.services.handle, new cljs.core.Keyword(null, "their-discard-chosen", "their-discard-chosen", 3723764678), function(event, p__18873, p__18874, conn) {
  var vec__18875 = p__18873;
  var game_id = cljs.core.nth.call(null, vec__18875, 0, null);
  var card_id = cljs.core.nth.call(null, vec__18875, 1, null);
  var suit = cljs.core.nth.call(null, vec__18875, 2, null);
  var rank = cljs.core.nth.call(null, vec__18875, 3, null);
  var map__18876 = p__18874;
  var map__18876__$1 = cljs.core.seq_QMARK_.call(null, map__18876) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18876) : map__18876;
  var report = map__18876__$1;
  var db_after = cljs.core.get.call(null, map__18876__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
  var map__18877 = gin.local.table.table_state.call(null);
  var map__18877__$1 = cljs.core.seq_QMARK_.call(null, map__18877) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18877) : map__18877;
  var opp_cards = cljs.core.get.call(null, map__18877__$1, new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999));
  var result = cljs.core.get.call(null, map__18877__$1, new cljs.core.Keyword(null, "result", "result", 4374444943));
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tie", "tie", 1014019074), null, new cljs.core.Keyword(null, "our-win", "our-win", 4198915405), null, new cljs.core.Keyword(null, "opp-win", "opp-win", 4053922608), null], null), null), result)) {
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.game_finished, game_id, result, opp_cards], null)], null));
  } else {
    var turn = cljs.core.get.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "player1", "player1", 520336610), new cljs.core.Keyword(null, "player2", "player2", 520336611), new cljs.core.Keyword(null, "player2", "player2", 520336611), new cljs.core.Keyword(null, "player1", "player1", 520336610)], null), (new cljs.core.Keyword(null, "turn", "turn", 1017476079)).cljs$core$IFn$_invoke$arity$1(gin.datascript_helpers.entity_lookup.call(null, db_after, new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null))));
    return goog.Timer.callOnce(function() {
      return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.turn_assigned, game_id, turn], null)], null));
    }, 300);
  }
});
cljs.core._add_method.call(null, gin.local.services.handle, new cljs.core.Keyword(null, "default", "default", 2558708147), function(_, ___$1) {
  return null;
});
gin.local.services.start_services = function start_services(conn) {
  datascript.listen_BANG_.call(null, conn, function(p__18881) {
    var map__18882 = p__18881;
    var map__18882__$1 = cljs.core.seq_QMARK_.call(null, map__18882) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18882) : map__18882;
    var report = map__18882__$1;
    var db_after = cljs.core.get.call(null, map__18882__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
    var vec__18883 = cljs.core.first.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?event", "?event", 259996532, null), new cljs.core.Symbol(null, "?args", "?args", -1579347115, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [new cljs.core.Symbol(null, "$", "$", -1640531491, null), new cljs.core.Symbol(null, "?tx", "?tx", -1640467268, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "event", "event", 1110795788), new cljs.core.Symbol(null, 
    "?event", "?event", 259996532, null), new cljs.core.Symbol(null, "?tx", "?tx", -1640467268, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "args", "args", 1016906831), new cljs.core.Symbol(null, "?args", "?args", -1579347115, null)], null)], null)], null), db_after, (new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)).cljs$core$IFn$_invoke$arity$1(db_after)));
    var event = cljs.core.nth.call(null, vec__18883, 0, null);
    var args = cljs.core.nth.call(null, vec__18883, 1, null);
    return gin.local.services.handle.call(null, event, args, report, conn);
  });
  var game_id = [cljs.core.str("game-local")].join("");
  datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.game_created, game_id, "pone", "ptwo", new cljs.core.Keyword(null, "player1", "player1", 520336610)], null)], null));
  var table = gin.local.table.get_init_shuffle.call(null);
  var to_start = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "starting", "starting", 2330710962)).cljs$core$IFn$_invoke$arity$1(table), new cljs.core.Keyword(null, "us", "us", 1013907984)) ? new cljs.core.Keyword(null, "player1", "player1", 520336610) : new cljs.core.Keyword(null, "player2", "player2", 520336611);
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.deal, game_id, cljs.core.peek.call(null, (new cljs.core.Keyword(null, "discards", "discards", 1286668039)).cljs$core$IFn$_invoke$arity$1(table)), (new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444)).cljs$core$IFn$_invoke$arity$1(table), 
  to_start], null)], null));
};
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.elements_ = [];
};
goog.structs.Queue.prototype.head_ = 0;
goog.structs.Queue.prototype.tail_ = 0;
goog.structs.Queue.prototype.enqueue = function(element) {
  this.elements_[this.tail_++] = element;
};
goog.structs.Queue.prototype.dequeue = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  var result = this.elements_[this.head_];
  delete this.elements_[this.head_];
  this.head_++;
  return result;
};
goog.structs.Queue.prototype.peek = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  return this.elements_[this.head_];
};
goog.structs.Queue.prototype.getCount = function() {
  return this.tail_ - this.head_;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return this.tail_ - this.head_ == 0;
};
goog.structs.Queue.prototype.clear = function() {
  this.elements_.length = 0;
  this.head_ = 0;
  this.tail_ = 0;
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.elements_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.indexOf(this.elements_, obj);
  if (index < 0) {
    return false;
  }
  if (index == this.head_) {
    this.dequeue();
  } else {
    goog.array.removeAt(this.elements_, index);
    this.tail_--;
  }
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  return this.elements_.slice(this.head_, this.tail_);
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = (this.freeQueue_.dequeue());
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject((freeQueue.dequeue()));
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject((freeQueue.dequeue()));
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.prototype.delayTimeout_;
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    goog.structs.forEach(headers, function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.base(this);
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = request.xhrLite = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && (!request.getCompleted() && !request.hasReachedMaxRetries())) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || (xhrIo.isSuccess() || request.hasReachedMaxRetries())) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  var requests = this.requests_;
  goog.structs.forEach(requests, function(value, key) {
    value.dispose();
  });
  requests.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
  this.xhrLite = (xhrIo);
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  goog.Disposable.call(this);
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.inherits(goog.net.XhrManager.Request, goog.Disposable);
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrManager.Request.prototype.disposeInternal = function() {
  goog.net.XhrManager.Request.superClass_.disposeInternal.call(this);
  delete this.xhrEventCallback_;
  delete this.completeCallback_;
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (opt_key) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.json.Serializer");
goog.require("goog.net.XhrManager");
goog.require("goog.Uri.QueryData");
goog.require("goog.events");
goog.require("goog.net.XhrManager");
goog.require("cljs.reader");
goog.require("goog.net.EventType");
goog.require("goog.structs");
goog.require("goog.Uri.QueryData");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("goog.structs");
goog.require("cljs.reader");
goog.require("goog.Uri");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIo");
goog.require("goog.events");
goog.require("goog.Uri");
ajax.core.AjaxImpl = function() {
  var obj20869 = {};
  return obj20869;
}();
ajax.core._js_ajax_request = function _js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__16649__auto__ = this$;
    if (and__16649__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__16649__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__17288__auto__ = this$ == null ? null : this$;
    return function() {
      var or__16661__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__17288__auto__)];
      if (or__16661__auto__) {
        return or__16661__auto__;
      } else {
        var or__16661__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__16661__auto____$1) {
          return or__16661__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__20870) {
  var map__20871 = p__20870;
  var map__20871__$1 = cljs.core.seq_QMARK_.call(null, map__20871) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20871) : map__20871;
  var timeout = cljs.core.get.call(null, map__20871__$1, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083));
  var this$__$1 = this;
  var G__20872 = this$__$1;
  goog.events.listen(G__20872, goog.net.EventType.COMPLETE, handler);
  G__20872.send(uri, method, body, headers, timeout);
  return G__20872;
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__20873) {
  var map__20874 = p__20873;
  var map__20874__$1 = cljs.core.seq_QMARK_.call(null, map__20874) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20874) : map__20874;
  var max_retries = cljs.core.get.call(null, map__20874__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", 902021455));
  var priority = cljs.core.get.call(null, map__20874__$1, new cljs.core.Keyword(null, "priority", "priority", 4143410454));
  var timeout = cljs.core.get.call(null, map__20874__$1, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083));
  var id = cljs.core.get.call(null, map__20874__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, headers, priority, handler, max_retries);
};
ajax.core.success_QMARK_ = function success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function read_edn(xhrio) {
  return cljs.reader.read_string.call(null, xhrio.getResponseText());
};
ajax.core.edn_response_format = function edn_response_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN"], null);
};
ajax.core.edn_request_format = function edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/edn"], null);
};
ajax.core.params_to_str = function params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.read_text = function read_text(xhrio) {
  return xhrio.getResponseText();
};
ajax.core.url_request_format = function url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function raw_response_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), ajax.core.read_text, new cljs.core.Keyword(null, "description", "description", 3584325486), "raw text"], null);
};
ajax.core.write_json = function write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/json"], null);
};
ajax.core.json_response_format = function json_response_format(p__20875) {
  var map__20877 = p__20875;
  var map__20877__$1 = cljs.core.seq_QMARK_.call(null, map__20877) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20877) : map__20877;
  var keywords_QMARK_ = cljs.core.get.call(null, map__20877__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 4346628423));
  var prefix = cljs.core.get.call(null, map__20877__$1, new cljs.core.Keyword(null, "prefix", "prefix", 4328760836));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function read_json(xhrio) {
    var json = xhrio.getResponseJson(prefix);
    return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), keywords_QMARK_);
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : null)].join("")], null);
};
ajax.core.get_default_format = function get_default_format(xhrio) {
  var ct = xhrio.getResponseHeader("Content-Type");
  var format = cljs.core.truth_(function() {
    var and__16649__auto__ = ct;
    if (cljs.core.truth_(and__16649__auto__)) {
      return ct.indexOf("json") >= 0;
    } else {
      return and__16649__auto__;
    }
  }()) ? ajax.core.json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY) : ajax.core.edn_response_format.call(null);
  return cljs.core.update_in.call(null, format, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "description", "description", 3584325486)], null), function(p1__20878_SHARP_) {
    return[cljs.core.str(p1__20878_SHARP_), cljs.core.str(" (default)")].join("");
  });
};
ajax.core.use_content_type = function use_content_type(format) {
  return cljs.core.dissoc.call(null, format, new cljs.core.Keyword(null, "write", "write", 1127304017));
};
ajax.core.codec = function codec(request_format, p__20879) {
  var map__20881 = p__20879;
  var map__20881__$1 = cljs.core.seq_QMARK_.call(null, map__20881) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20881) : map__20881;
  var response_format = map__20881__$1;
  var description = cljs.core.get.call(null, map__20881__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
  var read = cljs.core.get.call(null, map__20881__$1, new cljs.core.Keyword(null, "read", "read", 1017400584));
  return cljs.core.assoc.call(null, request_format, new cljs.core.Keyword(null, "read", "read", 1017400584), read, new cljs.core.Keyword(null, "description", "description", 3584325486), description);
};
ajax.core.get_format = function get_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return ajax.core.codec.call(null, ajax.core.url_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), format, new cljs.core.Keyword(null, "description", "description", 3584325486), "custom"], null));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("unrecognized format: "), cljs.core.str(format)].join(""));
      } else {
        return null;
      }
    }
  }
};
ajax.core.exception_response = function exception_response(e, status, p__20882, xhrio) {
  var map__20884 = p__20882;
  var map__20884__$1 = cljs.core.seq_QMARK_.call(null, map__20884) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20884) : map__20884;
  var description = cljs.core.get.call(null, map__20884__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
  var response = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", 4416389988), status, new cljs.core.Keyword(null, "response", "response", 673580979), null], null);
  var status_text = [cljs.core.str(e.message), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), status_text, new cljs.core.Keyword(null, "is-parse-error", "is-parse-error", 4116943293), true, new cljs.core.Keyword(null, "original-text", "original-text", 2831108891), xhrio.getResponseText());
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), xhrio.getStatusText(), new cljs.core.Keyword(null, "parse-error", "parse-error", 3528843744), parse_error);
  }
};
ajax.core.interpret_response = function interpret_response(format, response, get_default_format) {
  try {
    var xhrio = response.target;
    var status = xhrio.getStatus();
    var format__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "read", "read", 1017400584)).cljs$core$IFn$_invoke$arity$1(format)) ? format : get_default_format.call(null, xhrio);
    var parse = (new cljs.core.Keyword(null, "read", "read", 1017400584)).cljs$core$IFn$_invoke$arity$1(format__$1);
    try {
      var response__$1 = parse.call(null, xhrio);
      if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response__$1], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), status, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), xhrio.getStatusText(), new cljs.core.Keyword(null, "response", "response", 673580979), response__$1], null)], null);
      }
    } catch (e20888) {
      if (e20888 instanceof Object) {
        var e = e20888;
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format__$1, xhrio)], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e20888;
        } else {
          return null;
        }
      }
    }
  } catch (e20887) {
    if (e20887 instanceof Object) {
      var e = e20887;
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), 0, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), e.message, new cljs.core.Keyword(null, "response", "response", 673580979), null], null)], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e20887;
      } else {
        return null;
      }
    }
  }
};
ajax.core.no_format = function no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return[cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(ajax.core.params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.process_inputs = function process_inputs(uri, method, p__20889, p__20890) {
  var map__20894 = p__20889;
  var map__20894__$1 = cljs.core.seq_QMARK_.call(null, map__20894) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20894) : map__20894;
  var format = map__20894__$1;
  var content_type = cljs.core.get.call(null, map__20894__$1, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400));
  var write = cljs.core.get.call(null, map__20894__$1, new cljs.core.Keyword(null, "write", "write", 1127304017));
  var map__20895 = p__20890;
  var map__20895__$1 = cljs.core.seq_QMARK_.call(null, map__20895) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20895) : map__20895;
  var headers = cljs.core.get.call(null, map__20895__$1, new cljs.core.Keyword(null, "headers", "headers", 1809212152));
  var params = cljs.core.get.call(null, map__20895__$1, new cljs.core.Keyword(null, "params", "params", 4313443576));
  if (cljs.core._EQ_.call(null, method, "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers], null);
  } else {
    var map__20896 = format;
    var map__20896__$1 = cljs.core.seq_QMARK_.call(null, map__20896) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20896) : map__20896;
    var content_type__$1 = cljs.core.get.call(null, map__20896__$1, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400));
    var write__$1 = cljs.core.get.call(null, map__20896__$1, new cljs.core.Keyword(null, "write", "write", 1127304017));
    var body = write__$1.call(null, params);
    var content_type__$2 = cljs.core.truth_(content_type__$1) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type__$1], null) : null;
    var headers__$1 = cljs.core.merge.call(null, function() {
      var or__16661__auto__ = headers;
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), content_type__$2);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$1], null);
  }
};
ajax.core.normalize_method = function normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.base_handler = function base_handler(format, p__20897) {
  var map__20899 = p__20897;
  var map__20899__$1 = cljs.core.seq_QMARK_.call(null, map__20899) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20899) : map__20899;
  var get_default_format = cljs.core.get.call(null, map__20899__$1, new cljs.core.Keyword(null, "get-default-format", "get-default-format", 1021569996));
  var handler = cljs.core.get.call(null, map__20899__$1, new cljs.core.Keyword(null, "handler", "handler", 1706707644));
  return function(xhrio) {
    return handler.call(null, ajax.core.interpret_response.call(null, format, xhrio, function() {
      var or__16661__auto__ = get_default_format;
      if (cljs.core.truth_(or__16661__auto__)) {
        return or__16661__auto__;
      } else {
        return ajax.core.no_format;
      }
    }()));
  };
};
ajax.core.ajax_request = function() {
  var ajax_request = null;
  var ajax_request__3 = function(uri, method, opts) {
    return ajax_request.call(null, uri, method, opts, new goog.net.XhrIo);
  };
  var ajax_request__4 = function(uri, method, p__20900, js_ajax) {
    var map__20903 = p__20900;
    var map__20903__$1 = cljs.core.seq_QMARK_.call(null, map__20903) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20903) : map__20903;
    var opts = map__20903__$1;
    var format = cljs.core.get.call(null, map__20903__$1, new cljs.core.Keyword(null, "format", "format", 4040092521));
    var format__$1 = ajax.core.get_format.call(null, format);
    var method__$1 = ajax.core.normalize_method.call(null, method);
    var vec__20904 = ajax.core.process_inputs.call(null, uri, method__$1, format__$1, opts);
    var uri__$1 = cljs.core.nth.call(null, vec__20904, 0, null);
    var body = cljs.core.nth.call(null, vec__20904, 1, null);
    var headers = cljs.core.nth.call(null, vec__20904, 2, null);
    var handler = ajax.core.base_handler.call(null, format__$1, opts);
    return ajax.core._js_ajax_request.call(null, js_ajax, uri__$1, method__$1, body, cljs.core.clj__GT_js.call(null, headers), handler, opts);
  };
  ajax_request = function(uri, method, p__20900, js_ajax) {
    switch(arguments.length) {
      case 3:
        return ajax_request__3.call(this, uri, method, p__20900);
      case 4:
        return ajax_request__4.call(this, uri, method, p__20900, js_ajax);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax_request.cljs$core$IFn$_invoke$arity$3 = ajax_request__3;
  ajax_request.cljs$core$IFn$_invoke$arity$4 = ajax_request__4;
  return ajax_request;
}();
ajax.core.json_format = function json_format(format_params) {
  return ajax.core.codec.call(null, ajax.core.json_request_format.call(null), ajax.core.json_response_format.call(null, format_params));
};
ajax.core.edn_format = function edn_format() {
  return ajax.core.codec.call(null, ajax.core.edn_request_format.call(null), ajax.core.edn_response_format.call(null));
};
ajax.core.raw_format = function raw_format() {
  return ajax.core.codec.call(null, ajax.core.url_request_format.call(null), ajax.core.raw_response_format.call(null));
};
ajax.core.keyword_request_format = function keyword_request_format(format, format_params) {
  var G__20906 = format;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "url", "url", 1014020321), G__20906)) {
    return ajax.core.url_request_format.call(null);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "raw", "raw", 1014016922), G__20906)) {
      return ajax.core.url_request_format.call(null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "edn", "edn", 1014004513), G__20906)) {
        return ajax.core.edn_request_format.call(null);
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "json", "json", 1017176154), G__20906)) {
          return ajax.core.json_request_format.call(null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("unrecognized request format: "), cljs.core.str(format)].join(""));
          } else {
            return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function keyword_response_format(format, format_params) {
  var G__20908 = format;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "raw", "raw", 1014016922), G__20908)) {
    return ajax.core.raw_response_format.call(null);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "edn", "edn", 1014004513), G__20908)) {
      return ajax.core.edn_response_format.call(null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "json", "json", 1017176154), G__20908)) {
        return ajax.core.json_response_format.call(null, format_params);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return null;
        } else {
          return null;
        }
      }
    }
  }
};
ajax.core.transform_handler = function transform_handler(p__20909) {
  var map__20914 = p__20909;
  var map__20914__$1 = cljs.core.seq_QMARK_.call(null, map__20914) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20914) : map__20914;
  var finally$ = cljs.core.get.call(null, map__20914__$1, new cljs.core.Keyword(null, "finally", "finally", 4455611637));
  var error_handler = cljs.core.get.call(null, map__20914__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671));
  var handler = cljs.core.get.call(null, map__20914__$1, new cljs.core.Keyword(null, "handler", "handler", 1706707644));
  return function easy_handler(p__20915) {
    var vec__20917 = p__20915;
    var ok = cljs.core.nth.call(null, vec__20917, 0, null);
    var result = cljs.core.nth.call(null, vec__20917, 1, null);
    var temp__4090__auto___20918 = cljs.core.truth_(ok) ? handler : error_handler;
    if (cljs.core.truth_(temp__4090__auto___20918)) {
      var h_20919 = temp__4090__auto___20918;
      h_20919.call(null, result);
    } else {
    }
    if (cljs.core.fn_QMARK_.call(null, finally$)) {
      return finally$.call(null);
    } else {
      return null;
    }
  };
};
ajax.core.transform_format = function transform_format(p__20920) {
  var map__20922 = p__20920;
  var map__20922__$1 = cljs.core.seq_QMARK_.call(null, map__20922) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20922) : map__20922;
  var opts = map__20922__$1;
  var response_format = cljs.core.get.call(null, map__20922__$1, new cljs.core.Keyword(null, "response-format", "response-format", 4250805877));
  var format = cljs.core.get.call(null, map__20922__$1, new cljs.core.Keyword(null, "format", "format", 4040092521));
  var rf = ajax.core.keyword_response_format.call(null, response_format, opts);
  if (format == null) {
    return ajax.core.codec.call(null, ajax.core.edn_request_format.call(null), rf);
  } else {
    if (format instanceof cljs.core.Keyword) {
      return ajax.core.codec.call(null, ajax.core.keyword_request_format.call(null, format, opts), rf);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return format;
      } else {
        return null;
      }
    }
  }
};
ajax.core.transform_opts = function transform_opts(opts) {
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", 1706707644), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", 4040092521), ajax.core.transform_format.call(null, opts), new cljs.core.Keyword(null, "get-default-format", "get-default-format", 1021569996), ajax.core.get_default_format);
};
ajax.core.GET = function() {
  var GET__delegate = function(uri, p__20923) {
    var vec__20925 = p__20923;
    var opts = cljs.core.nth.call(null, vec__20925, 0, null);
    return ajax.core.ajax_request.call(null, uri, "GET", ajax.core.transform_opts.call(null, opts));
  };
  var GET = function(uri, var_args) {
    var p__20923 = null;
    if (arguments.length > 1) {
      p__20923 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return GET__delegate.call(this, uri, p__20923);
  };
  GET.cljs$lang$maxFixedArity = 1;
  GET.cljs$lang$applyTo = function(arglist__20926) {
    var uri = cljs.core.first(arglist__20926);
    var p__20923 = cljs.core.rest(arglist__20926);
    return GET__delegate(uri, p__20923);
  };
  GET.cljs$core$IFn$_invoke$arity$variadic = GET__delegate;
  return GET;
}();
ajax.core.PUT = function() {
  var PUT__delegate = function(uri, p__20927) {
    var vec__20929 = p__20927;
    var opts = cljs.core.nth.call(null, vec__20929, 0, null);
    return ajax.core.ajax_request.call(null, uri, "PUT", ajax.core.transform_opts.call(null, opts));
  };
  var PUT = function(uri, var_args) {
    var p__20927 = null;
    if (arguments.length > 1) {
      p__20927 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return PUT__delegate.call(this, uri, p__20927);
  };
  PUT.cljs$lang$maxFixedArity = 1;
  PUT.cljs$lang$applyTo = function(arglist__20930) {
    var uri = cljs.core.first(arglist__20930);
    var p__20927 = cljs.core.rest(arglist__20930);
    return PUT__delegate(uri, p__20927);
  };
  PUT.cljs$core$IFn$_invoke$arity$variadic = PUT__delegate;
  return PUT;
}();
ajax.core.POST = function() {
  var POST__delegate = function(uri, p__20931) {
    var vec__20933 = p__20931;
    var opts = cljs.core.nth.call(null, vec__20933, 0, null);
    return ajax.core.ajax_request.call(null, uri, "POST", ajax.core.transform_opts.call(null, opts));
  };
  var POST = function(uri, var_args) {
    var p__20931 = null;
    if (arguments.length > 1) {
      p__20931 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return POST__delegate.call(this, uri, p__20931);
  };
  POST.cljs$lang$maxFixedArity = 1;
  POST.cljs$lang$applyTo = function(arglist__20934) {
    var uri = cljs.core.first(arglist__20934);
    var p__20931 = cljs.core.rest(arglist__20934);
    return POST__delegate(uri, p__20931);
  };
  POST.cljs$core$IFn$_invoke$arity$variadic = POST__delegate;
  return POST;
}();
goog.provide("gin.event_source");
goog.require("cljs.core");
goog.require("goog.Timer");
goog.require("goog.Timer");
goog.require("cljs.reader");
goog.require("cljs.reader");
gin.event_source.event_source = function() {
  var event_source__delegate = function(url, p__20351) {
    var map__20353 = p__20351;
    var map__20353__$1 = cljs.core.seq_QMARK_.call(null, map__20353) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20353) : map__20353;
    var on_error = cljs.core.get.call(null, map__20353__$1, new cljs.core.Keyword(null, "on-error", "on-error", 1418576908), function(map__20353, map__20353__$1) {
      return function() {
        return null;
      };
    }(map__20353, map__20353__$1));
    var on_message = cljs.core.get.call(null, map__20353__$1, new cljs.core.Keyword(null, "on-message", "on-message", 1496225163), function(map__20353, map__20353__$1, on_error) {
      return function(event) {
        return null;
      };
    }(map__20353, map__20353__$1, on_error));
    var on_open = cljs.core.get.call(null, map__20353__$1, new cljs.core.Keyword(null, "on-open", "on-open", 3936747754), function(map__20353, map__20353__$1, on_error, on_message) {
      return function() {
        return null;
      };
    }(map__20353, map__20353__$1, on_error, on_message));
    var source = new EventSource(url);
    var open = cljs.core.atom.call(null, false);
    source.onopen = function() {
      cljs.core.reset_BANG_.call(null, open, true);
      on_open.call(null);
      return null;
    };
    source.onerror = function(e) {
      if (cljs.core.truth_(cljs.core.deref.call(null, open))) {
      } else {
        on_error.call(null);
      }
      cljs.core.reset_BANG_.call(null, open, false);
      goog.Timer.callOnce(function() {
        console.log([cljs.core.str("Reconnect check"), cljs.core.str(source.readyState), cljs.core.str(EventSource.CLOSED), cljs.core.str(cljs.core._EQ_.call(null, source.readyState, EventSource.CLOSED))].join(""));
        if (cljs.core._EQ_.call(null, source.readyState, EventSource.CLOSED)) {
          return event_source.call(null, url, new cljs.core.Keyword(null, "on-open", "on-open", 3936747754), on_open, new cljs.core.Keyword(null, "on-message", "on-message", 1496225163), on_message, new cljs.core.Keyword(null, "on-error", "on-error", 1418576908), on_error);
        } else {
          return null;
        }
      }, 9 * 1E3);
      return null;
    };
    source.onmessage = function(e) {
      var data_20354 = e.data;
      var event_20355 = cljs.reader.read_string.call(null, data_20354);
      on_message.call(null, event_20355);
      return null;
    };
    return source;
  };
  var event_source = function(url, var_args) {
    var p__20351 = null;
    if (arguments.length > 1) {
      p__20351 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return event_source__delegate.call(this, url, p__20351);
  };
  event_source.cljs$lang$maxFixedArity = 1;
  event_source.cljs$lang$applyTo = function(arglist__20356) {
    var url = cljs.core.first(arglist__20356);
    var p__20351 = cljs.core.rest(arglist__20356);
    return event_source__delegate(url, p__20351);
  };
  event_source.cljs$core$IFn$_invoke$arity$variadic = event_source__delegate;
  return event_source;
}();
goog.provide("gin.remote.services");
goog.require("cljs.core");
goog.require("ajax.core");
goog.require("gin.transact");
goog.require("gin.transact");
goog.require("datascript");
goog.require("ajax.core");
goog.require("ajax.core");
goog.require("goog.dom");
goog.require("gin.event_source");
goog.require("goog.dom");
goog.require("gin.event_source");
goog.require("datascript");
gin.remote.services.game_url = function game_url() {
  return[cljs.core.str(window.location.pathname)].join("");
};
gin.remote.services.csrf_token = function csrf_token() {
  return goog.dom.getElement("csrf-token").getAttribute("value");
};
gin.remote.services.error_handler = function error_handler(conn) {
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.error, "fail"], null)], null));
};
gin.remote.services.POST_ACTION = function POST_ACTION(url, conn, options) {
  return ajax.core.POST.call(null, url, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "params", "params", 4313443576), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    return null;
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    return gin.remote.services.error_handler.call(null, conn);
  }, new cljs.core.Keyword(null, "format", "format", 4040092521), cljs.core.merge.call(null, ajax.core.edn_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function(res) {
    var res_text = res.getResponseText();
    if (cljs.core.count.call(null, res_text) > 0) {
      throw new Error([cljs.core.str("Assumed no content response has content: "), cljs.core.str(res_text)].join(""));
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN (CUSTOM)"], null)), new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", gin.remote.services.csrf_token.call(null)], null)], null), options));
};
gin.remote.services.handle_client = function() {
  var method_table__17573__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__17574__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__17575__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__17576__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__17577__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("handle-client", function(event, args, db, conn) {
    return event;
  }, new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__17577__auto__, method_table__17573__auto__, prefer_table__17574__auto__, method_cache__17575__auto__, cached_hierarchy__17576__auto__);
}();
cljs.core._add_method.call(null, gin.remote.services.handle_client, new cljs.core.Keyword(null, "player-ready", "player-ready", 3966504745), function(_, p__20006, db, conn) {
  var vec__20007 = p__20006;
  var game_id = cljs.core.nth.call(null, vec__20007, 0, null);
  var player = cljs.core.nth.call(null, vec__20007, 1, null);
  return gin.remote.services.POST_ACTION.call(null, [cljs.core.str(gin.remote.services.game_url.call(null)), cljs.core.str("/player-ready")].join(""), conn, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id, new cljs.core.Keyword(null, "player", "player", 4323118675), player], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_client, new cljs.core.Keyword(null, "our-discard-picked", "our-discard-picked", 3880258722), function(_, p__20008, db, conn) {
  var vec__20009 = p__20008;
  var game_id = cljs.core.nth.call(null, vec__20009, 0, null);
  var card_id = cljs.core.nth.call(null, vec__20009, 1, null);
  return gin.remote.services.POST_ACTION.call(null, [cljs.core.str(gin.remote.services.game_url.call(null)), cljs.core.str("/discard-picked")].join(""), conn, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_client, new cljs.core.Keyword(null, "our-discard-chosen", "our-discard-chosen", 3507521428), function(_, p__20010, db, conn) {
  var vec__20011 = p__20010;
  var game_id = cljs.core.nth.call(null, vec__20011, 0, null);
  var card_id = cljs.core.nth.call(null, vec__20011, 1, null);
  var suit = cljs.core.nth.call(null, vec__20011, 2, null);
  var rank = cljs.core.nth.call(null, vec__20011, 3, null);
  return gin.remote.services.POST_ACTION.call(null, [cljs.core.str(gin.remote.services.game_url.call(null)), cljs.core.str("/discard-chosen")].join(""), conn, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id, new cljs.core.Keyword(null, "suit", "suit", 1017446015), suit, new cljs.core.Keyword(null, "rank", "rank", 1017397150), rank], 
  null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_client, new cljs.core.Keyword(null, "our-pile-picked", "our-pile-picked", 3992106988), function(_, p__20012, db, conn) {
  var vec__20013 = p__20012;
  var game_id = cljs.core.nth.call(null, vec__20013, 0, null);
  var card_id = cljs.core.nth.call(null, vec__20013, 1, null);
  return gin.remote.services.POST_ACTION.call(null, [cljs.core.str(gin.remote.services.game_url.call(null)), cljs.core.str("/pile-picked")].join(""), conn, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "game-id", "game-id", 818249800), game_id], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_client, new cljs.core.Keyword(null, "default", "default", 2558708147), function(_, ___$1) {
  return null;
});
gin.remote.services.handle_server = function() {
  var method_table__17573__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__17574__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__17575__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__17576__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__17577__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("handle-server", function(event, conn) {
    return(new cljs.core.Keyword(null, "event", "event", 1110795788)).cljs$core$IFn$_invoke$arity$1(event);
  }, new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__17577__auto__, method_table__17573__auto__, prefer_table__17574__auto__, method_cache__17575__auto__, cached_hierarchy__17576__auto__);
}();
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "game-created", "game-created", 3250098047), function(event, conn) {
  var map__20014 = event;
  var map__20014__$1 = cljs.core.seq_QMARK_.call(null, map__20014) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20014) : map__20014;
  var us = cljs.core.get.call(null, map__20014__$1, new cljs.core.Keyword(null, "us", "us", 1013907984));
  var player2 = cljs.core.get.call(null, map__20014__$1, new cljs.core.Keyword(null, "player2", "player2", 520336611));
  var player1 = cljs.core.get.call(null, map__20014__$1, new cljs.core.Keyword(null, "player1", "player1", 520336610));
  var game_id = cljs.core.get.call(null, map__20014__$1, new cljs.core.Keyword(null, "game-id", "game-id", 818249800));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.game_created, game_id, player1, player2, us], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "deal", "deal", 1016983518), function(event, conn) {
  var map__20015 = event;
  var map__20015__$1 = cljs.core.seq_QMARK_.call(null, map__20015) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20015) : map__20015;
  var to_start = cljs.core.get.call(null, map__20015__$1, new cljs.core.Keyword(null, "to-start", "to-start", 2443170306));
  var our_cards = cljs.core.get.call(null, map__20015__$1, new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444));
  var discard = cljs.core.get.call(null, map__20015__$1, new cljs.core.Keyword(null, "discard", "discard", 2685271056));
  var game_id = cljs.core.get.call(null, map__20015__$1, new cljs.core.Keyword(null, "game-id", "game-id", 818249800));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.deal, game_id, discard, our_cards, to_start], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "join-game", "join-game", 4768214567), function(event, conn) {
  var map__20016_20018 = event;
  var map__20016_20019__$1 = cljs.core.seq_QMARK_.call(null, map__20016_20018) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20016_20018) : map__20016_20018;
  var us_20020 = cljs.core.get.call(null, map__20016_20019__$1, new cljs.core.Keyword(null, "us", "us", 1013907984));
  var player2_20021 = cljs.core.get.call(null, map__20016_20019__$1, new cljs.core.Keyword(null, "player2", "player2", 520336611));
  var player1_20022 = cljs.core.get.call(null, map__20016_20019__$1, new cljs.core.Keyword(null, "player1", "player1", 520336610));
  var game_id_20023 = cljs.core.get.call(null, map__20016_20019__$1, new cljs.core.Keyword(null, "game-id", "game-id", 818249800));
  datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.game_created, game_id_20023, player1_20022, player2_20021, us_20020], null)], null));
  var map__20017 = event;
  var map__20017__$1 = cljs.core.seq_QMARK_.call(null, map__20017) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20017) : map__20017;
  var result = cljs.core.get.call(null, map__20017__$1, new cljs.core.Keyword(null, "result", "result", 4374444943));
  var turn = cljs.core.get.call(null, map__20017__$1, new cljs.core.Keyword(null, "turn", "turn", 1017476079));
  var to_start = cljs.core.get.call(null, map__20017__$1, new cljs.core.Keyword(null, "to-start", "to-start", 2443170306));
  var their_cards = cljs.core.get.call(null, map__20017__$1, new cljs.core.Keyword(null, "their-cards", "their-cards", 3979507874));
  var our_cards = cljs.core.get.call(null, map__20017__$1, new cljs.core.Keyword(null, "our-cards", "our-cards", 3774215444));
  var discards = cljs.core.get.call(null, map__20017__$1, new cljs.core.Keyword(null, "discards", "discards", 1286668039));
  var game_id = cljs.core.get.call(null, map__20017__$1, new cljs.core.Keyword(null, "game-id", "game-id", 818249800));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.join_game, game_id, discards, our_cards, their_cards, to_start, turn, result], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "turn-assigned", "turn-assigned", 4620042384), function(event, conn) {
  var map__20024 = event;
  var map__20024__$1 = cljs.core.seq_QMARK_.call(null, map__20024) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20024) : map__20024;
  var turn = cljs.core.get.call(null, map__20024__$1, new cljs.core.Keyword(null, "turn", "turn", 1017476079));
  var game_id = cljs.core.get.call(null, map__20024__$1, new cljs.core.Keyword(null, "game-id", "game-id", 818249800));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.turn_assigned, game_id, turn], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "our-discard-picked", "our-discard-picked", 3880258722), function(event, conn) {
  return null;
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "our-pile-picked", "our-pile-picked", 3992106988), function(event, conn) {
  return null;
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "our-pile-pick-revealed", "our-pile-pick-revealed", 914126736), function(event, conn) {
  var map__20025 = event;
  var map__20025__$1 = cljs.core.seq_QMARK_.call(null, map__20025) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20025) : map__20025;
  var rank = cljs.core.get.call(null, map__20025__$1, new cljs.core.Keyword(null, "rank", "rank", 1017397150));
  var suit = cljs.core.get.call(null, map__20025__$1, new cljs.core.Keyword(null, "suit", "suit", 1017446015));
  var game_id = cljs.core.get.call(null, map__20025__$1, new cljs.core.Keyword(null, "game-id", "game-id", 818249800));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.our_pile_pick_revealed, game_id, suit, rank], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "our-discard-chosen", "our-discard-chosen", 3507521428), function(event, conn) {
  return null;
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "their-discard-picked", "their-discard-picked", 4096501972), function(event, conn) {
  var map__20026 = event;
  var map__20026__$1 = cljs.core.seq_QMARK_.call(null, map__20026) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20026) : map__20026;
  var game_id = cljs.core.get.call(null, map__20026__$1, new cljs.core.Keyword(null, "game-id", "game-id", 818249800));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.their_discard_picked, game_id], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "their-pile-picked", "their-pile-picked", 4382382330), function(event, conn) {
  var map__20027 = event;
  var map__20027__$1 = cljs.core.seq_QMARK_.call(null, map__20027) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20027) : map__20027;
  var game_id = cljs.core.get.call(null, map__20027__$1, new cljs.core.Keyword(null, "game-id", "game-id", 818249800));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.their_pile_picked, game_id], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "their-pile-pick-revealed", "their-pile-pick-revealed", 3002247874), function(event, conn) {
  var map__20028 = event;
  var map__20028__$1 = cljs.core.seq_QMARK_.call(null, map__20028) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20028) : map__20028;
  var game_id = cljs.core.get.call(null, map__20028__$1, new cljs.core.Keyword(null, "game-id", "game-id", 818249800));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.their_pile_pick_revealed, game_id], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "their-discard-chosen", "their-discard-chosen", 3723764678), function(event, conn) {
  var map__20029 = event;
  var map__20029__$1 = cljs.core.seq_QMARK_.call(null, map__20029) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20029) : map__20029;
  var game_id = cljs.core.get.call(null, map__20029__$1, new cljs.core.Keyword(null, "game-id", "game-id", 818249800));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.their_discard_chosen, game_id, (new cljs.core.Keyword(null, "suit", "suit", 1017446015)).cljs$core$IFn$_invoke$arity$1(event), (new cljs.core.Keyword(null, "rank", "rank", 1017397150)).cljs$core$IFn$_invoke$arity$1(event)], 
  null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "game-finished", "game-finished", 3417324383), function(event, conn) {
  var map__20030 = event;
  var map__20030__$1 = cljs.core.seq_QMARK_.call(null, map__20030) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20030) : map__20030;
  var opp_cards = cljs.core.get.call(null, map__20030__$1, new cljs.core.Keyword(null, "opp-cards", "opp-cards", 1875090999));
  var result = cljs.core.get.call(null, map__20030__$1, new cljs.core.Keyword(null, "result", "result", 4374444943));
  var game_id = cljs.core.get.call(null, map__20030__$1, new cljs.core.Keyword(null, "game-id", "game-id", 818249800));
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), gin.transact.game_finished, game_id, result, opp_cards], null)], null));
});
cljs.core._add_method.call(null, gin.remote.services.handle_server, new cljs.core.Keyword(null, "default", "default", 2558708147), function(event, conn) {
  return null;
});
gin.remote.services.start_services = function start_services(conn) {
  datascript.listen_BANG_.call(null, conn, function(p__20034) {
    var map__20035 = p__20034;
    var map__20035__$1 = cljs.core.seq_QMARK_.call(null, map__20035) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20035) : map__20035;
    var report = map__20035__$1;
    var db_after = cljs.core.get.call(null, map__20035__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
    var vec__20036 = cljs.core.first.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?event", "?event", 259996532, null), new cljs.core.Symbol(null, "?args", "?args", -1579347115, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [new cljs.core.Symbol(null, "$", "$", -1640531491, null), new cljs.core.Symbol(null, "?tx", "?tx", -1640467268, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "event", "event", 1110795788), new cljs.core.Symbol(null, 
    "?event", "?event", 259996532, null), new cljs.core.Symbol(null, "?tx", "?tx", -1640467268, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "args", "args", 1016906831), new cljs.core.Symbol(null, "?args", "?args", -1579347115, null)], null)], null)], null), db_after, (new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)).cljs$core$IFn$_invoke$arity$1(db_after)));
    var event = cljs.core.nth.call(null, vec__20036, 0, null);
    var args = cljs.core.nth.call(null, vec__20036, 1, null);
    return gin.remote.services.handle_client.call(null, event, args, report, conn);
  });
  return gin.event_source.event_source.call(null, [cljs.core.str(gin.remote.services.game_url.call(null)), cljs.core.str("/events")].join(""), new cljs.core.Keyword(null, "on-message", "on-message", 1496225163), function(event) {
    return gin.remote.services.handle_server.call(null, event, conn);
  }, new cljs.core.Keyword(null, "on-error", "on-error", 1418576908), function() {
    return gin.remote.services.error_handler.call(null, conn);
  });
};
goog.provide("gin.core");
goog.require("cljs.core");
goog.require("gin.transact");
goog.require("datascript");
goog.require("gin.ui.game_panel");
goog.require("gin.local.services");
goog.require("gin.remote.services");
goog.require("datascript");
goog.require("gin.local.services");
goog.require("gin.transact");
goog.require("gin.ui.game_panel");
goog.require("gin.remote.services");
gin.core.load_app = function load_app() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "conn", "conn", 1016963742), datascript.create_conn.call(null, gin.transact.schema), new cljs.core.Keyword(null, "render", "render", 4374279432), gin.ui.game_panel.start_game_panel, new cljs.core.Keyword(null, "service", "service", 2998057511), gin.remote.services.start_services], null);
};
gin.core.start_app = function start_app(app_config) {
  var map__20038 = app_config;
  var map__20038__$1 = cljs.core.seq_QMARK_.call(null, map__20038) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20038) : map__20038;
  var app = map__20038__$1;
  var service = cljs.core.get.call(null, map__20038__$1, new cljs.core.Keyword(null, "service", "service", 2998057511));
  var render = cljs.core.get.call(null, map__20038__$1, new cljs.core.Keyword(null, "render", "render", 4374279432));
  var conn = cljs.core.get.call(null, map__20038__$1, new cljs.core.Keyword(null, "conn", "conn", 1016963742));
  render.call(null, conn);
  service.call(null, conn);
  gin.core.app = app;
};
gin.core.main = function main() {
  return gin.core.start_app.call(null, gin.core.load_app.call(null));
};
goog.exportSymbol("gin.core.main", gin.core.main);
gin.core.load_local_app = function load_local_app() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "conn", "conn", 1016963742), datascript.create_conn.call(null, gin.transact.schema), new cljs.core.Keyword(null, "render", "render", 4374279432), gin.ui.game_panel.start_game_panel, new cljs.core.Keyword(null, "service", "service", 2998057511), gin.local.services.start_services], null);
};
gin.core.client_local = function client_local() {
  return gin.core.start_app.call(null, gin.core.load_local_app.call(null));
};
goog.exportSymbol("gin.core.client_local", gin.core.client_local);
goog.provide("quiescent");
goog.require("cljs.core");
quiescent._STAR_component_STAR_ = null;
quiescent.component = function component(renderer) {
  var react_component = React.createClass({"render":function() {
    var this$ = this;
    var _STAR_component_STAR_23477 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return cljs.core.apply.call(null, renderer, this$.props["value"], this$.props["statics"]);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_23477;
    }
  }, "shouldComponentUpdate":function(next_props, _) {
    var this$ = this;
    return cljs.core.not_EQ_.call(null, this$.props["value"], next_props["value"]);
  }});
  return function() {
    var G__23478__delegate = function(value, static_args) {
      return react_component.call(null, {"statics":static_args, "value":value});
    };
    var G__23478 = function(value, var_args) {
      var static_args = null;
      if (arguments.length > 1) {
        static_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__23478__delegate.call(this, value, static_args);
    };
    G__23478.cljs$lang$maxFixedArity = 1;
    G__23478.cljs$lang$applyTo = function(arglist__23479) {
      var value = cljs.core.first(arglist__23479);
      var static_args = cljs.core.rest(arglist__23479);
      return G__23478__delegate(value, static_args);
    };
    G__23478.cljs$core$IFn$_invoke$arity$variadic = G__23478__delegate;
    return G__23478;
  }();
};
quiescent.WrapperComponent = React.createClass({"componentDidMount":function() {
  var this$ = this;
  var temp__4092__auto__ = this$.props["onMount"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var f = temp__4092__auto__;
    return f.call(null, this$.getDOMNode());
  } else {
    return null;
  }
}, "componentDidUpdate":function(prev_props, prev_state) {
  var this$ = this;
  var temp__4092__auto__ = this$.props["onUpdate"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var f = temp__4092__auto__;
    var _STAR_component_STAR_23480 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return f.call(null, this$.getDOMNode());
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_23480;
    }
  } else {
    return null;
  }
}, "render":function() {
  var this$ = this;
  return this$.props["wrappee"];
}});
quiescent.on_update = function on_update(child, f) {
  return quiescent.WrapperComponent.call(null, {"onUpdate":f, "wrappee":child});
};
quiescent.on_initial_render = function on_initial_render(child, f) {
  return quiescent.WrapperComponent.call(null, {"onMount":f, "wrappee":child});
};
quiescent.on_render = function on_render(child, f) {
  return quiescent.WrapperComponent.call(null, {"onMount":f, "onUpdate":f, "wrappee":child});
};
quiescent.render = function render(component, node) {
  return React.renderComponent(component, node);
};
goog.provide("quiescent.dom");
goog.require("cljs.core");
goog.require("quiescent");
goog.require("quiescent");
quiescent.dom.js_props = function js_props(obj) {
  if (cljs.core.map_QMARK_.call(null, obj)) {
    var o = function() {
      var obj19874 = {};
      return obj19874;
    }();
    var seq__19875_19881 = cljs.core.seq.call(null, obj);
    var chunk__19876_19882 = null;
    var count__19877_19883 = 0;
    var i__19878_19884 = 0;
    while (true) {
      if (i__19878_19884 < count__19877_19883) {
        var vec__19879_19885 = cljs.core._nth.call(null, chunk__19876_19882, i__19878_19884);
        var k_19886 = cljs.core.nth.call(null, vec__19879_19885, 0, null);
        var v_19887 = cljs.core.nth.call(null, vec__19879_19885, 1, null);
        o[cljs.core.name.call(null, k_19886)] = js_props.call(null, v_19887);
        var G__19888 = seq__19875_19881;
        var G__19889 = chunk__19876_19882;
        var G__19890 = count__19877_19883;
        var G__19891 = i__19878_19884 + 1;
        seq__19875_19881 = G__19888;
        chunk__19876_19882 = G__19889;
        count__19877_19883 = G__19890;
        i__19878_19884 = G__19891;
        continue;
      } else {
        var temp__4092__auto___19892 = cljs.core.seq.call(null, seq__19875_19881);
        if (temp__4092__auto___19892) {
          var seq__19875_19893__$1 = temp__4092__auto___19892;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19875_19893__$1)) {
            var c__17462__auto___19894 = cljs.core.chunk_first.call(null, seq__19875_19893__$1);
            var G__19895 = cljs.core.chunk_rest.call(null, seq__19875_19893__$1);
            var G__19896 = c__17462__auto___19894;
            var G__19897 = cljs.core.count.call(null, c__17462__auto___19894);
            var G__19898 = 0;
            seq__19875_19881 = G__19895;
            chunk__19876_19882 = G__19896;
            count__19877_19883 = G__19897;
            i__19878_19884 = G__19898;
            continue;
          } else {
            var vec__19880_19899 = cljs.core.first.call(null, seq__19875_19893__$1);
            var k_19900 = cljs.core.nth.call(null, vec__19880_19899, 0, null);
            var v_19901 = cljs.core.nth.call(null, vec__19880_19899, 1, null);
            o[cljs.core.name.call(null, k_19900)] = js_props.call(null, v_19901);
            var G__19902 = cljs.core.next.call(null, seq__19875_19893__$1);
            var G__19903 = null;
            var G__19904 = 0;
            var G__19905 = 0;
            seq__19875_19881 = G__19902;
            chunk__19876_19882 = G__19903;
            count__19877_19883 = G__19904;
            i__19878_19884 = G__19905;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o;
  } else {
    return obj;
  }
};
quiescent.dom.a = function() {
  var a__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19910_20858 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19911_20859 = null;
    var count__19912_20860 = 0;
    var i__19913_20861 = 0;
    while (true) {
      if (i__19913_20861 < count__19912_20860) {
        var arg__18890__auto___20862 = cljs.core._nth.call(null, chunk__19911_20859, i__19913_20861);
        a__18889__auto__.push(arg__18890__auto___20862);
        var G__20863 = seq__19910_20858;
        var G__20864 = chunk__19911_20859;
        var G__20865 = count__19912_20860;
        var G__20866 = i__19913_20861 + 1;
        seq__19910_20858 = G__20863;
        chunk__19911_20859 = G__20864;
        count__19912_20860 = G__20865;
        i__19913_20861 = G__20866;
        continue;
      } else {
        var temp__4092__auto___20867 = cljs.core.seq.call(null, seq__19910_20858);
        if (temp__4092__auto___20867) {
          var seq__19910_20868__$1 = temp__4092__auto___20867;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19910_20868__$1)) {
            var c__17462__auto___20869 = cljs.core.chunk_first.call(null, seq__19910_20868__$1);
            var G__20870 = cljs.core.chunk_rest.call(null, seq__19910_20868__$1);
            var G__20871 = c__17462__auto___20869;
            var G__20872 = cljs.core.count.call(null, c__17462__auto___20869);
            var G__20873 = 0;
            seq__19910_20858 = G__20870;
            chunk__19911_20859 = G__20871;
            count__19912_20860 = G__20872;
            i__19913_20861 = G__20873;
            continue;
          } else {
            var arg__18890__auto___20874 = cljs.core.first.call(null, seq__19910_20868__$1);
            a__18889__auto__.push(arg__18890__auto___20874);
            var G__20875 = cljs.core.next.call(null, seq__19910_20868__$1);
            var G__20876 = null;
            var G__20877 = 0;
            var G__20878 = 0;
            seq__19910_20858 = G__20875;
            chunk__19911_20859 = G__20876;
            count__19912_20860 = G__20877;
            i__19913_20861 = G__20878;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.a.apply(null, a__18889__auto__);
  };
  var a = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return a__delegate.call(this, args__18888__auto__);
  };
  a.cljs$lang$maxFixedArity = 0;
  a.cljs$lang$applyTo = function(arglist__20879) {
    var args__18888__auto__ = cljs.core.seq(arglist__20879);
    return a__delegate(args__18888__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
quiescent.dom.abbr = function() {
  var abbr__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19918_20880 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19919_20881 = null;
    var count__19920_20882 = 0;
    var i__19921_20883 = 0;
    while (true) {
      if (i__19921_20883 < count__19920_20882) {
        var arg__18890__auto___20884 = cljs.core._nth.call(null, chunk__19919_20881, i__19921_20883);
        a__18889__auto__.push(arg__18890__auto___20884);
        var G__20885 = seq__19918_20880;
        var G__20886 = chunk__19919_20881;
        var G__20887 = count__19920_20882;
        var G__20888 = i__19921_20883 + 1;
        seq__19918_20880 = G__20885;
        chunk__19919_20881 = G__20886;
        count__19920_20882 = G__20887;
        i__19921_20883 = G__20888;
        continue;
      } else {
        var temp__4092__auto___20889 = cljs.core.seq.call(null, seq__19918_20880);
        if (temp__4092__auto___20889) {
          var seq__19918_20890__$1 = temp__4092__auto___20889;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19918_20890__$1)) {
            var c__17462__auto___20891 = cljs.core.chunk_first.call(null, seq__19918_20890__$1);
            var G__20892 = cljs.core.chunk_rest.call(null, seq__19918_20890__$1);
            var G__20893 = c__17462__auto___20891;
            var G__20894 = cljs.core.count.call(null, c__17462__auto___20891);
            var G__20895 = 0;
            seq__19918_20880 = G__20892;
            chunk__19919_20881 = G__20893;
            count__19920_20882 = G__20894;
            i__19921_20883 = G__20895;
            continue;
          } else {
            var arg__18890__auto___20896 = cljs.core.first.call(null, seq__19918_20890__$1);
            a__18889__auto__.push(arg__18890__auto___20896);
            var G__20897 = cljs.core.next.call(null, seq__19918_20890__$1);
            var G__20898 = null;
            var G__20899 = 0;
            var G__20900 = 0;
            seq__19918_20880 = G__20897;
            chunk__19919_20881 = G__20898;
            count__19920_20882 = G__20899;
            i__19921_20883 = G__20900;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.abbr.apply(null, a__18889__auto__);
  };
  var abbr = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return abbr__delegate.call(this, args__18888__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 0;
  abbr.cljs$lang$applyTo = function(arglist__20901) {
    var args__18888__auto__ = cljs.core.seq(arglist__20901);
    return abbr__delegate(args__18888__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
quiescent.dom.address = function() {
  var address__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19926_20902 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19927_20903 = null;
    var count__19928_20904 = 0;
    var i__19929_20905 = 0;
    while (true) {
      if (i__19929_20905 < count__19928_20904) {
        var arg__18890__auto___20906 = cljs.core._nth.call(null, chunk__19927_20903, i__19929_20905);
        a__18889__auto__.push(arg__18890__auto___20906);
        var G__20907 = seq__19926_20902;
        var G__20908 = chunk__19927_20903;
        var G__20909 = count__19928_20904;
        var G__20910 = i__19929_20905 + 1;
        seq__19926_20902 = G__20907;
        chunk__19927_20903 = G__20908;
        count__19928_20904 = G__20909;
        i__19929_20905 = G__20910;
        continue;
      } else {
        var temp__4092__auto___20911 = cljs.core.seq.call(null, seq__19926_20902);
        if (temp__4092__auto___20911) {
          var seq__19926_20912__$1 = temp__4092__auto___20911;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19926_20912__$1)) {
            var c__17462__auto___20913 = cljs.core.chunk_first.call(null, seq__19926_20912__$1);
            var G__20914 = cljs.core.chunk_rest.call(null, seq__19926_20912__$1);
            var G__20915 = c__17462__auto___20913;
            var G__20916 = cljs.core.count.call(null, c__17462__auto___20913);
            var G__20917 = 0;
            seq__19926_20902 = G__20914;
            chunk__19927_20903 = G__20915;
            count__19928_20904 = G__20916;
            i__19929_20905 = G__20917;
            continue;
          } else {
            var arg__18890__auto___20918 = cljs.core.first.call(null, seq__19926_20912__$1);
            a__18889__auto__.push(arg__18890__auto___20918);
            var G__20919 = cljs.core.next.call(null, seq__19926_20912__$1);
            var G__20920 = null;
            var G__20921 = 0;
            var G__20922 = 0;
            seq__19926_20902 = G__20919;
            chunk__19927_20903 = G__20920;
            count__19928_20904 = G__20921;
            i__19929_20905 = G__20922;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.address.apply(null, a__18889__auto__);
  };
  var address = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return address__delegate.call(this, args__18888__auto__);
  };
  address.cljs$lang$maxFixedArity = 0;
  address.cljs$lang$applyTo = function(arglist__20923) {
    var args__18888__auto__ = cljs.core.seq(arglist__20923);
    return address__delegate(args__18888__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
quiescent.dom.area = function() {
  var area__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19934_20924 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19935_20925 = null;
    var count__19936_20926 = 0;
    var i__19937_20927 = 0;
    while (true) {
      if (i__19937_20927 < count__19936_20926) {
        var arg__18890__auto___20928 = cljs.core._nth.call(null, chunk__19935_20925, i__19937_20927);
        a__18889__auto__.push(arg__18890__auto___20928);
        var G__20929 = seq__19934_20924;
        var G__20930 = chunk__19935_20925;
        var G__20931 = count__19936_20926;
        var G__20932 = i__19937_20927 + 1;
        seq__19934_20924 = G__20929;
        chunk__19935_20925 = G__20930;
        count__19936_20926 = G__20931;
        i__19937_20927 = G__20932;
        continue;
      } else {
        var temp__4092__auto___20933 = cljs.core.seq.call(null, seq__19934_20924);
        if (temp__4092__auto___20933) {
          var seq__19934_20934__$1 = temp__4092__auto___20933;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19934_20934__$1)) {
            var c__17462__auto___20935 = cljs.core.chunk_first.call(null, seq__19934_20934__$1);
            var G__20936 = cljs.core.chunk_rest.call(null, seq__19934_20934__$1);
            var G__20937 = c__17462__auto___20935;
            var G__20938 = cljs.core.count.call(null, c__17462__auto___20935);
            var G__20939 = 0;
            seq__19934_20924 = G__20936;
            chunk__19935_20925 = G__20937;
            count__19936_20926 = G__20938;
            i__19937_20927 = G__20939;
            continue;
          } else {
            var arg__18890__auto___20940 = cljs.core.first.call(null, seq__19934_20934__$1);
            a__18889__auto__.push(arg__18890__auto___20940);
            var G__20941 = cljs.core.next.call(null, seq__19934_20934__$1);
            var G__20942 = null;
            var G__20943 = 0;
            var G__20944 = 0;
            seq__19934_20924 = G__20941;
            chunk__19935_20925 = G__20942;
            count__19936_20926 = G__20943;
            i__19937_20927 = G__20944;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.area.apply(null, a__18889__auto__);
  };
  var area = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return area__delegate.call(this, args__18888__auto__);
  };
  area.cljs$lang$maxFixedArity = 0;
  area.cljs$lang$applyTo = function(arglist__20945) {
    var args__18888__auto__ = cljs.core.seq(arglist__20945);
    return area__delegate(args__18888__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
quiescent.dom.article = function() {
  var article__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19942_20946 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19943_20947 = null;
    var count__19944_20948 = 0;
    var i__19945_20949 = 0;
    while (true) {
      if (i__19945_20949 < count__19944_20948) {
        var arg__18890__auto___20950 = cljs.core._nth.call(null, chunk__19943_20947, i__19945_20949);
        a__18889__auto__.push(arg__18890__auto___20950);
        var G__20951 = seq__19942_20946;
        var G__20952 = chunk__19943_20947;
        var G__20953 = count__19944_20948;
        var G__20954 = i__19945_20949 + 1;
        seq__19942_20946 = G__20951;
        chunk__19943_20947 = G__20952;
        count__19944_20948 = G__20953;
        i__19945_20949 = G__20954;
        continue;
      } else {
        var temp__4092__auto___20955 = cljs.core.seq.call(null, seq__19942_20946);
        if (temp__4092__auto___20955) {
          var seq__19942_20956__$1 = temp__4092__auto___20955;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19942_20956__$1)) {
            var c__17462__auto___20957 = cljs.core.chunk_first.call(null, seq__19942_20956__$1);
            var G__20958 = cljs.core.chunk_rest.call(null, seq__19942_20956__$1);
            var G__20959 = c__17462__auto___20957;
            var G__20960 = cljs.core.count.call(null, c__17462__auto___20957);
            var G__20961 = 0;
            seq__19942_20946 = G__20958;
            chunk__19943_20947 = G__20959;
            count__19944_20948 = G__20960;
            i__19945_20949 = G__20961;
            continue;
          } else {
            var arg__18890__auto___20962 = cljs.core.first.call(null, seq__19942_20956__$1);
            a__18889__auto__.push(arg__18890__auto___20962);
            var G__20963 = cljs.core.next.call(null, seq__19942_20956__$1);
            var G__20964 = null;
            var G__20965 = 0;
            var G__20966 = 0;
            seq__19942_20946 = G__20963;
            chunk__19943_20947 = G__20964;
            count__19944_20948 = G__20965;
            i__19945_20949 = G__20966;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.article.apply(null, a__18889__auto__);
  };
  var article = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return article__delegate.call(this, args__18888__auto__);
  };
  article.cljs$lang$maxFixedArity = 0;
  article.cljs$lang$applyTo = function(arglist__20967) {
    var args__18888__auto__ = cljs.core.seq(arglist__20967);
    return article__delegate(args__18888__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
quiescent.dom.aside = function() {
  var aside__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19950_20968 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19951_20969 = null;
    var count__19952_20970 = 0;
    var i__19953_20971 = 0;
    while (true) {
      if (i__19953_20971 < count__19952_20970) {
        var arg__18890__auto___20972 = cljs.core._nth.call(null, chunk__19951_20969, i__19953_20971);
        a__18889__auto__.push(arg__18890__auto___20972);
        var G__20973 = seq__19950_20968;
        var G__20974 = chunk__19951_20969;
        var G__20975 = count__19952_20970;
        var G__20976 = i__19953_20971 + 1;
        seq__19950_20968 = G__20973;
        chunk__19951_20969 = G__20974;
        count__19952_20970 = G__20975;
        i__19953_20971 = G__20976;
        continue;
      } else {
        var temp__4092__auto___20977 = cljs.core.seq.call(null, seq__19950_20968);
        if (temp__4092__auto___20977) {
          var seq__19950_20978__$1 = temp__4092__auto___20977;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19950_20978__$1)) {
            var c__17462__auto___20979 = cljs.core.chunk_first.call(null, seq__19950_20978__$1);
            var G__20980 = cljs.core.chunk_rest.call(null, seq__19950_20978__$1);
            var G__20981 = c__17462__auto___20979;
            var G__20982 = cljs.core.count.call(null, c__17462__auto___20979);
            var G__20983 = 0;
            seq__19950_20968 = G__20980;
            chunk__19951_20969 = G__20981;
            count__19952_20970 = G__20982;
            i__19953_20971 = G__20983;
            continue;
          } else {
            var arg__18890__auto___20984 = cljs.core.first.call(null, seq__19950_20978__$1);
            a__18889__auto__.push(arg__18890__auto___20984);
            var G__20985 = cljs.core.next.call(null, seq__19950_20978__$1);
            var G__20986 = null;
            var G__20987 = 0;
            var G__20988 = 0;
            seq__19950_20968 = G__20985;
            chunk__19951_20969 = G__20986;
            count__19952_20970 = G__20987;
            i__19953_20971 = G__20988;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.aside.apply(null, a__18889__auto__);
  };
  var aside = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return aside__delegate.call(this, args__18888__auto__);
  };
  aside.cljs$lang$maxFixedArity = 0;
  aside.cljs$lang$applyTo = function(arglist__20989) {
    var args__18888__auto__ = cljs.core.seq(arglist__20989);
    return aside__delegate(args__18888__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
quiescent.dom.audio = function() {
  var audio__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19958_20990 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19959_20991 = null;
    var count__19960_20992 = 0;
    var i__19961_20993 = 0;
    while (true) {
      if (i__19961_20993 < count__19960_20992) {
        var arg__18890__auto___20994 = cljs.core._nth.call(null, chunk__19959_20991, i__19961_20993);
        a__18889__auto__.push(arg__18890__auto___20994);
        var G__20995 = seq__19958_20990;
        var G__20996 = chunk__19959_20991;
        var G__20997 = count__19960_20992;
        var G__20998 = i__19961_20993 + 1;
        seq__19958_20990 = G__20995;
        chunk__19959_20991 = G__20996;
        count__19960_20992 = G__20997;
        i__19961_20993 = G__20998;
        continue;
      } else {
        var temp__4092__auto___20999 = cljs.core.seq.call(null, seq__19958_20990);
        if (temp__4092__auto___20999) {
          var seq__19958_21000__$1 = temp__4092__auto___20999;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19958_21000__$1)) {
            var c__17462__auto___21001 = cljs.core.chunk_first.call(null, seq__19958_21000__$1);
            var G__21002 = cljs.core.chunk_rest.call(null, seq__19958_21000__$1);
            var G__21003 = c__17462__auto___21001;
            var G__21004 = cljs.core.count.call(null, c__17462__auto___21001);
            var G__21005 = 0;
            seq__19958_20990 = G__21002;
            chunk__19959_20991 = G__21003;
            count__19960_20992 = G__21004;
            i__19961_20993 = G__21005;
            continue;
          } else {
            var arg__18890__auto___21006 = cljs.core.first.call(null, seq__19958_21000__$1);
            a__18889__auto__.push(arg__18890__auto___21006);
            var G__21007 = cljs.core.next.call(null, seq__19958_21000__$1);
            var G__21008 = null;
            var G__21009 = 0;
            var G__21010 = 0;
            seq__19958_20990 = G__21007;
            chunk__19959_20991 = G__21008;
            count__19960_20992 = G__21009;
            i__19961_20993 = G__21010;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.audio.apply(null, a__18889__auto__);
  };
  var audio = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return audio__delegate.call(this, args__18888__auto__);
  };
  audio.cljs$lang$maxFixedArity = 0;
  audio.cljs$lang$applyTo = function(arglist__21011) {
    var args__18888__auto__ = cljs.core.seq(arglist__21011);
    return audio__delegate(args__18888__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
quiescent.dom.b = function() {
  var b__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19966_21012 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19967_21013 = null;
    var count__19968_21014 = 0;
    var i__19969_21015 = 0;
    while (true) {
      if (i__19969_21015 < count__19968_21014) {
        var arg__18890__auto___21016 = cljs.core._nth.call(null, chunk__19967_21013, i__19969_21015);
        a__18889__auto__.push(arg__18890__auto___21016);
        var G__21017 = seq__19966_21012;
        var G__21018 = chunk__19967_21013;
        var G__21019 = count__19968_21014;
        var G__21020 = i__19969_21015 + 1;
        seq__19966_21012 = G__21017;
        chunk__19967_21013 = G__21018;
        count__19968_21014 = G__21019;
        i__19969_21015 = G__21020;
        continue;
      } else {
        var temp__4092__auto___21021 = cljs.core.seq.call(null, seq__19966_21012);
        if (temp__4092__auto___21021) {
          var seq__19966_21022__$1 = temp__4092__auto___21021;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19966_21022__$1)) {
            var c__17462__auto___21023 = cljs.core.chunk_first.call(null, seq__19966_21022__$1);
            var G__21024 = cljs.core.chunk_rest.call(null, seq__19966_21022__$1);
            var G__21025 = c__17462__auto___21023;
            var G__21026 = cljs.core.count.call(null, c__17462__auto___21023);
            var G__21027 = 0;
            seq__19966_21012 = G__21024;
            chunk__19967_21013 = G__21025;
            count__19968_21014 = G__21026;
            i__19969_21015 = G__21027;
            continue;
          } else {
            var arg__18890__auto___21028 = cljs.core.first.call(null, seq__19966_21022__$1);
            a__18889__auto__.push(arg__18890__auto___21028);
            var G__21029 = cljs.core.next.call(null, seq__19966_21022__$1);
            var G__21030 = null;
            var G__21031 = 0;
            var G__21032 = 0;
            seq__19966_21012 = G__21029;
            chunk__19967_21013 = G__21030;
            count__19968_21014 = G__21031;
            i__19969_21015 = G__21032;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.b.apply(null, a__18889__auto__);
  };
  var b = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return b__delegate.call(this, args__18888__auto__);
  };
  b.cljs$lang$maxFixedArity = 0;
  b.cljs$lang$applyTo = function(arglist__21033) {
    var args__18888__auto__ = cljs.core.seq(arglist__21033);
    return b__delegate(args__18888__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
quiescent.dom.base = function() {
  var base__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19974_21034 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19975_21035 = null;
    var count__19976_21036 = 0;
    var i__19977_21037 = 0;
    while (true) {
      if (i__19977_21037 < count__19976_21036) {
        var arg__18890__auto___21038 = cljs.core._nth.call(null, chunk__19975_21035, i__19977_21037);
        a__18889__auto__.push(arg__18890__auto___21038);
        var G__21039 = seq__19974_21034;
        var G__21040 = chunk__19975_21035;
        var G__21041 = count__19976_21036;
        var G__21042 = i__19977_21037 + 1;
        seq__19974_21034 = G__21039;
        chunk__19975_21035 = G__21040;
        count__19976_21036 = G__21041;
        i__19977_21037 = G__21042;
        continue;
      } else {
        var temp__4092__auto___21043 = cljs.core.seq.call(null, seq__19974_21034);
        if (temp__4092__auto___21043) {
          var seq__19974_21044__$1 = temp__4092__auto___21043;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19974_21044__$1)) {
            var c__17462__auto___21045 = cljs.core.chunk_first.call(null, seq__19974_21044__$1);
            var G__21046 = cljs.core.chunk_rest.call(null, seq__19974_21044__$1);
            var G__21047 = c__17462__auto___21045;
            var G__21048 = cljs.core.count.call(null, c__17462__auto___21045);
            var G__21049 = 0;
            seq__19974_21034 = G__21046;
            chunk__19975_21035 = G__21047;
            count__19976_21036 = G__21048;
            i__19977_21037 = G__21049;
            continue;
          } else {
            var arg__18890__auto___21050 = cljs.core.first.call(null, seq__19974_21044__$1);
            a__18889__auto__.push(arg__18890__auto___21050);
            var G__21051 = cljs.core.next.call(null, seq__19974_21044__$1);
            var G__21052 = null;
            var G__21053 = 0;
            var G__21054 = 0;
            seq__19974_21034 = G__21051;
            chunk__19975_21035 = G__21052;
            count__19976_21036 = G__21053;
            i__19977_21037 = G__21054;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.base.apply(null, a__18889__auto__);
  };
  var base = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return base__delegate.call(this, args__18888__auto__);
  };
  base.cljs$lang$maxFixedArity = 0;
  base.cljs$lang$applyTo = function(arglist__21055) {
    var args__18888__auto__ = cljs.core.seq(arglist__21055);
    return base__delegate(args__18888__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
quiescent.dom.bdi = function() {
  var bdi__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19982_21056 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19983_21057 = null;
    var count__19984_21058 = 0;
    var i__19985_21059 = 0;
    while (true) {
      if (i__19985_21059 < count__19984_21058) {
        var arg__18890__auto___21060 = cljs.core._nth.call(null, chunk__19983_21057, i__19985_21059);
        a__18889__auto__.push(arg__18890__auto___21060);
        var G__21061 = seq__19982_21056;
        var G__21062 = chunk__19983_21057;
        var G__21063 = count__19984_21058;
        var G__21064 = i__19985_21059 + 1;
        seq__19982_21056 = G__21061;
        chunk__19983_21057 = G__21062;
        count__19984_21058 = G__21063;
        i__19985_21059 = G__21064;
        continue;
      } else {
        var temp__4092__auto___21065 = cljs.core.seq.call(null, seq__19982_21056);
        if (temp__4092__auto___21065) {
          var seq__19982_21066__$1 = temp__4092__auto___21065;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19982_21066__$1)) {
            var c__17462__auto___21067 = cljs.core.chunk_first.call(null, seq__19982_21066__$1);
            var G__21068 = cljs.core.chunk_rest.call(null, seq__19982_21066__$1);
            var G__21069 = c__17462__auto___21067;
            var G__21070 = cljs.core.count.call(null, c__17462__auto___21067);
            var G__21071 = 0;
            seq__19982_21056 = G__21068;
            chunk__19983_21057 = G__21069;
            count__19984_21058 = G__21070;
            i__19985_21059 = G__21071;
            continue;
          } else {
            var arg__18890__auto___21072 = cljs.core.first.call(null, seq__19982_21066__$1);
            a__18889__auto__.push(arg__18890__auto___21072);
            var G__21073 = cljs.core.next.call(null, seq__19982_21066__$1);
            var G__21074 = null;
            var G__21075 = 0;
            var G__21076 = 0;
            seq__19982_21056 = G__21073;
            chunk__19983_21057 = G__21074;
            count__19984_21058 = G__21075;
            i__19985_21059 = G__21076;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdi.apply(null, a__18889__auto__);
  };
  var bdi = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bdi__delegate.call(this, args__18888__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 0;
  bdi.cljs$lang$applyTo = function(arglist__21077) {
    var args__18888__auto__ = cljs.core.seq(arglist__21077);
    return bdi__delegate(args__18888__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
quiescent.dom.bdo = function() {
  var bdo__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19990_21078 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19991_21079 = null;
    var count__19992_21080 = 0;
    var i__19993_21081 = 0;
    while (true) {
      if (i__19993_21081 < count__19992_21080) {
        var arg__18890__auto___21082 = cljs.core._nth.call(null, chunk__19991_21079, i__19993_21081);
        a__18889__auto__.push(arg__18890__auto___21082);
        var G__21083 = seq__19990_21078;
        var G__21084 = chunk__19991_21079;
        var G__21085 = count__19992_21080;
        var G__21086 = i__19993_21081 + 1;
        seq__19990_21078 = G__21083;
        chunk__19991_21079 = G__21084;
        count__19992_21080 = G__21085;
        i__19993_21081 = G__21086;
        continue;
      } else {
        var temp__4092__auto___21087 = cljs.core.seq.call(null, seq__19990_21078);
        if (temp__4092__auto___21087) {
          var seq__19990_21088__$1 = temp__4092__auto___21087;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19990_21088__$1)) {
            var c__17462__auto___21089 = cljs.core.chunk_first.call(null, seq__19990_21088__$1);
            var G__21090 = cljs.core.chunk_rest.call(null, seq__19990_21088__$1);
            var G__21091 = c__17462__auto___21089;
            var G__21092 = cljs.core.count.call(null, c__17462__auto___21089);
            var G__21093 = 0;
            seq__19990_21078 = G__21090;
            chunk__19991_21079 = G__21091;
            count__19992_21080 = G__21092;
            i__19993_21081 = G__21093;
            continue;
          } else {
            var arg__18890__auto___21094 = cljs.core.first.call(null, seq__19990_21088__$1);
            a__18889__auto__.push(arg__18890__auto___21094);
            var G__21095 = cljs.core.next.call(null, seq__19990_21088__$1);
            var G__21096 = null;
            var G__21097 = 0;
            var G__21098 = 0;
            seq__19990_21078 = G__21095;
            chunk__19991_21079 = G__21096;
            count__19992_21080 = G__21097;
            i__19993_21081 = G__21098;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdo.apply(null, a__18889__auto__);
  };
  var bdo = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bdo__delegate.call(this, args__18888__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 0;
  bdo.cljs$lang$applyTo = function(arglist__21099) {
    var args__18888__auto__ = cljs.core.seq(arglist__21099);
    return bdo__delegate(args__18888__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
quiescent.dom.big = function() {
  var big__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__19998_21100 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__19999_21101 = null;
    var count__20000_21102 = 0;
    var i__20001_21103 = 0;
    while (true) {
      if (i__20001_21103 < count__20000_21102) {
        var arg__18890__auto___21104 = cljs.core._nth.call(null, chunk__19999_21101, i__20001_21103);
        a__18889__auto__.push(arg__18890__auto___21104);
        var G__21105 = seq__19998_21100;
        var G__21106 = chunk__19999_21101;
        var G__21107 = count__20000_21102;
        var G__21108 = i__20001_21103 + 1;
        seq__19998_21100 = G__21105;
        chunk__19999_21101 = G__21106;
        count__20000_21102 = G__21107;
        i__20001_21103 = G__21108;
        continue;
      } else {
        var temp__4092__auto___21109 = cljs.core.seq.call(null, seq__19998_21100);
        if (temp__4092__auto___21109) {
          var seq__19998_21110__$1 = temp__4092__auto___21109;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19998_21110__$1)) {
            var c__17462__auto___21111 = cljs.core.chunk_first.call(null, seq__19998_21110__$1);
            var G__21112 = cljs.core.chunk_rest.call(null, seq__19998_21110__$1);
            var G__21113 = c__17462__auto___21111;
            var G__21114 = cljs.core.count.call(null, c__17462__auto___21111);
            var G__21115 = 0;
            seq__19998_21100 = G__21112;
            chunk__19999_21101 = G__21113;
            count__20000_21102 = G__21114;
            i__20001_21103 = G__21115;
            continue;
          } else {
            var arg__18890__auto___21116 = cljs.core.first.call(null, seq__19998_21110__$1);
            a__18889__auto__.push(arg__18890__auto___21116);
            var G__21117 = cljs.core.next.call(null, seq__19998_21110__$1);
            var G__21118 = null;
            var G__21119 = 0;
            var G__21120 = 0;
            seq__19998_21100 = G__21117;
            chunk__19999_21101 = G__21118;
            count__20000_21102 = G__21119;
            i__20001_21103 = G__21120;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.big.apply(null, a__18889__auto__);
  };
  var big = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return big__delegate.call(this, args__18888__auto__);
  };
  big.cljs$lang$maxFixedArity = 0;
  big.cljs$lang$applyTo = function(arglist__21121) {
    var args__18888__auto__ = cljs.core.seq(arglist__21121);
    return big__delegate(args__18888__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
quiescent.dom.blockquote = function() {
  var blockquote__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20006_21122 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20007_21123 = null;
    var count__20008_21124 = 0;
    var i__20009_21125 = 0;
    while (true) {
      if (i__20009_21125 < count__20008_21124) {
        var arg__18890__auto___21126 = cljs.core._nth.call(null, chunk__20007_21123, i__20009_21125);
        a__18889__auto__.push(arg__18890__auto___21126);
        var G__21127 = seq__20006_21122;
        var G__21128 = chunk__20007_21123;
        var G__21129 = count__20008_21124;
        var G__21130 = i__20009_21125 + 1;
        seq__20006_21122 = G__21127;
        chunk__20007_21123 = G__21128;
        count__20008_21124 = G__21129;
        i__20009_21125 = G__21130;
        continue;
      } else {
        var temp__4092__auto___21131 = cljs.core.seq.call(null, seq__20006_21122);
        if (temp__4092__auto___21131) {
          var seq__20006_21132__$1 = temp__4092__auto___21131;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20006_21132__$1)) {
            var c__17462__auto___21133 = cljs.core.chunk_first.call(null, seq__20006_21132__$1);
            var G__21134 = cljs.core.chunk_rest.call(null, seq__20006_21132__$1);
            var G__21135 = c__17462__auto___21133;
            var G__21136 = cljs.core.count.call(null, c__17462__auto___21133);
            var G__21137 = 0;
            seq__20006_21122 = G__21134;
            chunk__20007_21123 = G__21135;
            count__20008_21124 = G__21136;
            i__20009_21125 = G__21137;
            continue;
          } else {
            var arg__18890__auto___21138 = cljs.core.first.call(null, seq__20006_21132__$1);
            a__18889__auto__.push(arg__18890__auto___21138);
            var G__21139 = cljs.core.next.call(null, seq__20006_21132__$1);
            var G__21140 = null;
            var G__21141 = 0;
            var G__21142 = 0;
            seq__20006_21122 = G__21139;
            chunk__20007_21123 = G__21140;
            count__20008_21124 = G__21141;
            i__20009_21125 = G__21142;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.blockquote.apply(null, a__18889__auto__);
  };
  var blockquote = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return blockquote__delegate.call(this, args__18888__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 0;
  blockquote.cljs$lang$applyTo = function(arglist__21143) {
    var args__18888__auto__ = cljs.core.seq(arglist__21143);
    return blockquote__delegate(args__18888__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
quiescent.dom.body = function() {
  var body__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20014_21144 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20015_21145 = null;
    var count__20016_21146 = 0;
    var i__20017_21147 = 0;
    while (true) {
      if (i__20017_21147 < count__20016_21146) {
        var arg__18890__auto___21148 = cljs.core._nth.call(null, chunk__20015_21145, i__20017_21147);
        a__18889__auto__.push(arg__18890__auto___21148);
        var G__21149 = seq__20014_21144;
        var G__21150 = chunk__20015_21145;
        var G__21151 = count__20016_21146;
        var G__21152 = i__20017_21147 + 1;
        seq__20014_21144 = G__21149;
        chunk__20015_21145 = G__21150;
        count__20016_21146 = G__21151;
        i__20017_21147 = G__21152;
        continue;
      } else {
        var temp__4092__auto___21153 = cljs.core.seq.call(null, seq__20014_21144);
        if (temp__4092__auto___21153) {
          var seq__20014_21154__$1 = temp__4092__auto___21153;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20014_21154__$1)) {
            var c__17462__auto___21155 = cljs.core.chunk_first.call(null, seq__20014_21154__$1);
            var G__21156 = cljs.core.chunk_rest.call(null, seq__20014_21154__$1);
            var G__21157 = c__17462__auto___21155;
            var G__21158 = cljs.core.count.call(null, c__17462__auto___21155);
            var G__21159 = 0;
            seq__20014_21144 = G__21156;
            chunk__20015_21145 = G__21157;
            count__20016_21146 = G__21158;
            i__20017_21147 = G__21159;
            continue;
          } else {
            var arg__18890__auto___21160 = cljs.core.first.call(null, seq__20014_21154__$1);
            a__18889__auto__.push(arg__18890__auto___21160);
            var G__21161 = cljs.core.next.call(null, seq__20014_21154__$1);
            var G__21162 = null;
            var G__21163 = 0;
            var G__21164 = 0;
            seq__20014_21144 = G__21161;
            chunk__20015_21145 = G__21162;
            count__20016_21146 = G__21163;
            i__20017_21147 = G__21164;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.body.apply(null, a__18889__auto__);
  };
  var body = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return body__delegate.call(this, args__18888__auto__);
  };
  body.cljs$lang$maxFixedArity = 0;
  body.cljs$lang$applyTo = function(arglist__21165) {
    var args__18888__auto__ = cljs.core.seq(arglist__21165);
    return body__delegate(args__18888__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
quiescent.dom.br = function() {
  var br__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20022_21166 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20023_21167 = null;
    var count__20024_21168 = 0;
    var i__20025_21169 = 0;
    while (true) {
      if (i__20025_21169 < count__20024_21168) {
        var arg__18890__auto___21170 = cljs.core._nth.call(null, chunk__20023_21167, i__20025_21169);
        a__18889__auto__.push(arg__18890__auto___21170);
        var G__21171 = seq__20022_21166;
        var G__21172 = chunk__20023_21167;
        var G__21173 = count__20024_21168;
        var G__21174 = i__20025_21169 + 1;
        seq__20022_21166 = G__21171;
        chunk__20023_21167 = G__21172;
        count__20024_21168 = G__21173;
        i__20025_21169 = G__21174;
        continue;
      } else {
        var temp__4092__auto___21175 = cljs.core.seq.call(null, seq__20022_21166);
        if (temp__4092__auto___21175) {
          var seq__20022_21176__$1 = temp__4092__auto___21175;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20022_21176__$1)) {
            var c__17462__auto___21177 = cljs.core.chunk_first.call(null, seq__20022_21176__$1);
            var G__21178 = cljs.core.chunk_rest.call(null, seq__20022_21176__$1);
            var G__21179 = c__17462__auto___21177;
            var G__21180 = cljs.core.count.call(null, c__17462__auto___21177);
            var G__21181 = 0;
            seq__20022_21166 = G__21178;
            chunk__20023_21167 = G__21179;
            count__20024_21168 = G__21180;
            i__20025_21169 = G__21181;
            continue;
          } else {
            var arg__18890__auto___21182 = cljs.core.first.call(null, seq__20022_21176__$1);
            a__18889__auto__.push(arg__18890__auto___21182);
            var G__21183 = cljs.core.next.call(null, seq__20022_21176__$1);
            var G__21184 = null;
            var G__21185 = 0;
            var G__21186 = 0;
            seq__20022_21166 = G__21183;
            chunk__20023_21167 = G__21184;
            count__20024_21168 = G__21185;
            i__20025_21169 = G__21186;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.br.apply(null, a__18889__auto__);
  };
  var br = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return br__delegate.call(this, args__18888__auto__);
  };
  br.cljs$lang$maxFixedArity = 0;
  br.cljs$lang$applyTo = function(arglist__21187) {
    var args__18888__auto__ = cljs.core.seq(arglist__21187);
    return br__delegate(args__18888__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
quiescent.dom.button = function() {
  var button__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20030_21188 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20031_21189 = null;
    var count__20032_21190 = 0;
    var i__20033_21191 = 0;
    while (true) {
      if (i__20033_21191 < count__20032_21190) {
        var arg__18890__auto___21192 = cljs.core._nth.call(null, chunk__20031_21189, i__20033_21191);
        a__18889__auto__.push(arg__18890__auto___21192);
        var G__21193 = seq__20030_21188;
        var G__21194 = chunk__20031_21189;
        var G__21195 = count__20032_21190;
        var G__21196 = i__20033_21191 + 1;
        seq__20030_21188 = G__21193;
        chunk__20031_21189 = G__21194;
        count__20032_21190 = G__21195;
        i__20033_21191 = G__21196;
        continue;
      } else {
        var temp__4092__auto___21197 = cljs.core.seq.call(null, seq__20030_21188);
        if (temp__4092__auto___21197) {
          var seq__20030_21198__$1 = temp__4092__auto___21197;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20030_21198__$1)) {
            var c__17462__auto___21199 = cljs.core.chunk_first.call(null, seq__20030_21198__$1);
            var G__21200 = cljs.core.chunk_rest.call(null, seq__20030_21198__$1);
            var G__21201 = c__17462__auto___21199;
            var G__21202 = cljs.core.count.call(null, c__17462__auto___21199);
            var G__21203 = 0;
            seq__20030_21188 = G__21200;
            chunk__20031_21189 = G__21201;
            count__20032_21190 = G__21202;
            i__20033_21191 = G__21203;
            continue;
          } else {
            var arg__18890__auto___21204 = cljs.core.first.call(null, seq__20030_21198__$1);
            a__18889__auto__.push(arg__18890__auto___21204);
            var G__21205 = cljs.core.next.call(null, seq__20030_21198__$1);
            var G__21206 = null;
            var G__21207 = 0;
            var G__21208 = 0;
            seq__20030_21188 = G__21205;
            chunk__20031_21189 = G__21206;
            count__20032_21190 = G__21207;
            i__20033_21191 = G__21208;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.button.apply(null, a__18889__auto__);
  };
  var button = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return button__delegate.call(this, args__18888__auto__);
  };
  button.cljs$lang$maxFixedArity = 0;
  button.cljs$lang$applyTo = function(arglist__21209) {
    var args__18888__auto__ = cljs.core.seq(arglist__21209);
    return button__delegate(args__18888__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
quiescent.dom.canvas = function() {
  var canvas__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20038_21210 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20039_21211 = null;
    var count__20040_21212 = 0;
    var i__20041_21213 = 0;
    while (true) {
      if (i__20041_21213 < count__20040_21212) {
        var arg__18890__auto___21214 = cljs.core._nth.call(null, chunk__20039_21211, i__20041_21213);
        a__18889__auto__.push(arg__18890__auto___21214);
        var G__21215 = seq__20038_21210;
        var G__21216 = chunk__20039_21211;
        var G__21217 = count__20040_21212;
        var G__21218 = i__20041_21213 + 1;
        seq__20038_21210 = G__21215;
        chunk__20039_21211 = G__21216;
        count__20040_21212 = G__21217;
        i__20041_21213 = G__21218;
        continue;
      } else {
        var temp__4092__auto___21219 = cljs.core.seq.call(null, seq__20038_21210);
        if (temp__4092__auto___21219) {
          var seq__20038_21220__$1 = temp__4092__auto___21219;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20038_21220__$1)) {
            var c__17462__auto___21221 = cljs.core.chunk_first.call(null, seq__20038_21220__$1);
            var G__21222 = cljs.core.chunk_rest.call(null, seq__20038_21220__$1);
            var G__21223 = c__17462__auto___21221;
            var G__21224 = cljs.core.count.call(null, c__17462__auto___21221);
            var G__21225 = 0;
            seq__20038_21210 = G__21222;
            chunk__20039_21211 = G__21223;
            count__20040_21212 = G__21224;
            i__20041_21213 = G__21225;
            continue;
          } else {
            var arg__18890__auto___21226 = cljs.core.first.call(null, seq__20038_21220__$1);
            a__18889__auto__.push(arg__18890__auto___21226);
            var G__21227 = cljs.core.next.call(null, seq__20038_21220__$1);
            var G__21228 = null;
            var G__21229 = 0;
            var G__21230 = 0;
            seq__20038_21210 = G__21227;
            chunk__20039_21211 = G__21228;
            count__20040_21212 = G__21229;
            i__20041_21213 = G__21230;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.canvas.apply(null, a__18889__auto__);
  };
  var canvas = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return canvas__delegate.call(this, args__18888__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 0;
  canvas.cljs$lang$applyTo = function(arglist__21231) {
    var args__18888__auto__ = cljs.core.seq(arglist__21231);
    return canvas__delegate(args__18888__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
quiescent.dom.caption = function() {
  var caption__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20046_21232 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20047_21233 = null;
    var count__20048_21234 = 0;
    var i__20049_21235 = 0;
    while (true) {
      if (i__20049_21235 < count__20048_21234) {
        var arg__18890__auto___21236 = cljs.core._nth.call(null, chunk__20047_21233, i__20049_21235);
        a__18889__auto__.push(arg__18890__auto___21236);
        var G__21237 = seq__20046_21232;
        var G__21238 = chunk__20047_21233;
        var G__21239 = count__20048_21234;
        var G__21240 = i__20049_21235 + 1;
        seq__20046_21232 = G__21237;
        chunk__20047_21233 = G__21238;
        count__20048_21234 = G__21239;
        i__20049_21235 = G__21240;
        continue;
      } else {
        var temp__4092__auto___21241 = cljs.core.seq.call(null, seq__20046_21232);
        if (temp__4092__auto___21241) {
          var seq__20046_21242__$1 = temp__4092__auto___21241;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20046_21242__$1)) {
            var c__17462__auto___21243 = cljs.core.chunk_first.call(null, seq__20046_21242__$1);
            var G__21244 = cljs.core.chunk_rest.call(null, seq__20046_21242__$1);
            var G__21245 = c__17462__auto___21243;
            var G__21246 = cljs.core.count.call(null, c__17462__auto___21243);
            var G__21247 = 0;
            seq__20046_21232 = G__21244;
            chunk__20047_21233 = G__21245;
            count__20048_21234 = G__21246;
            i__20049_21235 = G__21247;
            continue;
          } else {
            var arg__18890__auto___21248 = cljs.core.first.call(null, seq__20046_21242__$1);
            a__18889__auto__.push(arg__18890__auto___21248);
            var G__21249 = cljs.core.next.call(null, seq__20046_21242__$1);
            var G__21250 = null;
            var G__21251 = 0;
            var G__21252 = 0;
            seq__20046_21232 = G__21249;
            chunk__20047_21233 = G__21250;
            count__20048_21234 = G__21251;
            i__20049_21235 = G__21252;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.caption.apply(null, a__18889__auto__);
  };
  var caption = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return caption__delegate.call(this, args__18888__auto__);
  };
  caption.cljs$lang$maxFixedArity = 0;
  caption.cljs$lang$applyTo = function(arglist__21253) {
    var args__18888__auto__ = cljs.core.seq(arglist__21253);
    return caption__delegate(args__18888__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
quiescent.dom.cite = function() {
  var cite__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20054_21254 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20055_21255 = null;
    var count__20056_21256 = 0;
    var i__20057_21257 = 0;
    while (true) {
      if (i__20057_21257 < count__20056_21256) {
        var arg__18890__auto___21258 = cljs.core._nth.call(null, chunk__20055_21255, i__20057_21257);
        a__18889__auto__.push(arg__18890__auto___21258);
        var G__21259 = seq__20054_21254;
        var G__21260 = chunk__20055_21255;
        var G__21261 = count__20056_21256;
        var G__21262 = i__20057_21257 + 1;
        seq__20054_21254 = G__21259;
        chunk__20055_21255 = G__21260;
        count__20056_21256 = G__21261;
        i__20057_21257 = G__21262;
        continue;
      } else {
        var temp__4092__auto___21263 = cljs.core.seq.call(null, seq__20054_21254);
        if (temp__4092__auto___21263) {
          var seq__20054_21264__$1 = temp__4092__auto___21263;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20054_21264__$1)) {
            var c__17462__auto___21265 = cljs.core.chunk_first.call(null, seq__20054_21264__$1);
            var G__21266 = cljs.core.chunk_rest.call(null, seq__20054_21264__$1);
            var G__21267 = c__17462__auto___21265;
            var G__21268 = cljs.core.count.call(null, c__17462__auto___21265);
            var G__21269 = 0;
            seq__20054_21254 = G__21266;
            chunk__20055_21255 = G__21267;
            count__20056_21256 = G__21268;
            i__20057_21257 = G__21269;
            continue;
          } else {
            var arg__18890__auto___21270 = cljs.core.first.call(null, seq__20054_21264__$1);
            a__18889__auto__.push(arg__18890__auto___21270);
            var G__21271 = cljs.core.next.call(null, seq__20054_21264__$1);
            var G__21272 = null;
            var G__21273 = 0;
            var G__21274 = 0;
            seq__20054_21254 = G__21271;
            chunk__20055_21255 = G__21272;
            count__20056_21256 = G__21273;
            i__20057_21257 = G__21274;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.cite.apply(null, a__18889__auto__);
  };
  var cite = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cite__delegate.call(this, args__18888__auto__);
  };
  cite.cljs$lang$maxFixedArity = 0;
  cite.cljs$lang$applyTo = function(arglist__21275) {
    var args__18888__auto__ = cljs.core.seq(arglist__21275);
    return cite__delegate(args__18888__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
quiescent.dom.code = function() {
  var code__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20062_21276 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20063_21277 = null;
    var count__20064_21278 = 0;
    var i__20065_21279 = 0;
    while (true) {
      if (i__20065_21279 < count__20064_21278) {
        var arg__18890__auto___21280 = cljs.core._nth.call(null, chunk__20063_21277, i__20065_21279);
        a__18889__auto__.push(arg__18890__auto___21280);
        var G__21281 = seq__20062_21276;
        var G__21282 = chunk__20063_21277;
        var G__21283 = count__20064_21278;
        var G__21284 = i__20065_21279 + 1;
        seq__20062_21276 = G__21281;
        chunk__20063_21277 = G__21282;
        count__20064_21278 = G__21283;
        i__20065_21279 = G__21284;
        continue;
      } else {
        var temp__4092__auto___21285 = cljs.core.seq.call(null, seq__20062_21276);
        if (temp__4092__auto___21285) {
          var seq__20062_21286__$1 = temp__4092__auto___21285;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20062_21286__$1)) {
            var c__17462__auto___21287 = cljs.core.chunk_first.call(null, seq__20062_21286__$1);
            var G__21288 = cljs.core.chunk_rest.call(null, seq__20062_21286__$1);
            var G__21289 = c__17462__auto___21287;
            var G__21290 = cljs.core.count.call(null, c__17462__auto___21287);
            var G__21291 = 0;
            seq__20062_21276 = G__21288;
            chunk__20063_21277 = G__21289;
            count__20064_21278 = G__21290;
            i__20065_21279 = G__21291;
            continue;
          } else {
            var arg__18890__auto___21292 = cljs.core.first.call(null, seq__20062_21286__$1);
            a__18889__auto__.push(arg__18890__auto___21292);
            var G__21293 = cljs.core.next.call(null, seq__20062_21286__$1);
            var G__21294 = null;
            var G__21295 = 0;
            var G__21296 = 0;
            seq__20062_21276 = G__21293;
            chunk__20063_21277 = G__21294;
            count__20064_21278 = G__21295;
            i__20065_21279 = G__21296;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.code.apply(null, a__18889__auto__);
  };
  var code = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return code__delegate.call(this, args__18888__auto__);
  };
  code.cljs$lang$maxFixedArity = 0;
  code.cljs$lang$applyTo = function(arglist__21297) {
    var args__18888__auto__ = cljs.core.seq(arglist__21297);
    return code__delegate(args__18888__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
quiescent.dom.col = function() {
  var col__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20070_21298 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20071_21299 = null;
    var count__20072_21300 = 0;
    var i__20073_21301 = 0;
    while (true) {
      if (i__20073_21301 < count__20072_21300) {
        var arg__18890__auto___21302 = cljs.core._nth.call(null, chunk__20071_21299, i__20073_21301);
        a__18889__auto__.push(arg__18890__auto___21302);
        var G__21303 = seq__20070_21298;
        var G__21304 = chunk__20071_21299;
        var G__21305 = count__20072_21300;
        var G__21306 = i__20073_21301 + 1;
        seq__20070_21298 = G__21303;
        chunk__20071_21299 = G__21304;
        count__20072_21300 = G__21305;
        i__20073_21301 = G__21306;
        continue;
      } else {
        var temp__4092__auto___21307 = cljs.core.seq.call(null, seq__20070_21298);
        if (temp__4092__auto___21307) {
          var seq__20070_21308__$1 = temp__4092__auto___21307;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20070_21308__$1)) {
            var c__17462__auto___21309 = cljs.core.chunk_first.call(null, seq__20070_21308__$1);
            var G__21310 = cljs.core.chunk_rest.call(null, seq__20070_21308__$1);
            var G__21311 = c__17462__auto___21309;
            var G__21312 = cljs.core.count.call(null, c__17462__auto___21309);
            var G__21313 = 0;
            seq__20070_21298 = G__21310;
            chunk__20071_21299 = G__21311;
            count__20072_21300 = G__21312;
            i__20073_21301 = G__21313;
            continue;
          } else {
            var arg__18890__auto___21314 = cljs.core.first.call(null, seq__20070_21308__$1);
            a__18889__auto__.push(arg__18890__auto___21314);
            var G__21315 = cljs.core.next.call(null, seq__20070_21308__$1);
            var G__21316 = null;
            var G__21317 = 0;
            var G__21318 = 0;
            seq__20070_21298 = G__21315;
            chunk__20071_21299 = G__21316;
            count__20072_21300 = G__21317;
            i__20073_21301 = G__21318;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.col.apply(null, a__18889__auto__);
  };
  var col = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col__delegate.call(this, args__18888__auto__);
  };
  col.cljs$lang$maxFixedArity = 0;
  col.cljs$lang$applyTo = function(arglist__21319) {
    var args__18888__auto__ = cljs.core.seq(arglist__21319);
    return col__delegate(args__18888__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
quiescent.dom.colgroup = function() {
  var colgroup__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20078_21320 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20079_21321 = null;
    var count__20080_21322 = 0;
    var i__20081_21323 = 0;
    while (true) {
      if (i__20081_21323 < count__20080_21322) {
        var arg__18890__auto___21324 = cljs.core._nth.call(null, chunk__20079_21321, i__20081_21323);
        a__18889__auto__.push(arg__18890__auto___21324);
        var G__21325 = seq__20078_21320;
        var G__21326 = chunk__20079_21321;
        var G__21327 = count__20080_21322;
        var G__21328 = i__20081_21323 + 1;
        seq__20078_21320 = G__21325;
        chunk__20079_21321 = G__21326;
        count__20080_21322 = G__21327;
        i__20081_21323 = G__21328;
        continue;
      } else {
        var temp__4092__auto___21329 = cljs.core.seq.call(null, seq__20078_21320);
        if (temp__4092__auto___21329) {
          var seq__20078_21330__$1 = temp__4092__auto___21329;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20078_21330__$1)) {
            var c__17462__auto___21331 = cljs.core.chunk_first.call(null, seq__20078_21330__$1);
            var G__21332 = cljs.core.chunk_rest.call(null, seq__20078_21330__$1);
            var G__21333 = c__17462__auto___21331;
            var G__21334 = cljs.core.count.call(null, c__17462__auto___21331);
            var G__21335 = 0;
            seq__20078_21320 = G__21332;
            chunk__20079_21321 = G__21333;
            count__20080_21322 = G__21334;
            i__20081_21323 = G__21335;
            continue;
          } else {
            var arg__18890__auto___21336 = cljs.core.first.call(null, seq__20078_21330__$1);
            a__18889__auto__.push(arg__18890__auto___21336);
            var G__21337 = cljs.core.next.call(null, seq__20078_21330__$1);
            var G__21338 = null;
            var G__21339 = 0;
            var G__21340 = 0;
            seq__20078_21320 = G__21337;
            chunk__20079_21321 = G__21338;
            count__20080_21322 = G__21339;
            i__20081_21323 = G__21340;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.colgroup.apply(null, a__18889__auto__);
  };
  var colgroup = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return colgroup__delegate.call(this, args__18888__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 0;
  colgroup.cljs$lang$applyTo = function(arglist__21341) {
    var args__18888__auto__ = cljs.core.seq(arglist__21341);
    return colgroup__delegate(args__18888__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
quiescent.dom.data = function() {
  var data__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20086_21342 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20087_21343 = null;
    var count__20088_21344 = 0;
    var i__20089_21345 = 0;
    while (true) {
      if (i__20089_21345 < count__20088_21344) {
        var arg__18890__auto___21346 = cljs.core._nth.call(null, chunk__20087_21343, i__20089_21345);
        a__18889__auto__.push(arg__18890__auto___21346);
        var G__21347 = seq__20086_21342;
        var G__21348 = chunk__20087_21343;
        var G__21349 = count__20088_21344;
        var G__21350 = i__20089_21345 + 1;
        seq__20086_21342 = G__21347;
        chunk__20087_21343 = G__21348;
        count__20088_21344 = G__21349;
        i__20089_21345 = G__21350;
        continue;
      } else {
        var temp__4092__auto___21351 = cljs.core.seq.call(null, seq__20086_21342);
        if (temp__4092__auto___21351) {
          var seq__20086_21352__$1 = temp__4092__auto___21351;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20086_21352__$1)) {
            var c__17462__auto___21353 = cljs.core.chunk_first.call(null, seq__20086_21352__$1);
            var G__21354 = cljs.core.chunk_rest.call(null, seq__20086_21352__$1);
            var G__21355 = c__17462__auto___21353;
            var G__21356 = cljs.core.count.call(null, c__17462__auto___21353);
            var G__21357 = 0;
            seq__20086_21342 = G__21354;
            chunk__20087_21343 = G__21355;
            count__20088_21344 = G__21356;
            i__20089_21345 = G__21357;
            continue;
          } else {
            var arg__18890__auto___21358 = cljs.core.first.call(null, seq__20086_21352__$1);
            a__18889__auto__.push(arg__18890__auto___21358);
            var G__21359 = cljs.core.next.call(null, seq__20086_21352__$1);
            var G__21360 = null;
            var G__21361 = 0;
            var G__21362 = 0;
            seq__20086_21342 = G__21359;
            chunk__20087_21343 = G__21360;
            count__20088_21344 = G__21361;
            i__20089_21345 = G__21362;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.data.apply(null, a__18889__auto__);
  };
  var data = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return data__delegate.call(this, args__18888__auto__);
  };
  data.cljs$lang$maxFixedArity = 0;
  data.cljs$lang$applyTo = function(arglist__21363) {
    var args__18888__auto__ = cljs.core.seq(arglist__21363);
    return data__delegate(args__18888__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
quiescent.dom.datalist = function() {
  var datalist__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20094_21364 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20095_21365 = null;
    var count__20096_21366 = 0;
    var i__20097_21367 = 0;
    while (true) {
      if (i__20097_21367 < count__20096_21366) {
        var arg__18890__auto___21368 = cljs.core._nth.call(null, chunk__20095_21365, i__20097_21367);
        a__18889__auto__.push(arg__18890__auto___21368);
        var G__21369 = seq__20094_21364;
        var G__21370 = chunk__20095_21365;
        var G__21371 = count__20096_21366;
        var G__21372 = i__20097_21367 + 1;
        seq__20094_21364 = G__21369;
        chunk__20095_21365 = G__21370;
        count__20096_21366 = G__21371;
        i__20097_21367 = G__21372;
        continue;
      } else {
        var temp__4092__auto___21373 = cljs.core.seq.call(null, seq__20094_21364);
        if (temp__4092__auto___21373) {
          var seq__20094_21374__$1 = temp__4092__auto___21373;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20094_21374__$1)) {
            var c__17462__auto___21375 = cljs.core.chunk_first.call(null, seq__20094_21374__$1);
            var G__21376 = cljs.core.chunk_rest.call(null, seq__20094_21374__$1);
            var G__21377 = c__17462__auto___21375;
            var G__21378 = cljs.core.count.call(null, c__17462__auto___21375);
            var G__21379 = 0;
            seq__20094_21364 = G__21376;
            chunk__20095_21365 = G__21377;
            count__20096_21366 = G__21378;
            i__20097_21367 = G__21379;
            continue;
          } else {
            var arg__18890__auto___21380 = cljs.core.first.call(null, seq__20094_21374__$1);
            a__18889__auto__.push(arg__18890__auto___21380);
            var G__21381 = cljs.core.next.call(null, seq__20094_21374__$1);
            var G__21382 = null;
            var G__21383 = 0;
            var G__21384 = 0;
            seq__20094_21364 = G__21381;
            chunk__20095_21365 = G__21382;
            count__20096_21366 = G__21383;
            i__20097_21367 = G__21384;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.datalist.apply(null, a__18889__auto__);
  };
  var datalist = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return datalist__delegate.call(this, args__18888__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 0;
  datalist.cljs$lang$applyTo = function(arglist__21385) {
    var args__18888__auto__ = cljs.core.seq(arglist__21385);
    return datalist__delegate(args__18888__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
quiescent.dom.dd = function() {
  var dd__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20102_21386 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20103_21387 = null;
    var count__20104_21388 = 0;
    var i__20105_21389 = 0;
    while (true) {
      if (i__20105_21389 < count__20104_21388) {
        var arg__18890__auto___21390 = cljs.core._nth.call(null, chunk__20103_21387, i__20105_21389);
        a__18889__auto__.push(arg__18890__auto___21390);
        var G__21391 = seq__20102_21386;
        var G__21392 = chunk__20103_21387;
        var G__21393 = count__20104_21388;
        var G__21394 = i__20105_21389 + 1;
        seq__20102_21386 = G__21391;
        chunk__20103_21387 = G__21392;
        count__20104_21388 = G__21393;
        i__20105_21389 = G__21394;
        continue;
      } else {
        var temp__4092__auto___21395 = cljs.core.seq.call(null, seq__20102_21386);
        if (temp__4092__auto___21395) {
          var seq__20102_21396__$1 = temp__4092__auto___21395;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20102_21396__$1)) {
            var c__17462__auto___21397 = cljs.core.chunk_first.call(null, seq__20102_21396__$1);
            var G__21398 = cljs.core.chunk_rest.call(null, seq__20102_21396__$1);
            var G__21399 = c__17462__auto___21397;
            var G__21400 = cljs.core.count.call(null, c__17462__auto___21397);
            var G__21401 = 0;
            seq__20102_21386 = G__21398;
            chunk__20103_21387 = G__21399;
            count__20104_21388 = G__21400;
            i__20105_21389 = G__21401;
            continue;
          } else {
            var arg__18890__auto___21402 = cljs.core.first.call(null, seq__20102_21396__$1);
            a__18889__auto__.push(arg__18890__auto___21402);
            var G__21403 = cljs.core.next.call(null, seq__20102_21396__$1);
            var G__21404 = null;
            var G__21405 = 0;
            var G__21406 = 0;
            seq__20102_21386 = G__21403;
            chunk__20103_21387 = G__21404;
            count__20104_21388 = G__21405;
            i__20105_21389 = G__21406;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dd.apply(null, a__18889__auto__);
  };
  var dd = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dd__delegate.call(this, args__18888__auto__);
  };
  dd.cljs$lang$maxFixedArity = 0;
  dd.cljs$lang$applyTo = function(arglist__21407) {
    var args__18888__auto__ = cljs.core.seq(arglist__21407);
    return dd__delegate(args__18888__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
quiescent.dom.del = function() {
  var del__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20110_21408 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20111_21409 = null;
    var count__20112_21410 = 0;
    var i__20113_21411 = 0;
    while (true) {
      if (i__20113_21411 < count__20112_21410) {
        var arg__18890__auto___21412 = cljs.core._nth.call(null, chunk__20111_21409, i__20113_21411);
        a__18889__auto__.push(arg__18890__auto___21412);
        var G__21413 = seq__20110_21408;
        var G__21414 = chunk__20111_21409;
        var G__21415 = count__20112_21410;
        var G__21416 = i__20113_21411 + 1;
        seq__20110_21408 = G__21413;
        chunk__20111_21409 = G__21414;
        count__20112_21410 = G__21415;
        i__20113_21411 = G__21416;
        continue;
      } else {
        var temp__4092__auto___21417 = cljs.core.seq.call(null, seq__20110_21408);
        if (temp__4092__auto___21417) {
          var seq__20110_21418__$1 = temp__4092__auto___21417;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20110_21418__$1)) {
            var c__17462__auto___21419 = cljs.core.chunk_first.call(null, seq__20110_21418__$1);
            var G__21420 = cljs.core.chunk_rest.call(null, seq__20110_21418__$1);
            var G__21421 = c__17462__auto___21419;
            var G__21422 = cljs.core.count.call(null, c__17462__auto___21419);
            var G__21423 = 0;
            seq__20110_21408 = G__21420;
            chunk__20111_21409 = G__21421;
            count__20112_21410 = G__21422;
            i__20113_21411 = G__21423;
            continue;
          } else {
            var arg__18890__auto___21424 = cljs.core.first.call(null, seq__20110_21418__$1);
            a__18889__auto__.push(arg__18890__auto___21424);
            var G__21425 = cljs.core.next.call(null, seq__20110_21418__$1);
            var G__21426 = null;
            var G__21427 = 0;
            var G__21428 = 0;
            seq__20110_21408 = G__21425;
            chunk__20111_21409 = G__21426;
            count__20112_21410 = G__21427;
            i__20113_21411 = G__21428;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.del.apply(null, a__18889__auto__);
  };
  var del = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return del__delegate.call(this, args__18888__auto__);
  };
  del.cljs$lang$maxFixedArity = 0;
  del.cljs$lang$applyTo = function(arglist__21429) {
    var args__18888__auto__ = cljs.core.seq(arglist__21429);
    return del__delegate(args__18888__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
quiescent.dom.details = function() {
  var details__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20118_21430 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20119_21431 = null;
    var count__20120_21432 = 0;
    var i__20121_21433 = 0;
    while (true) {
      if (i__20121_21433 < count__20120_21432) {
        var arg__18890__auto___21434 = cljs.core._nth.call(null, chunk__20119_21431, i__20121_21433);
        a__18889__auto__.push(arg__18890__auto___21434);
        var G__21435 = seq__20118_21430;
        var G__21436 = chunk__20119_21431;
        var G__21437 = count__20120_21432;
        var G__21438 = i__20121_21433 + 1;
        seq__20118_21430 = G__21435;
        chunk__20119_21431 = G__21436;
        count__20120_21432 = G__21437;
        i__20121_21433 = G__21438;
        continue;
      } else {
        var temp__4092__auto___21439 = cljs.core.seq.call(null, seq__20118_21430);
        if (temp__4092__auto___21439) {
          var seq__20118_21440__$1 = temp__4092__auto___21439;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20118_21440__$1)) {
            var c__17462__auto___21441 = cljs.core.chunk_first.call(null, seq__20118_21440__$1);
            var G__21442 = cljs.core.chunk_rest.call(null, seq__20118_21440__$1);
            var G__21443 = c__17462__auto___21441;
            var G__21444 = cljs.core.count.call(null, c__17462__auto___21441);
            var G__21445 = 0;
            seq__20118_21430 = G__21442;
            chunk__20119_21431 = G__21443;
            count__20120_21432 = G__21444;
            i__20121_21433 = G__21445;
            continue;
          } else {
            var arg__18890__auto___21446 = cljs.core.first.call(null, seq__20118_21440__$1);
            a__18889__auto__.push(arg__18890__auto___21446);
            var G__21447 = cljs.core.next.call(null, seq__20118_21440__$1);
            var G__21448 = null;
            var G__21449 = 0;
            var G__21450 = 0;
            seq__20118_21430 = G__21447;
            chunk__20119_21431 = G__21448;
            count__20120_21432 = G__21449;
            i__20121_21433 = G__21450;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.details.apply(null, a__18889__auto__);
  };
  var details = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return details__delegate.call(this, args__18888__auto__);
  };
  details.cljs$lang$maxFixedArity = 0;
  details.cljs$lang$applyTo = function(arglist__21451) {
    var args__18888__auto__ = cljs.core.seq(arglist__21451);
    return details__delegate(args__18888__auto__);
  };
  details.cljs$core$IFn$_invoke$arity$variadic = details__delegate;
  return details;
}();
quiescent.dom.dfn = function() {
  var dfn__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20126_21452 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20127_21453 = null;
    var count__20128_21454 = 0;
    var i__20129_21455 = 0;
    while (true) {
      if (i__20129_21455 < count__20128_21454) {
        var arg__18890__auto___21456 = cljs.core._nth.call(null, chunk__20127_21453, i__20129_21455);
        a__18889__auto__.push(arg__18890__auto___21456);
        var G__21457 = seq__20126_21452;
        var G__21458 = chunk__20127_21453;
        var G__21459 = count__20128_21454;
        var G__21460 = i__20129_21455 + 1;
        seq__20126_21452 = G__21457;
        chunk__20127_21453 = G__21458;
        count__20128_21454 = G__21459;
        i__20129_21455 = G__21460;
        continue;
      } else {
        var temp__4092__auto___21461 = cljs.core.seq.call(null, seq__20126_21452);
        if (temp__4092__auto___21461) {
          var seq__20126_21462__$1 = temp__4092__auto___21461;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20126_21462__$1)) {
            var c__17462__auto___21463 = cljs.core.chunk_first.call(null, seq__20126_21462__$1);
            var G__21464 = cljs.core.chunk_rest.call(null, seq__20126_21462__$1);
            var G__21465 = c__17462__auto___21463;
            var G__21466 = cljs.core.count.call(null, c__17462__auto___21463);
            var G__21467 = 0;
            seq__20126_21452 = G__21464;
            chunk__20127_21453 = G__21465;
            count__20128_21454 = G__21466;
            i__20129_21455 = G__21467;
            continue;
          } else {
            var arg__18890__auto___21468 = cljs.core.first.call(null, seq__20126_21462__$1);
            a__18889__auto__.push(arg__18890__auto___21468);
            var G__21469 = cljs.core.next.call(null, seq__20126_21462__$1);
            var G__21470 = null;
            var G__21471 = 0;
            var G__21472 = 0;
            seq__20126_21452 = G__21469;
            chunk__20127_21453 = G__21470;
            count__20128_21454 = G__21471;
            i__20129_21455 = G__21472;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dfn.apply(null, a__18889__auto__);
  };
  var dfn = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dfn__delegate.call(this, args__18888__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 0;
  dfn.cljs$lang$applyTo = function(arglist__21473) {
    var args__18888__auto__ = cljs.core.seq(arglist__21473);
    return dfn__delegate(args__18888__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
quiescent.dom.div = function() {
  var div__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20134_21474 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20135_21475 = null;
    var count__20136_21476 = 0;
    var i__20137_21477 = 0;
    while (true) {
      if (i__20137_21477 < count__20136_21476) {
        var arg__18890__auto___21478 = cljs.core._nth.call(null, chunk__20135_21475, i__20137_21477);
        a__18889__auto__.push(arg__18890__auto___21478);
        var G__21479 = seq__20134_21474;
        var G__21480 = chunk__20135_21475;
        var G__21481 = count__20136_21476;
        var G__21482 = i__20137_21477 + 1;
        seq__20134_21474 = G__21479;
        chunk__20135_21475 = G__21480;
        count__20136_21476 = G__21481;
        i__20137_21477 = G__21482;
        continue;
      } else {
        var temp__4092__auto___21483 = cljs.core.seq.call(null, seq__20134_21474);
        if (temp__4092__auto___21483) {
          var seq__20134_21484__$1 = temp__4092__auto___21483;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20134_21484__$1)) {
            var c__17462__auto___21485 = cljs.core.chunk_first.call(null, seq__20134_21484__$1);
            var G__21486 = cljs.core.chunk_rest.call(null, seq__20134_21484__$1);
            var G__21487 = c__17462__auto___21485;
            var G__21488 = cljs.core.count.call(null, c__17462__auto___21485);
            var G__21489 = 0;
            seq__20134_21474 = G__21486;
            chunk__20135_21475 = G__21487;
            count__20136_21476 = G__21488;
            i__20137_21477 = G__21489;
            continue;
          } else {
            var arg__18890__auto___21490 = cljs.core.first.call(null, seq__20134_21484__$1);
            a__18889__auto__.push(arg__18890__auto___21490);
            var G__21491 = cljs.core.next.call(null, seq__20134_21484__$1);
            var G__21492 = null;
            var G__21493 = 0;
            var G__21494 = 0;
            seq__20134_21474 = G__21491;
            chunk__20135_21475 = G__21492;
            count__20136_21476 = G__21493;
            i__20137_21477 = G__21494;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.div.apply(null, a__18889__auto__);
  };
  var div = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return div__delegate.call(this, args__18888__auto__);
  };
  div.cljs$lang$maxFixedArity = 0;
  div.cljs$lang$applyTo = function(arglist__21495) {
    var args__18888__auto__ = cljs.core.seq(arglist__21495);
    return div__delegate(args__18888__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
quiescent.dom.dl = function() {
  var dl__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20142_21496 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20143_21497 = null;
    var count__20144_21498 = 0;
    var i__20145_21499 = 0;
    while (true) {
      if (i__20145_21499 < count__20144_21498) {
        var arg__18890__auto___21500 = cljs.core._nth.call(null, chunk__20143_21497, i__20145_21499);
        a__18889__auto__.push(arg__18890__auto___21500);
        var G__21501 = seq__20142_21496;
        var G__21502 = chunk__20143_21497;
        var G__21503 = count__20144_21498;
        var G__21504 = i__20145_21499 + 1;
        seq__20142_21496 = G__21501;
        chunk__20143_21497 = G__21502;
        count__20144_21498 = G__21503;
        i__20145_21499 = G__21504;
        continue;
      } else {
        var temp__4092__auto___21505 = cljs.core.seq.call(null, seq__20142_21496);
        if (temp__4092__auto___21505) {
          var seq__20142_21506__$1 = temp__4092__auto___21505;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20142_21506__$1)) {
            var c__17462__auto___21507 = cljs.core.chunk_first.call(null, seq__20142_21506__$1);
            var G__21508 = cljs.core.chunk_rest.call(null, seq__20142_21506__$1);
            var G__21509 = c__17462__auto___21507;
            var G__21510 = cljs.core.count.call(null, c__17462__auto___21507);
            var G__21511 = 0;
            seq__20142_21496 = G__21508;
            chunk__20143_21497 = G__21509;
            count__20144_21498 = G__21510;
            i__20145_21499 = G__21511;
            continue;
          } else {
            var arg__18890__auto___21512 = cljs.core.first.call(null, seq__20142_21506__$1);
            a__18889__auto__.push(arg__18890__auto___21512);
            var G__21513 = cljs.core.next.call(null, seq__20142_21506__$1);
            var G__21514 = null;
            var G__21515 = 0;
            var G__21516 = 0;
            seq__20142_21496 = G__21513;
            chunk__20143_21497 = G__21514;
            count__20144_21498 = G__21515;
            i__20145_21499 = G__21516;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dl.apply(null, a__18889__auto__);
  };
  var dl = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dl__delegate.call(this, args__18888__auto__);
  };
  dl.cljs$lang$maxFixedArity = 0;
  dl.cljs$lang$applyTo = function(arglist__21517) {
    var args__18888__auto__ = cljs.core.seq(arglist__21517);
    return dl__delegate(args__18888__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
quiescent.dom.dt = function() {
  var dt__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20150_21518 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20151_21519 = null;
    var count__20152_21520 = 0;
    var i__20153_21521 = 0;
    while (true) {
      if (i__20153_21521 < count__20152_21520) {
        var arg__18890__auto___21522 = cljs.core._nth.call(null, chunk__20151_21519, i__20153_21521);
        a__18889__auto__.push(arg__18890__auto___21522);
        var G__21523 = seq__20150_21518;
        var G__21524 = chunk__20151_21519;
        var G__21525 = count__20152_21520;
        var G__21526 = i__20153_21521 + 1;
        seq__20150_21518 = G__21523;
        chunk__20151_21519 = G__21524;
        count__20152_21520 = G__21525;
        i__20153_21521 = G__21526;
        continue;
      } else {
        var temp__4092__auto___21527 = cljs.core.seq.call(null, seq__20150_21518);
        if (temp__4092__auto___21527) {
          var seq__20150_21528__$1 = temp__4092__auto___21527;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20150_21528__$1)) {
            var c__17462__auto___21529 = cljs.core.chunk_first.call(null, seq__20150_21528__$1);
            var G__21530 = cljs.core.chunk_rest.call(null, seq__20150_21528__$1);
            var G__21531 = c__17462__auto___21529;
            var G__21532 = cljs.core.count.call(null, c__17462__auto___21529);
            var G__21533 = 0;
            seq__20150_21518 = G__21530;
            chunk__20151_21519 = G__21531;
            count__20152_21520 = G__21532;
            i__20153_21521 = G__21533;
            continue;
          } else {
            var arg__18890__auto___21534 = cljs.core.first.call(null, seq__20150_21528__$1);
            a__18889__auto__.push(arg__18890__auto___21534);
            var G__21535 = cljs.core.next.call(null, seq__20150_21528__$1);
            var G__21536 = null;
            var G__21537 = 0;
            var G__21538 = 0;
            seq__20150_21518 = G__21535;
            chunk__20151_21519 = G__21536;
            count__20152_21520 = G__21537;
            i__20153_21521 = G__21538;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dt.apply(null, a__18889__auto__);
  };
  var dt = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dt__delegate.call(this, args__18888__auto__);
  };
  dt.cljs$lang$maxFixedArity = 0;
  dt.cljs$lang$applyTo = function(arglist__21539) {
    var args__18888__auto__ = cljs.core.seq(arglist__21539);
    return dt__delegate(args__18888__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
quiescent.dom.em = function() {
  var em__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20158_21540 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20159_21541 = null;
    var count__20160_21542 = 0;
    var i__20161_21543 = 0;
    while (true) {
      if (i__20161_21543 < count__20160_21542) {
        var arg__18890__auto___21544 = cljs.core._nth.call(null, chunk__20159_21541, i__20161_21543);
        a__18889__auto__.push(arg__18890__auto___21544);
        var G__21545 = seq__20158_21540;
        var G__21546 = chunk__20159_21541;
        var G__21547 = count__20160_21542;
        var G__21548 = i__20161_21543 + 1;
        seq__20158_21540 = G__21545;
        chunk__20159_21541 = G__21546;
        count__20160_21542 = G__21547;
        i__20161_21543 = G__21548;
        continue;
      } else {
        var temp__4092__auto___21549 = cljs.core.seq.call(null, seq__20158_21540);
        if (temp__4092__auto___21549) {
          var seq__20158_21550__$1 = temp__4092__auto___21549;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20158_21550__$1)) {
            var c__17462__auto___21551 = cljs.core.chunk_first.call(null, seq__20158_21550__$1);
            var G__21552 = cljs.core.chunk_rest.call(null, seq__20158_21550__$1);
            var G__21553 = c__17462__auto___21551;
            var G__21554 = cljs.core.count.call(null, c__17462__auto___21551);
            var G__21555 = 0;
            seq__20158_21540 = G__21552;
            chunk__20159_21541 = G__21553;
            count__20160_21542 = G__21554;
            i__20161_21543 = G__21555;
            continue;
          } else {
            var arg__18890__auto___21556 = cljs.core.first.call(null, seq__20158_21550__$1);
            a__18889__auto__.push(arg__18890__auto___21556);
            var G__21557 = cljs.core.next.call(null, seq__20158_21550__$1);
            var G__21558 = null;
            var G__21559 = 0;
            var G__21560 = 0;
            seq__20158_21540 = G__21557;
            chunk__20159_21541 = G__21558;
            count__20160_21542 = G__21559;
            i__20161_21543 = G__21560;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.em.apply(null, a__18889__auto__);
  };
  var em = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return em__delegate.call(this, args__18888__auto__);
  };
  em.cljs$lang$maxFixedArity = 0;
  em.cljs$lang$applyTo = function(arglist__21561) {
    var args__18888__auto__ = cljs.core.seq(arglist__21561);
    return em__delegate(args__18888__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
quiescent.dom.embed = function() {
  var embed__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20174_21562 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20175_21563 = null;
    var count__20176_21564 = 0;
    var i__20177_21565 = 0;
    while (true) {
      if (i__20177_21565 < count__20176_21564) {
        var arg__18890__auto___21566 = cljs.core._nth.call(null, chunk__20175_21563, i__20177_21565);
        a__18889__auto__.push(arg__18890__auto___21566);
        var G__21567 = seq__20174_21562;
        var G__21568 = chunk__20175_21563;
        var G__21569 = count__20176_21564;
        var G__21570 = i__20177_21565 + 1;
        seq__20174_21562 = G__21567;
        chunk__20175_21563 = G__21568;
        count__20176_21564 = G__21569;
        i__20177_21565 = G__21570;
        continue;
      } else {
        var temp__4092__auto___21571 = cljs.core.seq.call(null, seq__20174_21562);
        if (temp__4092__auto___21571) {
          var seq__20174_21572__$1 = temp__4092__auto___21571;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20174_21572__$1)) {
            var c__17462__auto___21573 = cljs.core.chunk_first.call(null, seq__20174_21572__$1);
            var G__21574 = cljs.core.chunk_rest.call(null, seq__20174_21572__$1);
            var G__21575 = c__17462__auto___21573;
            var G__21576 = cljs.core.count.call(null, c__17462__auto___21573);
            var G__21577 = 0;
            seq__20174_21562 = G__21574;
            chunk__20175_21563 = G__21575;
            count__20176_21564 = G__21576;
            i__20177_21565 = G__21577;
            continue;
          } else {
            var arg__18890__auto___21578 = cljs.core.first.call(null, seq__20174_21572__$1);
            a__18889__auto__.push(arg__18890__auto___21578);
            var G__21579 = cljs.core.next.call(null, seq__20174_21572__$1);
            var G__21580 = null;
            var G__21581 = 0;
            var G__21582 = 0;
            seq__20174_21562 = G__21579;
            chunk__20175_21563 = G__21580;
            count__20176_21564 = G__21581;
            i__20177_21565 = G__21582;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.embed.apply(null, a__18889__auto__);
  };
  var embed = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return embed__delegate.call(this, args__18888__auto__);
  };
  embed.cljs$lang$maxFixedArity = 0;
  embed.cljs$lang$applyTo = function(arglist__21583) {
    var args__18888__auto__ = cljs.core.seq(arglist__21583);
    return embed__delegate(args__18888__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
quiescent.dom.fieldset = function() {
  var fieldset__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20182_21584 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20183_21585 = null;
    var count__20184_21586 = 0;
    var i__20185_21587 = 0;
    while (true) {
      if (i__20185_21587 < count__20184_21586) {
        var arg__18890__auto___21588 = cljs.core._nth.call(null, chunk__20183_21585, i__20185_21587);
        a__18889__auto__.push(arg__18890__auto___21588);
        var G__21589 = seq__20182_21584;
        var G__21590 = chunk__20183_21585;
        var G__21591 = count__20184_21586;
        var G__21592 = i__20185_21587 + 1;
        seq__20182_21584 = G__21589;
        chunk__20183_21585 = G__21590;
        count__20184_21586 = G__21591;
        i__20185_21587 = G__21592;
        continue;
      } else {
        var temp__4092__auto___21593 = cljs.core.seq.call(null, seq__20182_21584);
        if (temp__4092__auto___21593) {
          var seq__20182_21594__$1 = temp__4092__auto___21593;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20182_21594__$1)) {
            var c__17462__auto___21595 = cljs.core.chunk_first.call(null, seq__20182_21594__$1);
            var G__21596 = cljs.core.chunk_rest.call(null, seq__20182_21594__$1);
            var G__21597 = c__17462__auto___21595;
            var G__21598 = cljs.core.count.call(null, c__17462__auto___21595);
            var G__21599 = 0;
            seq__20182_21584 = G__21596;
            chunk__20183_21585 = G__21597;
            count__20184_21586 = G__21598;
            i__20185_21587 = G__21599;
            continue;
          } else {
            var arg__18890__auto___21600 = cljs.core.first.call(null, seq__20182_21594__$1);
            a__18889__auto__.push(arg__18890__auto___21600);
            var G__21601 = cljs.core.next.call(null, seq__20182_21594__$1);
            var G__21602 = null;
            var G__21603 = 0;
            var G__21604 = 0;
            seq__20182_21584 = G__21601;
            chunk__20183_21585 = G__21602;
            count__20184_21586 = G__21603;
            i__20185_21587 = G__21604;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.fieldset.apply(null, a__18889__auto__);
  };
  var fieldset = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return fieldset__delegate.call(this, args__18888__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 0;
  fieldset.cljs$lang$applyTo = function(arglist__21605) {
    var args__18888__auto__ = cljs.core.seq(arglist__21605);
    return fieldset__delegate(args__18888__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
quiescent.dom.figcaption = function() {
  var figcaption__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20190_21606 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20191_21607 = null;
    var count__20192_21608 = 0;
    var i__20193_21609 = 0;
    while (true) {
      if (i__20193_21609 < count__20192_21608) {
        var arg__18890__auto___21610 = cljs.core._nth.call(null, chunk__20191_21607, i__20193_21609);
        a__18889__auto__.push(arg__18890__auto___21610);
        var G__21611 = seq__20190_21606;
        var G__21612 = chunk__20191_21607;
        var G__21613 = count__20192_21608;
        var G__21614 = i__20193_21609 + 1;
        seq__20190_21606 = G__21611;
        chunk__20191_21607 = G__21612;
        count__20192_21608 = G__21613;
        i__20193_21609 = G__21614;
        continue;
      } else {
        var temp__4092__auto___21615 = cljs.core.seq.call(null, seq__20190_21606);
        if (temp__4092__auto___21615) {
          var seq__20190_21616__$1 = temp__4092__auto___21615;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20190_21616__$1)) {
            var c__17462__auto___21617 = cljs.core.chunk_first.call(null, seq__20190_21616__$1);
            var G__21618 = cljs.core.chunk_rest.call(null, seq__20190_21616__$1);
            var G__21619 = c__17462__auto___21617;
            var G__21620 = cljs.core.count.call(null, c__17462__auto___21617);
            var G__21621 = 0;
            seq__20190_21606 = G__21618;
            chunk__20191_21607 = G__21619;
            count__20192_21608 = G__21620;
            i__20193_21609 = G__21621;
            continue;
          } else {
            var arg__18890__auto___21622 = cljs.core.first.call(null, seq__20190_21616__$1);
            a__18889__auto__.push(arg__18890__auto___21622);
            var G__21623 = cljs.core.next.call(null, seq__20190_21616__$1);
            var G__21624 = null;
            var G__21625 = 0;
            var G__21626 = 0;
            seq__20190_21606 = G__21623;
            chunk__20191_21607 = G__21624;
            count__20192_21608 = G__21625;
            i__20193_21609 = G__21626;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figcaption.apply(null, a__18889__auto__);
  };
  var figcaption = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return figcaption__delegate.call(this, args__18888__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 0;
  figcaption.cljs$lang$applyTo = function(arglist__21627) {
    var args__18888__auto__ = cljs.core.seq(arglist__21627);
    return figcaption__delegate(args__18888__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
quiescent.dom.figure = function() {
  var figure__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20198_21628 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20199_21629 = null;
    var count__20200_21630 = 0;
    var i__20201_21631 = 0;
    while (true) {
      if (i__20201_21631 < count__20200_21630) {
        var arg__18890__auto___21632 = cljs.core._nth.call(null, chunk__20199_21629, i__20201_21631);
        a__18889__auto__.push(arg__18890__auto___21632);
        var G__21633 = seq__20198_21628;
        var G__21634 = chunk__20199_21629;
        var G__21635 = count__20200_21630;
        var G__21636 = i__20201_21631 + 1;
        seq__20198_21628 = G__21633;
        chunk__20199_21629 = G__21634;
        count__20200_21630 = G__21635;
        i__20201_21631 = G__21636;
        continue;
      } else {
        var temp__4092__auto___21637 = cljs.core.seq.call(null, seq__20198_21628);
        if (temp__4092__auto___21637) {
          var seq__20198_21638__$1 = temp__4092__auto___21637;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20198_21638__$1)) {
            var c__17462__auto___21639 = cljs.core.chunk_first.call(null, seq__20198_21638__$1);
            var G__21640 = cljs.core.chunk_rest.call(null, seq__20198_21638__$1);
            var G__21641 = c__17462__auto___21639;
            var G__21642 = cljs.core.count.call(null, c__17462__auto___21639);
            var G__21643 = 0;
            seq__20198_21628 = G__21640;
            chunk__20199_21629 = G__21641;
            count__20200_21630 = G__21642;
            i__20201_21631 = G__21643;
            continue;
          } else {
            var arg__18890__auto___21644 = cljs.core.first.call(null, seq__20198_21638__$1);
            a__18889__auto__.push(arg__18890__auto___21644);
            var G__21645 = cljs.core.next.call(null, seq__20198_21638__$1);
            var G__21646 = null;
            var G__21647 = 0;
            var G__21648 = 0;
            seq__20198_21628 = G__21645;
            chunk__20199_21629 = G__21646;
            count__20200_21630 = G__21647;
            i__20201_21631 = G__21648;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figure.apply(null, a__18889__auto__);
  };
  var figure = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return figure__delegate.call(this, args__18888__auto__);
  };
  figure.cljs$lang$maxFixedArity = 0;
  figure.cljs$lang$applyTo = function(arglist__21649) {
    var args__18888__auto__ = cljs.core.seq(arglist__21649);
    return figure__delegate(args__18888__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
quiescent.dom.footer = function() {
  var footer__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20206_21650 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20207_21651 = null;
    var count__20208_21652 = 0;
    var i__20209_21653 = 0;
    while (true) {
      if (i__20209_21653 < count__20208_21652) {
        var arg__18890__auto___21654 = cljs.core._nth.call(null, chunk__20207_21651, i__20209_21653);
        a__18889__auto__.push(arg__18890__auto___21654);
        var G__21655 = seq__20206_21650;
        var G__21656 = chunk__20207_21651;
        var G__21657 = count__20208_21652;
        var G__21658 = i__20209_21653 + 1;
        seq__20206_21650 = G__21655;
        chunk__20207_21651 = G__21656;
        count__20208_21652 = G__21657;
        i__20209_21653 = G__21658;
        continue;
      } else {
        var temp__4092__auto___21659 = cljs.core.seq.call(null, seq__20206_21650);
        if (temp__4092__auto___21659) {
          var seq__20206_21660__$1 = temp__4092__auto___21659;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20206_21660__$1)) {
            var c__17462__auto___21661 = cljs.core.chunk_first.call(null, seq__20206_21660__$1);
            var G__21662 = cljs.core.chunk_rest.call(null, seq__20206_21660__$1);
            var G__21663 = c__17462__auto___21661;
            var G__21664 = cljs.core.count.call(null, c__17462__auto___21661);
            var G__21665 = 0;
            seq__20206_21650 = G__21662;
            chunk__20207_21651 = G__21663;
            count__20208_21652 = G__21664;
            i__20209_21653 = G__21665;
            continue;
          } else {
            var arg__18890__auto___21666 = cljs.core.first.call(null, seq__20206_21660__$1);
            a__18889__auto__.push(arg__18890__auto___21666);
            var G__21667 = cljs.core.next.call(null, seq__20206_21660__$1);
            var G__21668 = null;
            var G__21669 = 0;
            var G__21670 = 0;
            seq__20206_21650 = G__21667;
            chunk__20207_21651 = G__21668;
            count__20208_21652 = G__21669;
            i__20209_21653 = G__21670;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.footer.apply(null, a__18889__auto__);
  };
  var footer = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return footer__delegate.call(this, args__18888__auto__);
  };
  footer.cljs$lang$maxFixedArity = 0;
  footer.cljs$lang$applyTo = function(arglist__21671) {
    var args__18888__auto__ = cljs.core.seq(arglist__21671);
    return footer__delegate(args__18888__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
quiescent.dom.form = function() {
  var form__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20214_21672 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20215_21673 = null;
    var count__20216_21674 = 0;
    var i__20217_21675 = 0;
    while (true) {
      if (i__20217_21675 < count__20216_21674) {
        var arg__18890__auto___21676 = cljs.core._nth.call(null, chunk__20215_21673, i__20217_21675);
        a__18889__auto__.push(arg__18890__auto___21676);
        var G__21677 = seq__20214_21672;
        var G__21678 = chunk__20215_21673;
        var G__21679 = count__20216_21674;
        var G__21680 = i__20217_21675 + 1;
        seq__20214_21672 = G__21677;
        chunk__20215_21673 = G__21678;
        count__20216_21674 = G__21679;
        i__20217_21675 = G__21680;
        continue;
      } else {
        var temp__4092__auto___21681 = cljs.core.seq.call(null, seq__20214_21672);
        if (temp__4092__auto___21681) {
          var seq__20214_21682__$1 = temp__4092__auto___21681;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20214_21682__$1)) {
            var c__17462__auto___21683 = cljs.core.chunk_first.call(null, seq__20214_21682__$1);
            var G__21684 = cljs.core.chunk_rest.call(null, seq__20214_21682__$1);
            var G__21685 = c__17462__auto___21683;
            var G__21686 = cljs.core.count.call(null, c__17462__auto___21683);
            var G__21687 = 0;
            seq__20214_21672 = G__21684;
            chunk__20215_21673 = G__21685;
            count__20216_21674 = G__21686;
            i__20217_21675 = G__21687;
            continue;
          } else {
            var arg__18890__auto___21688 = cljs.core.first.call(null, seq__20214_21682__$1);
            a__18889__auto__.push(arg__18890__auto___21688);
            var G__21689 = cljs.core.next.call(null, seq__20214_21682__$1);
            var G__21690 = null;
            var G__21691 = 0;
            var G__21692 = 0;
            seq__20214_21672 = G__21689;
            chunk__20215_21673 = G__21690;
            count__20216_21674 = G__21691;
            i__20217_21675 = G__21692;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.form.apply(null, a__18889__auto__);
  };
  var form = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return form__delegate.call(this, args__18888__auto__);
  };
  form.cljs$lang$maxFixedArity = 0;
  form.cljs$lang$applyTo = function(arglist__21693) {
    var args__18888__auto__ = cljs.core.seq(arglist__21693);
    return form__delegate(args__18888__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
quiescent.dom.h1 = function() {
  var h1__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20222_21694 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20223_21695 = null;
    var count__20224_21696 = 0;
    var i__20225_21697 = 0;
    while (true) {
      if (i__20225_21697 < count__20224_21696) {
        var arg__18890__auto___21698 = cljs.core._nth.call(null, chunk__20223_21695, i__20225_21697);
        a__18889__auto__.push(arg__18890__auto___21698);
        var G__21699 = seq__20222_21694;
        var G__21700 = chunk__20223_21695;
        var G__21701 = count__20224_21696;
        var G__21702 = i__20225_21697 + 1;
        seq__20222_21694 = G__21699;
        chunk__20223_21695 = G__21700;
        count__20224_21696 = G__21701;
        i__20225_21697 = G__21702;
        continue;
      } else {
        var temp__4092__auto___21703 = cljs.core.seq.call(null, seq__20222_21694);
        if (temp__4092__auto___21703) {
          var seq__20222_21704__$1 = temp__4092__auto___21703;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20222_21704__$1)) {
            var c__17462__auto___21705 = cljs.core.chunk_first.call(null, seq__20222_21704__$1);
            var G__21706 = cljs.core.chunk_rest.call(null, seq__20222_21704__$1);
            var G__21707 = c__17462__auto___21705;
            var G__21708 = cljs.core.count.call(null, c__17462__auto___21705);
            var G__21709 = 0;
            seq__20222_21694 = G__21706;
            chunk__20223_21695 = G__21707;
            count__20224_21696 = G__21708;
            i__20225_21697 = G__21709;
            continue;
          } else {
            var arg__18890__auto___21710 = cljs.core.first.call(null, seq__20222_21704__$1);
            a__18889__auto__.push(arg__18890__auto___21710);
            var G__21711 = cljs.core.next.call(null, seq__20222_21704__$1);
            var G__21712 = null;
            var G__21713 = 0;
            var G__21714 = 0;
            seq__20222_21694 = G__21711;
            chunk__20223_21695 = G__21712;
            count__20224_21696 = G__21713;
            i__20225_21697 = G__21714;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h1.apply(null, a__18889__auto__);
  };
  var h1 = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h1__delegate.call(this, args__18888__auto__);
  };
  h1.cljs$lang$maxFixedArity = 0;
  h1.cljs$lang$applyTo = function(arglist__21715) {
    var args__18888__auto__ = cljs.core.seq(arglist__21715);
    return h1__delegate(args__18888__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
quiescent.dom.h2 = function() {
  var h2__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20230_21716 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20231_21717 = null;
    var count__20232_21718 = 0;
    var i__20233_21719 = 0;
    while (true) {
      if (i__20233_21719 < count__20232_21718) {
        var arg__18890__auto___21720 = cljs.core._nth.call(null, chunk__20231_21717, i__20233_21719);
        a__18889__auto__.push(arg__18890__auto___21720);
        var G__21721 = seq__20230_21716;
        var G__21722 = chunk__20231_21717;
        var G__21723 = count__20232_21718;
        var G__21724 = i__20233_21719 + 1;
        seq__20230_21716 = G__21721;
        chunk__20231_21717 = G__21722;
        count__20232_21718 = G__21723;
        i__20233_21719 = G__21724;
        continue;
      } else {
        var temp__4092__auto___21725 = cljs.core.seq.call(null, seq__20230_21716);
        if (temp__4092__auto___21725) {
          var seq__20230_21726__$1 = temp__4092__auto___21725;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20230_21726__$1)) {
            var c__17462__auto___21727 = cljs.core.chunk_first.call(null, seq__20230_21726__$1);
            var G__21728 = cljs.core.chunk_rest.call(null, seq__20230_21726__$1);
            var G__21729 = c__17462__auto___21727;
            var G__21730 = cljs.core.count.call(null, c__17462__auto___21727);
            var G__21731 = 0;
            seq__20230_21716 = G__21728;
            chunk__20231_21717 = G__21729;
            count__20232_21718 = G__21730;
            i__20233_21719 = G__21731;
            continue;
          } else {
            var arg__18890__auto___21732 = cljs.core.first.call(null, seq__20230_21726__$1);
            a__18889__auto__.push(arg__18890__auto___21732);
            var G__21733 = cljs.core.next.call(null, seq__20230_21726__$1);
            var G__21734 = null;
            var G__21735 = 0;
            var G__21736 = 0;
            seq__20230_21716 = G__21733;
            chunk__20231_21717 = G__21734;
            count__20232_21718 = G__21735;
            i__20233_21719 = G__21736;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h2.apply(null, a__18889__auto__);
  };
  var h2 = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h2__delegate.call(this, args__18888__auto__);
  };
  h2.cljs$lang$maxFixedArity = 0;
  h2.cljs$lang$applyTo = function(arglist__21737) {
    var args__18888__auto__ = cljs.core.seq(arglist__21737);
    return h2__delegate(args__18888__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
quiescent.dom.h3 = function() {
  var h3__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20238_21738 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20239_21739 = null;
    var count__20240_21740 = 0;
    var i__20241_21741 = 0;
    while (true) {
      if (i__20241_21741 < count__20240_21740) {
        var arg__18890__auto___21742 = cljs.core._nth.call(null, chunk__20239_21739, i__20241_21741);
        a__18889__auto__.push(arg__18890__auto___21742);
        var G__21743 = seq__20238_21738;
        var G__21744 = chunk__20239_21739;
        var G__21745 = count__20240_21740;
        var G__21746 = i__20241_21741 + 1;
        seq__20238_21738 = G__21743;
        chunk__20239_21739 = G__21744;
        count__20240_21740 = G__21745;
        i__20241_21741 = G__21746;
        continue;
      } else {
        var temp__4092__auto___21747 = cljs.core.seq.call(null, seq__20238_21738);
        if (temp__4092__auto___21747) {
          var seq__20238_21748__$1 = temp__4092__auto___21747;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20238_21748__$1)) {
            var c__17462__auto___21749 = cljs.core.chunk_first.call(null, seq__20238_21748__$1);
            var G__21750 = cljs.core.chunk_rest.call(null, seq__20238_21748__$1);
            var G__21751 = c__17462__auto___21749;
            var G__21752 = cljs.core.count.call(null, c__17462__auto___21749);
            var G__21753 = 0;
            seq__20238_21738 = G__21750;
            chunk__20239_21739 = G__21751;
            count__20240_21740 = G__21752;
            i__20241_21741 = G__21753;
            continue;
          } else {
            var arg__18890__auto___21754 = cljs.core.first.call(null, seq__20238_21748__$1);
            a__18889__auto__.push(arg__18890__auto___21754);
            var G__21755 = cljs.core.next.call(null, seq__20238_21748__$1);
            var G__21756 = null;
            var G__21757 = 0;
            var G__21758 = 0;
            seq__20238_21738 = G__21755;
            chunk__20239_21739 = G__21756;
            count__20240_21740 = G__21757;
            i__20241_21741 = G__21758;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h3.apply(null, a__18889__auto__);
  };
  var h3 = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h3__delegate.call(this, args__18888__auto__);
  };
  h3.cljs$lang$maxFixedArity = 0;
  h3.cljs$lang$applyTo = function(arglist__21759) {
    var args__18888__auto__ = cljs.core.seq(arglist__21759);
    return h3__delegate(args__18888__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
quiescent.dom.h4 = function() {
  var h4__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20246_21760 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20247_21761 = null;
    var count__20248_21762 = 0;
    var i__20249_21763 = 0;
    while (true) {
      if (i__20249_21763 < count__20248_21762) {
        var arg__18890__auto___21764 = cljs.core._nth.call(null, chunk__20247_21761, i__20249_21763);
        a__18889__auto__.push(arg__18890__auto___21764);
        var G__21765 = seq__20246_21760;
        var G__21766 = chunk__20247_21761;
        var G__21767 = count__20248_21762;
        var G__21768 = i__20249_21763 + 1;
        seq__20246_21760 = G__21765;
        chunk__20247_21761 = G__21766;
        count__20248_21762 = G__21767;
        i__20249_21763 = G__21768;
        continue;
      } else {
        var temp__4092__auto___21769 = cljs.core.seq.call(null, seq__20246_21760);
        if (temp__4092__auto___21769) {
          var seq__20246_21770__$1 = temp__4092__auto___21769;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20246_21770__$1)) {
            var c__17462__auto___21771 = cljs.core.chunk_first.call(null, seq__20246_21770__$1);
            var G__21772 = cljs.core.chunk_rest.call(null, seq__20246_21770__$1);
            var G__21773 = c__17462__auto___21771;
            var G__21774 = cljs.core.count.call(null, c__17462__auto___21771);
            var G__21775 = 0;
            seq__20246_21760 = G__21772;
            chunk__20247_21761 = G__21773;
            count__20248_21762 = G__21774;
            i__20249_21763 = G__21775;
            continue;
          } else {
            var arg__18890__auto___21776 = cljs.core.first.call(null, seq__20246_21770__$1);
            a__18889__auto__.push(arg__18890__auto___21776);
            var G__21777 = cljs.core.next.call(null, seq__20246_21770__$1);
            var G__21778 = null;
            var G__21779 = 0;
            var G__21780 = 0;
            seq__20246_21760 = G__21777;
            chunk__20247_21761 = G__21778;
            count__20248_21762 = G__21779;
            i__20249_21763 = G__21780;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h4.apply(null, a__18889__auto__);
  };
  var h4 = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h4__delegate.call(this, args__18888__auto__);
  };
  h4.cljs$lang$maxFixedArity = 0;
  h4.cljs$lang$applyTo = function(arglist__21781) {
    var args__18888__auto__ = cljs.core.seq(arglist__21781);
    return h4__delegate(args__18888__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
quiescent.dom.h5 = function() {
  var h5__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20254_21782 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20255_21783 = null;
    var count__20256_21784 = 0;
    var i__20257_21785 = 0;
    while (true) {
      if (i__20257_21785 < count__20256_21784) {
        var arg__18890__auto___21786 = cljs.core._nth.call(null, chunk__20255_21783, i__20257_21785);
        a__18889__auto__.push(arg__18890__auto___21786);
        var G__21787 = seq__20254_21782;
        var G__21788 = chunk__20255_21783;
        var G__21789 = count__20256_21784;
        var G__21790 = i__20257_21785 + 1;
        seq__20254_21782 = G__21787;
        chunk__20255_21783 = G__21788;
        count__20256_21784 = G__21789;
        i__20257_21785 = G__21790;
        continue;
      } else {
        var temp__4092__auto___21791 = cljs.core.seq.call(null, seq__20254_21782);
        if (temp__4092__auto___21791) {
          var seq__20254_21792__$1 = temp__4092__auto___21791;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20254_21792__$1)) {
            var c__17462__auto___21793 = cljs.core.chunk_first.call(null, seq__20254_21792__$1);
            var G__21794 = cljs.core.chunk_rest.call(null, seq__20254_21792__$1);
            var G__21795 = c__17462__auto___21793;
            var G__21796 = cljs.core.count.call(null, c__17462__auto___21793);
            var G__21797 = 0;
            seq__20254_21782 = G__21794;
            chunk__20255_21783 = G__21795;
            count__20256_21784 = G__21796;
            i__20257_21785 = G__21797;
            continue;
          } else {
            var arg__18890__auto___21798 = cljs.core.first.call(null, seq__20254_21792__$1);
            a__18889__auto__.push(arg__18890__auto___21798);
            var G__21799 = cljs.core.next.call(null, seq__20254_21792__$1);
            var G__21800 = null;
            var G__21801 = 0;
            var G__21802 = 0;
            seq__20254_21782 = G__21799;
            chunk__20255_21783 = G__21800;
            count__20256_21784 = G__21801;
            i__20257_21785 = G__21802;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h5.apply(null, a__18889__auto__);
  };
  var h5 = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h5__delegate.call(this, args__18888__auto__);
  };
  h5.cljs$lang$maxFixedArity = 0;
  h5.cljs$lang$applyTo = function(arglist__21803) {
    var args__18888__auto__ = cljs.core.seq(arglist__21803);
    return h5__delegate(args__18888__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
quiescent.dom.h6 = function() {
  var h6__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20262_21804 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20263_21805 = null;
    var count__20264_21806 = 0;
    var i__20265_21807 = 0;
    while (true) {
      if (i__20265_21807 < count__20264_21806) {
        var arg__18890__auto___21808 = cljs.core._nth.call(null, chunk__20263_21805, i__20265_21807);
        a__18889__auto__.push(arg__18890__auto___21808);
        var G__21809 = seq__20262_21804;
        var G__21810 = chunk__20263_21805;
        var G__21811 = count__20264_21806;
        var G__21812 = i__20265_21807 + 1;
        seq__20262_21804 = G__21809;
        chunk__20263_21805 = G__21810;
        count__20264_21806 = G__21811;
        i__20265_21807 = G__21812;
        continue;
      } else {
        var temp__4092__auto___21813 = cljs.core.seq.call(null, seq__20262_21804);
        if (temp__4092__auto___21813) {
          var seq__20262_21814__$1 = temp__4092__auto___21813;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20262_21814__$1)) {
            var c__17462__auto___21815 = cljs.core.chunk_first.call(null, seq__20262_21814__$1);
            var G__21816 = cljs.core.chunk_rest.call(null, seq__20262_21814__$1);
            var G__21817 = c__17462__auto___21815;
            var G__21818 = cljs.core.count.call(null, c__17462__auto___21815);
            var G__21819 = 0;
            seq__20262_21804 = G__21816;
            chunk__20263_21805 = G__21817;
            count__20264_21806 = G__21818;
            i__20265_21807 = G__21819;
            continue;
          } else {
            var arg__18890__auto___21820 = cljs.core.first.call(null, seq__20262_21814__$1);
            a__18889__auto__.push(arg__18890__auto___21820);
            var G__21821 = cljs.core.next.call(null, seq__20262_21814__$1);
            var G__21822 = null;
            var G__21823 = 0;
            var G__21824 = 0;
            seq__20262_21804 = G__21821;
            chunk__20263_21805 = G__21822;
            count__20264_21806 = G__21823;
            i__20265_21807 = G__21824;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h6.apply(null, a__18889__auto__);
  };
  var h6 = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h6__delegate.call(this, args__18888__auto__);
  };
  h6.cljs$lang$maxFixedArity = 0;
  h6.cljs$lang$applyTo = function(arglist__21825) {
    var args__18888__auto__ = cljs.core.seq(arglist__21825);
    return h6__delegate(args__18888__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
quiescent.dom.head = function() {
  var head__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20270_21826 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20271_21827 = null;
    var count__20272_21828 = 0;
    var i__20273_21829 = 0;
    while (true) {
      if (i__20273_21829 < count__20272_21828) {
        var arg__18890__auto___21830 = cljs.core._nth.call(null, chunk__20271_21827, i__20273_21829);
        a__18889__auto__.push(arg__18890__auto___21830);
        var G__21831 = seq__20270_21826;
        var G__21832 = chunk__20271_21827;
        var G__21833 = count__20272_21828;
        var G__21834 = i__20273_21829 + 1;
        seq__20270_21826 = G__21831;
        chunk__20271_21827 = G__21832;
        count__20272_21828 = G__21833;
        i__20273_21829 = G__21834;
        continue;
      } else {
        var temp__4092__auto___21835 = cljs.core.seq.call(null, seq__20270_21826);
        if (temp__4092__auto___21835) {
          var seq__20270_21836__$1 = temp__4092__auto___21835;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20270_21836__$1)) {
            var c__17462__auto___21837 = cljs.core.chunk_first.call(null, seq__20270_21836__$1);
            var G__21838 = cljs.core.chunk_rest.call(null, seq__20270_21836__$1);
            var G__21839 = c__17462__auto___21837;
            var G__21840 = cljs.core.count.call(null, c__17462__auto___21837);
            var G__21841 = 0;
            seq__20270_21826 = G__21838;
            chunk__20271_21827 = G__21839;
            count__20272_21828 = G__21840;
            i__20273_21829 = G__21841;
            continue;
          } else {
            var arg__18890__auto___21842 = cljs.core.first.call(null, seq__20270_21836__$1);
            a__18889__auto__.push(arg__18890__auto___21842);
            var G__21843 = cljs.core.next.call(null, seq__20270_21836__$1);
            var G__21844 = null;
            var G__21845 = 0;
            var G__21846 = 0;
            seq__20270_21826 = G__21843;
            chunk__20271_21827 = G__21844;
            count__20272_21828 = G__21845;
            i__20273_21829 = G__21846;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.head.apply(null, a__18889__auto__);
  };
  var head = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return head__delegate.call(this, args__18888__auto__);
  };
  head.cljs$lang$maxFixedArity = 0;
  head.cljs$lang$applyTo = function(arglist__21847) {
    var args__18888__auto__ = cljs.core.seq(arglist__21847);
    return head__delegate(args__18888__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
quiescent.dom.header = function() {
  var header__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20278_21848 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20279_21849 = null;
    var count__20280_21850 = 0;
    var i__20281_21851 = 0;
    while (true) {
      if (i__20281_21851 < count__20280_21850) {
        var arg__18890__auto___21852 = cljs.core._nth.call(null, chunk__20279_21849, i__20281_21851);
        a__18889__auto__.push(arg__18890__auto___21852);
        var G__21853 = seq__20278_21848;
        var G__21854 = chunk__20279_21849;
        var G__21855 = count__20280_21850;
        var G__21856 = i__20281_21851 + 1;
        seq__20278_21848 = G__21853;
        chunk__20279_21849 = G__21854;
        count__20280_21850 = G__21855;
        i__20281_21851 = G__21856;
        continue;
      } else {
        var temp__4092__auto___21857 = cljs.core.seq.call(null, seq__20278_21848);
        if (temp__4092__auto___21857) {
          var seq__20278_21858__$1 = temp__4092__auto___21857;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20278_21858__$1)) {
            var c__17462__auto___21859 = cljs.core.chunk_first.call(null, seq__20278_21858__$1);
            var G__21860 = cljs.core.chunk_rest.call(null, seq__20278_21858__$1);
            var G__21861 = c__17462__auto___21859;
            var G__21862 = cljs.core.count.call(null, c__17462__auto___21859);
            var G__21863 = 0;
            seq__20278_21848 = G__21860;
            chunk__20279_21849 = G__21861;
            count__20280_21850 = G__21862;
            i__20281_21851 = G__21863;
            continue;
          } else {
            var arg__18890__auto___21864 = cljs.core.first.call(null, seq__20278_21858__$1);
            a__18889__auto__.push(arg__18890__auto___21864);
            var G__21865 = cljs.core.next.call(null, seq__20278_21858__$1);
            var G__21866 = null;
            var G__21867 = 0;
            var G__21868 = 0;
            seq__20278_21848 = G__21865;
            chunk__20279_21849 = G__21866;
            count__20280_21850 = G__21867;
            i__20281_21851 = G__21868;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.header.apply(null, a__18889__auto__);
  };
  var header = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return header__delegate.call(this, args__18888__auto__);
  };
  header.cljs$lang$maxFixedArity = 0;
  header.cljs$lang$applyTo = function(arglist__21869) {
    var args__18888__auto__ = cljs.core.seq(arglist__21869);
    return header__delegate(args__18888__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
quiescent.dom.hr = function() {
  var hr__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20286_21870 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20287_21871 = null;
    var count__20288_21872 = 0;
    var i__20289_21873 = 0;
    while (true) {
      if (i__20289_21873 < count__20288_21872) {
        var arg__18890__auto___21874 = cljs.core._nth.call(null, chunk__20287_21871, i__20289_21873);
        a__18889__auto__.push(arg__18890__auto___21874);
        var G__21875 = seq__20286_21870;
        var G__21876 = chunk__20287_21871;
        var G__21877 = count__20288_21872;
        var G__21878 = i__20289_21873 + 1;
        seq__20286_21870 = G__21875;
        chunk__20287_21871 = G__21876;
        count__20288_21872 = G__21877;
        i__20289_21873 = G__21878;
        continue;
      } else {
        var temp__4092__auto___21879 = cljs.core.seq.call(null, seq__20286_21870);
        if (temp__4092__auto___21879) {
          var seq__20286_21880__$1 = temp__4092__auto___21879;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20286_21880__$1)) {
            var c__17462__auto___21881 = cljs.core.chunk_first.call(null, seq__20286_21880__$1);
            var G__21882 = cljs.core.chunk_rest.call(null, seq__20286_21880__$1);
            var G__21883 = c__17462__auto___21881;
            var G__21884 = cljs.core.count.call(null, c__17462__auto___21881);
            var G__21885 = 0;
            seq__20286_21870 = G__21882;
            chunk__20287_21871 = G__21883;
            count__20288_21872 = G__21884;
            i__20289_21873 = G__21885;
            continue;
          } else {
            var arg__18890__auto___21886 = cljs.core.first.call(null, seq__20286_21880__$1);
            a__18889__auto__.push(arg__18890__auto___21886);
            var G__21887 = cljs.core.next.call(null, seq__20286_21880__$1);
            var G__21888 = null;
            var G__21889 = 0;
            var G__21890 = 0;
            seq__20286_21870 = G__21887;
            chunk__20287_21871 = G__21888;
            count__20288_21872 = G__21889;
            i__20289_21873 = G__21890;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.hr.apply(null, a__18889__auto__);
  };
  var hr = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hr__delegate.call(this, args__18888__auto__);
  };
  hr.cljs$lang$maxFixedArity = 0;
  hr.cljs$lang$applyTo = function(arglist__21891) {
    var args__18888__auto__ = cljs.core.seq(arglist__21891);
    return hr__delegate(args__18888__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
quiescent.dom.html = function() {
  var html__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20294_21892 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20295_21893 = null;
    var count__20296_21894 = 0;
    var i__20297_21895 = 0;
    while (true) {
      if (i__20297_21895 < count__20296_21894) {
        var arg__18890__auto___21896 = cljs.core._nth.call(null, chunk__20295_21893, i__20297_21895);
        a__18889__auto__.push(arg__18890__auto___21896);
        var G__21897 = seq__20294_21892;
        var G__21898 = chunk__20295_21893;
        var G__21899 = count__20296_21894;
        var G__21900 = i__20297_21895 + 1;
        seq__20294_21892 = G__21897;
        chunk__20295_21893 = G__21898;
        count__20296_21894 = G__21899;
        i__20297_21895 = G__21900;
        continue;
      } else {
        var temp__4092__auto___21901 = cljs.core.seq.call(null, seq__20294_21892);
        if (temp__4092__auto___21901) {
          var seq__20294_21902__$1 = temp__4092__auto___21901;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20294_21902__$1)) {
            var c__17462__auto___21903 = cljs.core.chunk_first.call(null, seq__20294_21902__$1);
            var G__21904 = cljs.core.chunk_rest.call(null, seq__20294_21902__$1);
            var G__21905 = c__17462__auto___21903;
            var G__21906 = cljs.core.count.call(null, c__17462__auto___21903);
            var G__21907 = 0;
            seq__20294_21892 = G__21904;
            chunk__20295_21893 = G__21905;
            count__20296_21894 = G__21906;
            i__20297_21895 = G__21907;
            continue;
          } else {
            var arg__18890__auto___21908 = cljs.core.first.call(null, seq__20294_21902__$1);
            a__18889__auto__.push(arg__18890__auto___21908);
            var G__21909 = cljs.core.next.call(null, seq__20294_21902__$1);
            var G__21910 = null;
            var G__21911 = 0;
            var G__21912 = 0;
            seq__20294_21892 = G__21909;
            chunk__20295_21893 = G__21910;
            count__20296_21894 = G__21911;
            i__20297_21895 = G__21912;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.html.apply(null, a__18889__auto__);
  };
  var html = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return html__delegate.call(this, args__18888__auto__);
  };
  html.cljs$lang$maxFixedArity = 0;
  html.cljs$lang$applyTo = function(arglist__21913) {
    var args__18888__auto__ = cljs.core.seq(arglist__21913);
    return html__delegate(args__18888__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
quiescent.dom.i = function() {
  var i__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20302_21914 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20303_21915 = null;
    var count__20304_21916 = 0;
    var i__20305_21917 = 0;
    while (true) {
      if (i__20305_21917 < count__20304_21916) {
        var arg__18890__auto___21918 = cljs.core._nth.call(null, chunk__20303_21915, i__20305_21917);
        a__18889__auto__.push(arg__18890__auto___21918);
        var G__21919 = seq__20302_21914;
        var G__21920 = chunk__20303_21915;
        var G__21921 = count__20304_21916;
        var G__21922 = i__20305_21917 + 1;
        seq__20302_21914 = G__21919;
        chunk__20303_21915 = G__21920;
        count__20304_21916 = G__21921;
        i__20305_21917 = G__21922;
        continue;
      } else {
        var temp__4092__auto___21923 = cljs.core.seq.call(null, seq__20302_21914);
        if (temp__4092__auto___21923) {
          var seq__20302_21924__$1 = temp__4092__auto___21923;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20302_21924__$1)) {
            var c__17462__auto___21925 = cljs.core.chunk_first.call(null, seq__20302_21924__$1);
            var G__21926 = cljs.core.chunk_rest.call(null, seq__20302_21924__$1);
            var G__21927 = c__17462__auto___21925;
            var G__21928 = cljs.core.count.call(null, c__17462__auto___21925);
            var G__21929 = 0;
            seq__20302_21914 = G__21926;
            chunk__20303_21915 = G__21927;
            count__20304_21916 = G__21928;
            i__20305_21917 = G__21929;
            continue;
          } else {
            var arg__18890__auto___21930 = cljs.core.first.call(null, seq__20302_21924__$1);
            a__18889__auto__.push(arg__18890__auto___21930);
            var G__21931 = cljs.core.next.call(null, seq__20302_21924__$1);
            var G__21932 = null;
            var G__21933 = 0;
            var G__21934 = 0;
            seq__20302_21914 = G__21931;
            chunk__20303_21915 = G__21932;
            count__20304_21916 = G__21933;
            i__20305_21917 = G__21934;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.i.apply(null, a__18889__auto__);
  };
  var i = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return i__delegate.call(this, args__18888__auto__);
  };
  i.cljs$lang$maxFixedArity = 0;
  i.cljs$lang$applyTo = function(arglist__21935) {
    var args__18888__auto__ = cljs.core.seq(arglist__21935);
    return i__delegate(args__18888__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
quiescent.dom.iframe = function() {
  var iframe__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20310_21936 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20311_21937 = null;
    var count__20312_21938 = 0;
    var i__20313_21939 = 0;
    while (true) {
      if (i__20313_21939 < count__20312_21938) {
        var arg__18890__auto___21940 = cljs.core._nth.call(null, chunk__20311_21937, i__20313_21939);
        a__18889__auto__.push(arg__18890__auto___21940);
        var G__21941 = seq__20310_21936;
        var G__21942 = chunk__20311_21937;
        var G__21943 = count__20312_21938;
        var G__21944 = i__20313_21939 + 1;
        seq__20310_21936 = G__21941;
        chunk__20311_21937 = G__21942;
        count__20312_21938 = G__21943;
        i__20313_21939 = G__21944;
        continue;
      } else {
        var temp__4092__auto___21945 = cljs.core.seq.call(null, seq__20310_21936);
        if (temp__4092__auto___21945) {
          var seq__20310_21946__$1 = temp__4092__auto___21945;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20310_21946__$1)) {
            var c__17462__auto___21947 = cljs.core.chunk_first.call(null, seq__20310_21946__$1);
            var G__21948 = cljs.core.chunk_rest.call(null, seq__20310_21946__$1);
            var G__21949 = c__17462__auto___21947;
            var G__21950 = cljs.core.count.call(null, c__17462__auto___21947);
            var G__21951 = 0;
            seq__20310_21936 = G__21948;
            chunk__20311_21937 = G__21949;
            count__20312_21938 = G__21950;
            i__20313_21939 = G__21951;
            continue;
          } else {
            var arg__18890__auto___21952 = cljs.core.first.call(null, seq__20310_21946__$1);
            a__18889__auto__.push(arg__18890__auto___21952);
            var G__21953 = cljs.core.next.call(null, seq__20310_21946__$1);
            var G__21954 = null;
            var G__21955 = 0;
            var G__21956 = 0;
            seq__20310_21936 = G__21953;
            chunk__20311_21937 = G__21954;
            count__20312_21938 = G__21955;
            i__20313_21939 = G__21956;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.iframe.apply(null, a__18889__auto__);
  };
  var iframe = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return iframe__delegate.call(this, args__18888__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 0;
  iframe.cljs$lang$applyTo = function(arglist__21957) {
    var args__18888__auto__ = cljs.core.seq(arglist__21957);
    return iframe__delegate(args__18888__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
quiescent.dom.img = function() {
  var img__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20318_21958 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20319_21959 = null;
    var count__20320_21960 = 0;
    var i__20321_21961 = 0;
    while (true) {
      if (i__20321_21961 < count__20320_21960) {
        var arg__18890__auto___21962 = cljs.core._nth.call(null, chunk__20319_21959, i__20321_21961);
        a__18889__auto__.push(arg__18890__auto___21962);
        var G__21963 = seq__20318_21958;
        var G__21964 = chunk__20319_21959;
        var G__21965 = count__20320_21960;
        var G__21966 = i__20321_21961 + 1;
        seq__20318_21958 = G__21963;
        chunk__20319_21959 = G__21964;
        count__20320_21960 = G__21965;
        i__20321_21961 = G__21966;
        continue;
      } else {
        var temp__4092__auto___21967 = cljs.core.seq.call(null, seq__20318_21958);
        if (temp__4092__auto___21967) {
          var seq__20318_21968__$1 = temp__4092__auto___21967;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20318_21968__$1)) {
            var c__17462__auto___21969 = cljs.core.chunk_first.call(null, seq__20318_21968__$1);
            var G__21970 = cljs.core.chunk_rest.call(null, seq__20318_21968__$1);
            var G__21971 = c__17462__auto___21969;
            var G__21972 = cljs.core.count.call(null, c__17462__auto___21969);
            var G__21973 = 0;
            seq__20318_21958 = G__21970;
            chunk__20319_21959 = G__21971;
            count__20320_21960 = G__21972;
            i__20321_21961 = G__21973;
            continue;
          } else {
            var arg__18890__auto___21974 = cljs.core.first.call(null, seq__20318_21968__$1);
            a__18889__auto__.push(arg__18890__auto___21974);
            var G__21975 = cljs.core.next.call(null, seq__20318_21968__$1);
            var G__21976 = null;
            var G__21977 = 0;
            var G__21978 = 0;
            seq__20318_21958 = G__21975;
            chunk__20319_21959 = G__21976;
            count__20320_21960 = G__21977;
            i__20321_21961 = G__21978;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.img.apply(null, a__18889__auto__);
  };
  var img = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return img__delegate.call(this, args__18888__auto__);
  };
  img.cljs$lang$maxFixedArity = 0;
  img.cljs$lang$applyTo = function(arglist__21979) {
    var args__18888__auto__ = cljs.core.seq(arglist__21979);
    return img__delegate(args__18888__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
quiescent.dom.input = function() {
  var input__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20326_21980 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20327_21981 = null;
    var count__20328_21982 = 0;
    var i__20329_21983 = 0;
    while (true) {
      if (i__20329_21983 < count__20328_21982) {
        var arg__18890__auto___21984 = cljs.core._nth.call(null, chunk__20327_21981, i__20329_21983);
        a__18889__auto__.push(arg__18890__auto___21984);
        var G__21985 = seq__20326_21980;
        var G__21986 = chunk__20327_21981;
        var G__21987 = count__20328_21982;
        var G__21988 = i__20329_21983 + 1;
        seq__20326_21980 = G__21985;
        chunk__20327_21981 = G__21986;
        count__20328_21982 = G__21987;
        i__20329_21983 = G__21988;
        continue;
      } else {
        var temp__4092__auto___21989 = cljs.core.seq.call(null, seq__20326_21980);
        if (temp__4092__auto___21989) {
          var seq__20326_21990__$1 = temp__4092__auto___21989;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20326_21990__$1)) {
            var c__17462__auto___21991 = cljs.core.chunk_first.call(null, seq__20326_21990__$1);
            var G__21992 = cljs.core.chunk_rest.call(null, seq__20326_21990__$1);
            var G__21993 = c__17462__auto___21991;
            var G__21994 = cljs.core.count.call(null, c__17462__auto___21991);
            var G__21995 = 0;
            seq__20326_21980 = G__21992;
            chunk__20327_21981 = G__21993;
            count__20328_21982 = G__21994;
            i__20329_21983 = G__21995;
            continue;
          } else {
            var arg__18890__auto___21996 = cljs.core.first.call(null, seq__20326_21990__$1);
            a__18889__auto__.push(arg__18890__auto___21996);
            var G__21997 = cljs.core.next.call(null, seq__20326_21990__$1);
            var G__21998 = null;
            var G__21999 = 0;
            var G__22000 = 0;
            seq__20326_21980 = G__21997;
            chunk__20327_21981 = G__21998;
            count__20328_21982 = G__21999;
            i__20329_21983 = G__22000;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.input.apply(null, a__18889__auto__);
  };
  var input = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return input__delegate.call(this, args__18888__auto__);
  };
  input.cljs$lang$maxFixedArity = 0;
  input.cljs$lang$applyTo = function(arglist__22001) {
    var args__18888__auto__ = cljs.core.seq(arglist__22001);
    return input__delegate(args__18888__auto__);
  };
  input.cljs$core$IFn$_invoke$arity$variadic = input__delegate;
  return input;
}();
quiescent.dom.ins = function() {
  var ins__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20334_22002 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20335_22003 = null;
    var count__20336_22004 = 0;
    var i__20337_22005 = 0;
    while (true) {
      if (i__20337_22005 < count__20336_22004) {
        var arg__18890__auto___22006 = cljs.core._nth.call(null, chunk__20335_22003, i__20337_22005);
        a__18889__auto__.push(arg__18890__auto___22006);
        var G__22007 = seq__20334_22002;
        var G__22008 = chunk__20335_22003;
        var G__22009 = count__20336_22004;
        var G__22010 = i__20337_22005 + 1;
        seq__20334_22002 = G__22007;
        chunk__20335_22003 = G__22008;
        count__20336_22004 = G__22009;
        i__20337_22005 = G__22010;
        continue;
      } else {
        var temp__4092__auto___22011 = cljs.core.seq.call(null, seq__20334_22002);
        if (temp__4092__auto___22011) {
          var seq__20334_22012__$1 = temp__4092__auto___22011;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20334_22012__$1)) {
            var c__17462__auto___22013 = cljs.core.chunk_first.call(null, seq__20334_22012__$1);
            var G__22014 = cljs.core.chunk_rest.call(null, seq__20334_22012__$1);
            var G__22015 = c__17462__auto___22013;
            var G__22016 = cljs.core.count.call(null, c__17462__auto___22013);
            var G__22017 = 0;
            seq__20334_22002 = G__22014;
            chunk__20335_22003 = G__22015;
            count__20336_22004 = G__22016;
            i__20337_22005 = G__22017;
            continue;
          } else {
            var arg__18890__auto___22018 = cljs.core.first.call(null, seq__20334_22012__$1);
            a__18889__auto__.push(arg__18890__auto___22018);
            var G__22019 = cljs.core.next.call(null, seq__20334_22012__$1);
            var G__22020 = null;
            var G__22021 = 0;
            var G__22022 = 0;
            seq__20334_22002 = G__22019;
            chunk__20335_22003 = G__22020;
            count__20336_22004 = G__22021;
            i__20337_22005 = G__22022;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ins.apply(null, a__18889__auto__);
  };
  var ins = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ins__delegate.call(this, args__18888__auto__);
  };
  ins.cljs$lang$maxFixedArity = 0;
  ins.cljs$lang$applyTo = function(arglist__22023) {
    var args__18888__auto__ = cljs.core.seq(arglist__22023);
    return ins__delegate(args__18888__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
quiescent.dom.kbd = function() {
  var kbd__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20342_22024 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20343_22025 = null;
    var count__20344_22026 = 0;
    var i__20345_22027 = 0;
    while (true) {
      if (i__20345_22027 < count__20344_22026) {
        var arg__18890__auto___22028 = cljs.core._nth.call(null, chunk__20343_22025, i__20345_22027);
        a__18889__auto__.push(arg__18890__auto___22028);
        var G__22029 = seq__20342_22024;
        var G__22030 = chunk__20343_22025;
        var G__22031 = count__20344_22026;
        var G__22032 = i__20345_22027 + 1;
        seq__20342_22024 = G__22029;
        chunk__20343_22025 = G__22030;
        count__20344_22026 = G__22031;
        i__20345_22027 = G__22032;
        continue;
      } else {
        var temp__4092__auto___22033 = cljs.core.seq.call(null, seq__20342_22024);
        if (temp__4092__auto___22033) {
          var seq__20342_22034__$1 = temp__4092__auto___22033;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20342_22034__$1)) {
            var c__17462__auto___22035 = cljs.core.chunk_first.call(null, seq__20342_22034__$1);
            var G__22036 = cljs.core.chunk_rest.call(null, seq__20342_22034__$1);
            var G__22037 = c__17462__auto___22035;
            var G__22038 = cljs.core.count.call(null, c__17462__auto___22035);
            var G__22039 = 0;
            seq__20342_22024 = G__22036;
            chunk__20343_22025 = G__22037;
            count__20344_22026 = G__22038;
            i__20345_22027 = G__22039;
            continue;
          } else {
            var arg__18890__auto___22040 = cljs.core.first.call(null, seq__20342_22034__$1);
            a__18889__auto__.push(arg__18890__auto___22040);
            var G__22041 = cljs.core.next.call(null, seq__20342_22034__$1);
            var G__22042 = null;
            var G__22043 = 0;
            var G__22044 = 0;
            seq__20342_22024 = G__22041;
            chunk__20343_22025 = G__22042;
            count__20344_22026 = G__22043;
            i__20345_22027 = G__22044;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.kbd.apply(null, a__18889__auto__);
  };
  var kbd = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return kbd__delegate.call(this, args__18888__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 0;
  kbd.cljs$lang$applyTo = function(arglist__22045) {
    var args__18888__auto__ = cljs.core.seq(arglist__22045);
    return kbd__delegate(args__18888__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
quiescent.dom.keygen = function() {
  var keygen__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20350_22046 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20351_22047 = null;
    var count__20352_22048 = 0;
    var i__20353_22049 = 0;
    while (true) {
      if (i__20353_22049 < count__20352_22048) {
        var arg__18890__auto___22050 = cljs.core._nth.call(null, chunk__20351_22047, i__20353_22049);
        a__18889__auto__.push(arg__18890__auto___22050);
        var G__22051 = seq__20350_22046;
        var G__22052 = chunk__20351_22047;
        var G__22053 = count__20352_22048;
        var G__22054 = i__20353_22049 + 1;
        seq__20350_22046 = G__22051;
        chunk__20351_22047 = G__22052;
        count__20352_22048 = G__22053;
        i__20353_22049 = G__22054;
        continue;
      } else {
        var temp__4092__auto___22055 = cljs.core.seq.call(null, seq__20350_22046);
        if (temp__4092__auto___22055) {
          var seq__20350_22056__$1 = temp__4092__auto___22055;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20350_22056__$1)) {
            var c__17462__auto___22057 = cljs.core.chunk_first.call(null, seq__20350_22056__$1);
            var G__22058 = cljs.core.chunk_rest.call(null, seq__20350_22056__$1);
            var G__22059 = c__17462__auto___22057;
            var G__22060 = cljs.core.count.call(null, c__17462__auto___22057);
            var G__22061 = 0;
            seq__20350_22046 = G__22058;
            chunk__20351_22047 = G__22059;
            count__20352_22048 = G__22060;
            i__20353_22049 = G__22061;
            continue;
          } else {
            var arg__18890__auto___22062 = cljs.core.first.call(null, seq__20350_22056__$1);
            a__18889__auto__.push(arg__18890__auto___22062);
            var G__22063 = cljs.core.next.call(null, seq__20350_22056__$1);
            var G__22064 = null;
            var G__22065 = 0;
            var G__22066 = 0;
            seq__20350_22046 = G__22063;
            chunk__20351_22047 = G__22064;
            count__20352_22048 = G__22065;
            i__20353_22049 = G__22066;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.keygen.apply(null, a__18889__auto__);
  };
  var keygen = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return keygen__delegate.call(this, args__18888__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 0;
  keygen.cljs$lang$applyTo = function(arglist__22067) {
    var args__18888__auto__ = cljs.core.seq(arglist__22067);
    return keygen__delegate(args__18888__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
quiescent.dom.label = function() {
  var label__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20358_22068 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20359_22069 = null;
    var count__20360_22070 = 0;
    var i__20361_22071 = 0;
    while (true) {
      if (i__20361_22071 < count__20360_22070) {
        var arg__18890__auto___22072 = cljs.core._nth.call(null, chunk__20359_22069, i__20361_22071);
        a__18889__auto__.push(arg__18890__auto___22072);
        var G__22073 = seq__20358_22068;
        var G__22074 = chunk__20359_22069;
        var G__22075 = count__20360_22070;
        var G__22076 = i__20361_22071 + 1;
        seq__20358_22068 = G__22073;
        chunk__20359_22069 = G__22074;
        count__20360_22070 = G__22075;
        i__20361_22071 = G__22076;
        continue;
      } else {
        var temp__4092__auto___22077 = cljs.core.seq.call(null, seq__20358_22068);
        if (temp__4092__auto___22077) {
          var seq__20358_22078__$1 = temp__4092__auto___22077;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20358_22078__$1)) {
            var c__17462__auto___22079 = cljs.core.chunk_first.call(null, seq__20358_22078__$1);
            var G__22080 = cljs.core.chunk_rest.call(null, seq__20358_22078__$1);
            var G__22081 = c__17462__auto___22079;
            var G__22082 = cljs.core.count.call(null, c__17462__auto___22079);
            var G__22083 = 0;
            seq__20358_22068 = G__22080;
            chunk__20359_22069 = G__22081;
            count__20360_22070 = G__22082;
            i__20361_22071 = G__22083;
            continue;
          } else {
            var arg__18890__auto___22084 = cljs.core.first.call(null, seq__20358_22078__$1);
            a__18889__auto__.push(arg__18890__auto___22084);
            var G__22085 = cljs.core.next.call(null, seq__20358_22078__$1);
            var G__22086 = null;
            var G__22087 = 0;
            var G__22088 = 0;
            seq__20358_22068 = G__22085;
            chunk__20359_22069 = G__22086;
            count__20360_22070 = G__22087;
            i__20361_22071 = G__22088;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.label.apply(null, a__18889__auto__);
  };
  var label = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return label__delegate.call(this, args__18888__auto__);
  };
  label.cljs$lang$maxFixedArity = 0;
  label.cljs$lang$applyTo = function(arglist__22089) {
    var args__18888__auto__ = cljs.core.seq(arglist__22089);
    return label__delegate(args__18888__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
quiescent.dom.legend = function() {
  var legend__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20366_22090 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20367_22091 = null;
    var count__20368_22092 = 0;
    var i__20369_22093 = 0;
    while (true) {
      if (i__20369_22093 < count__20368_22092) {
        var arg__18890__auto___22094 = cljs.core._nth.call(null, chunk__20367_22091, i__20369_22093);
        a__18889__auto__.push(arg__18890__auto___22094);
        var G__22095 = seq__20366_22090;
        var G__22096 = chunk__20367_22091;
        var G__22097 = count__20368_22092;
        var G__22098 = i__20369_22093 + 1;
        seq__20366_22090 = G__22095;
        chunk__20367_22091 = G__22096;
        count__20368_22092 = G__22097;
        i__20369_22093 = G__22098;
        continue;
      } else {
        var temp__4092__auto___22099 = cljs.core.seq.call(null, seq__20366_22090);
        if (temp__4092__auto___22099) {
          var seq__20366_22100__$1 = temp__4092__auto___22099;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20366_22100__$1)) {
            var c__17462__auto___22101 = cljs.core.chunk_first.call(null, seq__20366_22100__$1);
            var G__22102 = cljs.core.chunk_rest.call(null, seq__20366_22100__$1);
            var G__22103 = c__17462__auto___22101;
            var G__22104 = cljs.core.count.call(null, c__17462__auto___22101);
            var G__22105 = 0;
            seq__20366_22090 = G__22102;
            chunk__20367_22091 = G__22103;
            count__20368_22092 = G__22104;
            i__20369_22093 = G__22105;
            continue;
          } else {
            var arg__18890__auto___22106 = cljs.core.first.call(null, seq__20366_22100__$1);
            a__18889__auto__.push(arg__18890__auto___22106);
            var G__22107 = cljs.core.next.call(null, seq__20366_22100__$1);
            var G__22108 = null;
            var G__22109 = 0;
            var G__22110 = 0;
            seq__20366_22090 = G__22107;
            chunk__20367_22091 = G__22108;
            count__20368_22092 = G__22109;
            i__20369_22093 = G__22110;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.legend.apply(null, a__18889__auto__);
  };
  var legend = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return legend__delegate.call(this, args__18888__auto__);
  };
  legend.cljs$lang$maxFixedArity = 0;
  legend.cljs$lang$applyTo = function(arglist__22111) {
    var args__18888__auto__ = cljs.core.seq(arglist__22111);
    return legend__delegate(args__18888__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
quiescent.dom.li = function() {
  var li__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20374_22112 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20375_22113 = null;
    var count__20376_22114 = 0;
    var i__20377_22115 = 0;
    while (true) {
      if (i__20377_22115 < count__20376_22114) {
        var arg__18890__auto___22116 = cljs.core._nth.call(null, chunk__20375_22113, i__20377_22115);
        a__18889__auto__.push(arg__18890__auto___22116);
        var G__22117 = seq__20374_22112;
        var G__22118 = chunk__20375_22113;
        var G__22119 = count__20376_22114;
        var G__22120 = i__20377_22115 + 1;
        seq__20374_22112 = G__22117;
        chunk__20375_22113 = G__22118;
        count__20376_22114 = G__22119;
        i__20377_22115 = G__22120;
        continue;
      } else {
        var temp__4092__auto___22121 = cljs.core.seq.call(null, seq__20374_22112);
        if (temp__4092__auto___22121) {
          var seq__20374_22122__$1 = temp__4092__auto___22121;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20374_22122__$1)) {
            var c__17462__auto___22123 = cljs.core.chunk_first.call(null, seq__20374_22122__$1);
            var G__22124 = cljs.core.chunk_rest.call(null, seq__20374_22122__$1);
            var G__22125 = c__17462__auto___22123;
            var G__22126 = cljs.core.count.call(null, c__17462__auto___22123);
            var G__22127 = 0;
            seq__20374_22112 = G__22124;
            chunk__20375_22113 = G__22125;
            count__20376_22114 = G__22126;
            i__20377_22115 = G__22127;
            continue;
          } else {
            var arg__18890__auto___22128 = cljs.core.first.call(null, seq__20374_22122__$1);
            a__18889__auto__.push(arg__18890__auto___22128);
            var G__22129 = cljs.core.next.call(null, seq__20374_22122__$1);
            var G__22130 = null;
            var G__22131 = 0;
            var G__22132 = 0;
            seq__20374_22112 = G__22129;
            chunk__20375_22113 = G__22130;
            count__20376_22114 = G__22131;
            i__20377_22115 = G__22132;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.li.apply(null, a__18889__auto__);
  };
  var li = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return li__delegate.call(this, args__18888__auto__);
  };
  li.cljs$lang$maxFixedArity = 0;
  li.cljs$lang$applyTo = function(arglist__22133) {
    var args__18888__auto__ = cljs.core.seq(arglist__22133);
    return li__delegate(args__18888__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
quiescent.dom.link = function() {
  var link__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20382_22134 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20383_22135 = null;
    var count__20384_22136 = 0;
    var i__20385_22137 = 0;
    while (true) {
      if (i__20385_22137 < count__20384_22136) {
        var arg__18890__auto___22138 = cljs.core._nth.call(null, chunk__20383_22135, i__20385_22137);
        a__18889__auto__.push(arg__18890__auto___22138);
        var G__22139 = seq__20382_22134;
        var G__22140 = chunk__20383_22135;
        var G__22141 = count__20384_22136;
        var G__22142 = i__20385_22137 + 1;
        seq__20382_22134 = G__22139;
        chunk__20383_22135 = G__22140;
        count__20384_22136 = G__22141;
        i__20385_22137 = G__22142;
        continue;
      } else {
        var temp__4092__auto___22143 = cljs.core.seq.call(null, seq__20382_22134);
        if (temp__4092__auto___22143) {
          var seq__20382_22144__$1 = temp__4092__auto___22143;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20382_22144__$1)) {
            var c__17462__auto___22145 = cljs.core.chunk_first.call(null, seq__20382_22144__$1);
            var G__22146 = cljs.core.chunk_rest.call(null, seq__20382_22144__$1);
            var G__22147 = c__17462__auto___22145;
            var G__22148 = cljs.core.count.call(null, c__17462__auto___22145);
            var G__22149 = 0;
            seq__20382_22134 = G__22146;
            chunk__20383_22135 = G__22147;
            count__20384_22136 = G__22148;
            i__20385_22137 = G__22149;
            continue;
          } else {
            var arg__18890__auto___22150 = cljs.core.first.call(null, seq__20382_22144__$1);
            a__18889__auto__.push(arg__18890__auto___22150);
            var G__22151 = cljs.core.next.call(null, seq__20382_22144__$1);
            var G__22152 = null;
            var G__22153 = 0;
            var G__22154 = 0;
            seq__20382_22134 = G__22151;
            chunk__20383_22135 = G__22152;
            count__20384_22136 = G__22153;
            i__20385_22137 = G__22154;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.link.apply(null, a__18889__auto__);
  };
  var link = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return link__delegate.call(this, args__18888__auto__);
  };
  link.cljs$lang$maxFixedArity = 0;
  link.cljs$lang$applyTo = function(arglist__22155) {
    var args__18888__auto__ = cljs.core.seq(arglist__22155);
    return link__delegate(args__18888__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
quiescent.dom.main = function() {
  var main__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20390_22156 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20391_22157 = null;
    var count__20392_22158 = 0;
    var i__20393_22159 = 0;
    while (true) {
      if (i__20393_22159 < count__20392_22158) {
        var arg__18890__auto___22160 = cljs.core._nth.call(null, chunk__20391_22157, i__20393_22159);
        a__18889__auto__.push(arg__18890__auto___22160);
        var G__22161 = seq__20390_22156;
        var G__22162 = chunk__20391_22157;
        var G__22163 = count__20392_22158;
        var G__22164 = i__20393_22159 + 1;
        seq__20390_22156 = G__22161;
        chunk__20391_22157 = G__22162;
        count__20392_22158 = G__22163;
        i__20393_22159 = G__22164;
        continue;
      } else {
        var temp__4092__auto___22165 = cljs.core.seq.call(null, seq__20390_22156);
        if (temp__4092__auto___22165) {
          var seq__20390_22166__$1 = temp__4092__auto___22165;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20390_22166__$1)) {
            var c__17462__auto___22167 = cljs.core.chunk_first.call(null, seq__20390_22166__$1);
            var G__22168 = cljs.core.chunk_rest.call(null, seq__20390_22166__$1);
            var G__22169 = c__17462__auto___22167;
            var G__22170 = cljs.core.count.call(null, c__17462__auto___22167);
            var G__22171 = 0;
            seq__20390_22156 = G__22168;
            chunk__20391_22157 = G__22169;
            count__20392_22158 = G__22170;
            i__20393_22159 = G__22171;
            continue;
          } else {
            var arg__18890__auto___22172 = cljs.core.first.call(null, seq__20390_22166__$1);
            a__18889__auto__.push(arg__18890__auto___22172);
            var G__22173 = cljs.core.next.call(null, seq__20390_22166__$1);
            var G__22174 = null;
            var G__22175 = 0;
            var G__22176 = 0;
            seq__20390_22156 = G__22173;
            chunk__20391_22157 = G__22174;
            count__20392_22158 = G__22175;
            i__20393_22159 = G__22176;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.main.apply(null, a__18889__auto__);
  };
  var main = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return main__delegate.call(this, args__18888__auto__);
  };
  main.cljs$lang$maxFixedArity = 0;
  main.cljs$lang$applyTo = function(arglist__22177) {
    var args__18888__auto__ = cljs.core.seq(arglist__22177);
    return main__delegate(args__18888__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
quiescent.dom.map = function() {
  var map__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20398_22178 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20399_22179 = null;
    var count__20400_22180 = 0;
    var i__20401_22181 = 0;
    while (true) {
      if (i__20401_22181 < count__20400_22180) {
        var arg__18890__auto___22182 = cljs.core._nth.call(null, chunk__20399_22179, i__20401_22181);
        a__18889__auto__.push(arg__18890__auto___22182);
        var G__22183 = seq__20398_22178;
        var G__22184 = chunk__20399_22179;
        var G__22185 = count__20400_22180;
        var G__22186 = i__20401_22181 + 1;
        seq__20398_22178 = G__22183;
        chunk__20399_22179 = G__22184;
        count__20400_22180 = G__22185;
        i__20401_22181 = G__22186;
        continue;
      } else {
        var temp__4092__auto___22187 = cljs.core.seq.call(null, seq__20398_22178);
        if (temp__4092__auto___22187) {
          var seq__20398_22188__$1 = temp__4092__auto___22187;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20398_22188__$1)) {
            var c__17462__auto___22189 = cljs.core.chunk_first.call(null, seq__20398_22188__$1);
            var G__22190 = cljs.core.chunk_rest.call(null, seq__20398_22188__$1);
            var G__22191 = c__17462__auto___22189;
            var G__22192 = cljs.core.count.call(null, c__17462__auto___22189);
            var G__22193 = 0;
            seq__20398_22178 = G__22190;
            chunk__20399_22179 = G__22191;
            count__20400_22180 = G__22192;
            i__20401_22181 = G__22193;
            continue;
          } else {
            var arg__18890__auto___22194 = cljs.core.first.call(null, seq__20398_22188__$1);
            a__18889__auto__.push(arg__18890__auto___22194);
            var G__22195 = cljs.core.next.call(null, seq__20398_22188__$1);
            var G__22196 = null;
            var G__22197 = 0;
            var G__22198 = 0;
            seq__20398_22178 = G__22195;
            chunk__20399_22179 = G__22196;
            count__20400_22180 = G__22197;
            i__20401_22181 = G__22198;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.map.apply(null, a__18889__auto__);
  };
  var map = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return map__delegate.call(this, args__18888__auto__);
  };
  map.cljs$lang$maxFixedArity = 0;
  map.cljs$lang$applyTo = function(arglist__22199) {
    var args__18888__auto__ = cljs.core.seq(arglist__22199);
    return map__delegate(args__18888__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
quiescent.dom.mark = function() {
  var mark__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20406_22200 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20407_22201 = null;
    var count__20408_22202 = 0;
    var i__20409_22203 = 0;
    while (true) {
      if (i__20409_22203 < count__20408_22202) {
        var arg__18890__auto___22204 = cljs.core._nth.call(null, chunk__20407_22201, i__20409_22203);
        a__18889__auto__.push(arg__18890__auto___22204);
        var G__22205 = seq__20406_22200;
        var G__22206 = chunk__20407_22201;
        var G__22207 = count__20408_22202;
        var G__22208 = i__20409_22203 + 1;
        seq__20406_22200 = G__22205;
        chunk__20407_22201 = G__22206;
        count__20408_22202 = G__22207;
        i__20409_22203 = G__22208;
        continue;
      } else {
        var temp__4092__auto___22209 = cljs.core.seq.call(null, seq__20406_22200);
        if (temp__4092__auto___22209) {
          var seq__20406_22210__$1 = temp__4092__auto___22209;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20406_22210__$1)) {
            var c__17462__auto___22211 = cljs.core.chunk_first.call(null, seq__20406_22210__$1);
            var G__22212 = cljs.core.chunk_rest.call(null, seq__20406_22210__$1);
            var G__22213 = c__17462__auto___22211;
            var G__22214 = cljs.core.count.call(null, c__17462__auto___22211);
            var G__22215 = 0;
            seq__20406_22200 = G__22212;
            chunk__20407_22201 = G__22213;
            count__20408_22202 = G__22214;
            i__20409_22203 = G__22215;
            continue;
          } else {
            var arg__18890__auto___22216 = cljs.core.first.call(null, seq__20406_22210__$1);
            a__18889__auto__.push(arg__18890__auto___22216);
            var G__22217 = cljs.core.next.call(null, seq__20406_22210__$1);
            var G__22218 = null;
            var G__22219 = 0;
            var G__22220 = 0;
            seq__20406_22200 = G__22217;
            chunk__20407_22201 = G__22218;
            count__20408_22202 = G__22219;
            i__20409_22203 = G__22220;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.mark.apply(null, a__18889__auto__);
  };
  var mark = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return mark__delegate.call(this, args__18888__auto__);
  };
  mark.cljs$lang$maxFixedArity = 0;
  mark.cljs$lang$applyTo = function(arglist__22221) {
    var args__18888__auto__ = cljs.core.seq(arglist__22221);
    return mark__delegate(args__18888__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
quiescent.dom.menu = function() {
  var menu__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20414_22222 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20415_22223 = null;
    var count__20416_22224 = 0;
    var i__20417_22225 = 0;
    while (true) {
      if (i__20417_22225 < count__20416_22224) {
        var arg__18890__auto___22226 = cljs.core._nth.call(null, chunk__20415_22223, i__20417_22225);
        a__18889__auto__.push(arg__18890__auto___22226);
        var G__22227 = seq__20414_22222;
        var G__22228 = chunk__20415_22223;
        var G__22229 = count__20416_22224;
        var G__22230 = i__20417_22225 + 1;
        seq__20414_22222 = G__22227;
        chunk__20415_22223 = G__22228;
        count__20416_22224 = G__22229;
        i__20417_22225 = G__22230;
        continue;
      } else {
        var temp__4092__auto___22231 = cljs.core.seq.call(null, seq__20414_22222);
        if (temp__4092__auto___22231) {
          var seq__20414_22232__$1 = temp__4092__auto___22231;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20414_22232__$1)) {
            var c__17462__auto___22233 = cljs.core.chunk_first.call(null, seq__20414_22232__$1);
            var G__22234 = cljs.core.chunk_rest.call(null, seq__20414_22232__$1);
            var G__22235 = c__17462__auto___22233;
            var G__22236 = cljs.core.count.call(null, c__17462__auto___22233);
            var G__22237 = 0;
            seq__20414_22222 = G__22234;
            chunk__20415_22223 = G__22235;
            count__20416_22224 = G__22236;
            i__20417_22225 = G__22237;
            continue;
          } else {
            var arg__18890__auto___22238 = cljs.core.first.call(null, seq__20414_22232__$1);
            a__18889__auto__.push(arg__18890__auto___22238);
            var G__22239 = cljs.core.next.call(null, seq__20414_22232__$1);
            var G__22240 = null;
            var G__22241 = 0;
            var G__22242 = 0;
            seq__20414_22222 = G__22239;
            chunk__20415_22223 = G__22240;
            count__20416_22224 = G__22241;
            i__20417_22225 = G__22242;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menu.apply(null, a__18889__auto__);
  };
  var menu = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return menu__delegate.call(this, args__18888__auto__);
  };
  menu.cljs$lang$maxFixedArity = 0;
  menu.cljs$lang$applyTo = function(arglist__22243) {
    var args__18888__auto__ = cljs.core.seq(arglist__22243);
    return menu__delegate(args__18888__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
quiescent.dom.menuitem = function() {
  var menuitem__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20422_22244 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20423_22245 = null;
    var count__20424_22246 = 0;
    var i__20425_22247 = 0;
    while (true) {
      if (i__20425_22247 < count__20424_22246) {
        var arg__18890__auto___22248 = cljs.core._nth.call(null, chunk__20423_22245, i__20425_22247);
        a__18889__auto__.push(arg__18890__auto___22248);
        var G__22249 = seq__20422_22244;
        var G__22250 = chunk__20423_22245;
        var G__22251 = count__20424_22246;
        var G__22252 = i__20425_22247 + 1;
        seq__20422_22244 = G__22249;
        chunk__20423_22245 = G__22250;
        count__20424_22246 = G__22251;
        i__20425_22247 = G__22252;
        continue;
      } else {
        var temp__4092__auto___22253 = cljs.core.seq.call(null, seq__20422_22244);
        if (temp__4092__auto___22253) {
          var seq__20422_22254__$1 = temp__4092__auto___22253;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20422_22254__$1)) {
            var c__17462__auto___22255 = cljs.core.chunk_first.call(null, seq__20422_22254__$1);
            var G__22256 = cljs.core.chunk_rest.call(null, seq__20422_22254__$1);
            var G__22257 = c__17462__auto___22255;
            var G__22258 = cljs.core.count.call(null, c__17462__auto___22255);
            var G__22259 = 0;
            seq__20422_22244 = G__22256;
            chunk__20423_22245 = G__22257;
            count__20424_22246 = G__22258;
            i__20425_22247 = G__22259;
            continue;
          } else {
            var arg__18890__auto___22260 = cljs.core.first.call(null, seq__20422_22254__$1);
            a__18889__auto__.push(arg__18890__auto___22260);
            var G__22261 = cljs.core.next.call(null, seq__20422_22254__$1);
            var G__22262 = null;
            var G__22263 = 0;
            var G__22264 = 0;
            seq__20422_22244 = G__22261;
            chunk__20423_22245 = G__22262;
            count__20424_22246 = G__22263;
            i__20425_22247 = G__22264;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menuitem.apply(null, a__18889__auto__);
  };
  var menuitem = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return menuitem__delegate.call(this, args__18888__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 0;
  menuitem.cljs$lang$applyTo = function(arglist__22265) {
    var args__18888__auto__ = cljs.core.seq(arglist__22265);
    return menuitem__delegate(args__18888__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
quiescent.dom.meta = function() {
  var meta__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20430_22266 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20431_22267 = null;
    var count__20432_22268 = 0;
    var i__20433_22269 = 0;
    while (true) {
      if (i__20433_22269 < count__20432_22268) {
        var arg__18890__auto___22270 = cljs.core._nth.call(null, chunk__20431_22267, i__20433_22269);
        a__18889__auto__.push(arg__18890__auto___22270);
        var G__22271 = seq__20430_22266;
        var G__22272 = chunk__20431_22267;
        var G__22273 = count__20432_22268;
        var G__22274 = i__20433_22269 + 1;
        seq__20430_22266 = G__22271;
        chunk__20431_22267 = G__22272;
        count__20432_22268 = G__22273;
        i__20433_22269 = G__22274;
        continue;
      } else {
        var temp__4092__auto___22275 = cljs.core.seq.call(null, seq__20430_22266);
        if (temp__4092__auto___22275) {
          var seq__20430_22276__$1 = temp__4092__auto___22275;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20430_22276__$1)) {
            var c__17462__auto___22277 = cljs.core.chunk_first.call(null, seq__20430_22276__$1);
            var G__22278 = cljs.core.chunk_rest.call(null, seq__20430_22276__$1);
            var G__22279 = c__17462__auto___22277;
            var G__22280 = cljs.core.count.call(null, c__17462__auto___22277);
            var G__22281 = 0;
            seq__20430_22266 = G__22278;
            chunk__20431_22267 = G__22279;
            count__20432_22268 = G__22280;
            i__20433_22269 = G__22281;
            continue;
          } else {
            var arg__18890__auto___22282 = cljs.core.first.call(null, seq__20430_22276__$1);
            a__18889__auto__.push(arg__18890__auto___22282);
            var G__22283 = cljs.core.next.call(null, seq__20430_22276__$1);
            var G__22284 = null;
            var G__22285 = 0;
            var G__22286 = 0;
            seq__20430_22266 = G__22283;
            chunk__20431_22267 = G__22284;
            count__20432_22268 = G__22285;
            i__20433_22269 = G__22286;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meta.apply(null, a__18889__auto__);
  };
  var meta = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return meta__delegate.call(this, args__18888__auto__);
  };
  meta.cljs$lang$maxFixedArity = 0;
  meta.cljs$lang$applyTo = function(arglist__22287) {
    var args__18888__auto__ = cljs.core.seq(arglist__22287);
    return meta__delegate(args__18888__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
quiescent.dom.meter = function() {
  var meter__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20438_22288 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20439_22289 = null;
    var count__20440_22290 = 0;
    var i__20441_22291 = 0;
    while (true) {
      if (i__20441_22291 < count__20440_22290) {
        var arg__18890__auto___22292 = cljs.core._nth.call(null, chunk__20439_22289, i__20441_22291);
        a__18889__auto__.push(arg__18890__auto___22292);
        var G__22293 = seq__20438_22288;
        var G__22294 = chunk__20439_22289;
        var G__22295 = count__20440_22290;
        var G__22296 = i__20441_22291 + 1;
        seq__20438_22288 = G__22293;
        chunk__20439_22289 = G__22294;
        count__20440_22290 = G__22295;
        i__20441_22291 = G__22296;
        continue;
      } else {
        var temp__4092__auto___22297 = cljs.core.seq.call(null, seq__20438_22288);
        if (temp__4092__auto___22297) {
          var seq__20438_22298__$1 = temp__4092__auto___22297;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20438_22298__$1)) {
            var c__17462__auto___22299 = cljs.core.chunk_first.call(null, seq__20438_22298__$1);
            var G__22300 = cljs.core.chunk_rest.call(null, seq__20438_22298__$1);
            var G__22301 = c__17462__auto___22299;
            var G__22302 = cljs.core.count.call(null, c__17462__auto___22299);
            var G__22303 = 0;
            seq__20438_22288 = G__22300;
            chunk__20439_22289 = G__22301;
            count__20440_22290 = G__22302;
            i__20441_22291 = G__22303;
            continue;
          } else {
            var arg__18890__auto___22304 = cljs.core.first.call(null, seq__20438_22298__$1);
            a__18889__auto__.push(arg__18890__auto___22304);
            var G__22305 = cljs.core.next.call(null, seq__20438_22298__$1);
            var G__22306 = null;
            var G__22307 = 0;
            var G__22308 = 0;
            seq__20438_22288 = G__22305;
            chunk__20439_22289 = G__22306;
            count__20440_22290 = G__22307;
            i__20441_22291 = G__22308;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meter.apply(null, a__18889__auto__);
  };
  var meter = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return meter__delegate.call(this, args__18888__auto__);
  };
  meter.cljs$lang$maxFixedArity = 0;
  meter.cljs$lang$applyTo = function(arglist__22309) {
    var args__18888__auto__ = cljs.core.seq(arglist__22309);
    return meter__delegate(args__18888__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
quiescent.dom.nav = function() {
  var nav__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20446_22310 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20447_22311 = null;
    var count__20448_22312 = 0;
    var i__20449_22313 = 0;
    while (true) {
      if (i__20449_22313 < count__20448_22312) {
        var arg__18890__auto___22314 = cljs.core._nth.call(null, chunk__20447_22311, i__20449_22313);
        a__18889__auto__.push(arg__18890__auto___22314);
        var G__22315 = seq__20446_22310;
        var G__22316 = chunk__20447_22311;
        var G__22317 = count__20448_22312;
        var G__22318 = i__20449_22313 + 1;
        seq__20446_22310 = G__22315;
        chunk__20447_22311 = G__22316;
        count__20448_22312 = G__22317;
        i__20449_22313 = G__22318;
        continue;
      } else {
        var temp__4092__auto___22319 = cljs.core.seq.call(null, seq__20446_22310);
        if (temp__4092__auto___22319) {
          var seq__20446_22320__$1 = temp__4092__auto___22319;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20446_22320__$1)) {
            var c__17462__auto___22321 = cljs.core.chunk_first.call(null, seq__20446_22320__$1);
            var G__22322 = cljs.core.chunk_rest.call(null, seq__20446_22320__$1);
            var G__22323 = c__17462__auto___22321;
            var G__22324 = cljs.core.count.call(null, c__17462__auto___22321);
            var G__22325 = 0;
            seq__20446_22310 = G__22322;
            chunk__20447_22311 = G__22323;
            count__20448_22312 = G__22324;
            i__20449_22313 = G__22325;
            continue;
          } else {
            var arg__18890__auto___22326 = cljs.core.first.call(null, seq__20446_22320__$1);
            a__18889__auto__.push(arg__18890__auto___22326);
            var G__22327 = cljs.core.next.call(null, seq__20446_22320__$1);
            var G__22328 = null;
            var G__22329 = 0;
            var G__22330 = 0;
            seq__20446_22310 = G__22327;
            chunk__20447_22311 = G__22328;
            count__20448_22312 = G__22329;
            i__20449_22313 = G__22330;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.nav.apply(null, a__18889__auto__);
  };
  var nav = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return nav__delegate.call(this, args__18888__auto__);
  };
  nav.cljs$lang$maxFixedArity = 0;
  nav.cljs$lang$applyTo = function(arglist__22331) {
    var args__18888__auto__ = cljs.core.seq(arglist__22331);
    return nav__delegate(args__18888__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
quiescent.dom.noscript = function() {
  var noscript__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20454_22332 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20455_22333 = null;
    var count__20456_22334 = 0;
    var i__20457_22335 = 0;
    while (true) {
      if (i__20457_22335 < count__20456_22334) {
        var arg__18890__auto___22336 = cljs.core._nth.call(null, chunk__20455_22333, i__20457_22335);
        a__18889__auto__.push(arg__18890__auto___22336);
        var G__22337 = seq__20454_22332;
        var G__22338 = chunk__20455_22333;
        var G__22339 = count__20456_22334;
        var G__22340 = i__20457_22335 + 1;
        seq__20454_22332 = G__22337;
        chunk__20455_22333 = G__22338;
        count__20456_22334 = G__22339;
        i__20457_22335 = G__22340;
        continue;
      } else {
        var temp__4092__auto___22341 = cljs.core.seq.call(null, seq__20454_22332);
        if (temp__4092__auto___22341) {
          var seq__20454_22342__$1 = temp__4092__auto___22341;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20454_22342__$1)) {
            var c__17462__auto___22343 = cljs.core.chunk_first.call(null, seq__20454_22342__$1);
            var G__22344 = cljs.core.chunk_rest.call(null, seq__20454_22342__$1);
            var G__22345 = c__17462__auto___22343;
            var G__22346 = cljs.core.count.call(null, c__17462__auto___22343);
            var G__22347 = 0;
            seq__20454_22332 = G__22344;
            chunk__20455_22333 = G__22345;
            count__20456_22334 = G__22346;
            i__20457_22335 = G__22347;
            continue;
          } else {
            var arg__18890__auto___22348 = cljs.core.first.call(null, seq__20454_22342__$1);
            a__18889__auto__.push(arg__18890__auto___22348);
            var G__22349 = cljs.core.next.call(null, seq__20454_22342__$1);
            var G__22350 = null;
            var G__22351 = 0;
            var G__22352 = 0;
            seq__20454_22332 = G__22349;
            chunk__20455_22333 = G__22350;
            count__20456_22334 = G__22351;
            i__20457_22335 = G__22352;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.noscript.apply(null, a__18889__auto__);
  };
  var noscript = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return noscript__delegate.call(this, args__18888__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 0;
  noscript.cljs$lang$applyTo = function(arglist__22353) {
    var args__18888__auto__ = cljs.core.seq(arglist__22353);
    return noscript__delegate(args__18888__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
quiescent.dom.object = function() {
  var object__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20462_22354 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20463_22355 = null;
    var count__20464_22356 = 0;
    var i__20465_22357 = 0;
    while (true) {
      if (i__20465_22357 < count__20464_22356) {
        var arg__18890__auto___22358 = cljs.core._nth.call(null, chunk__20463_22355, i__20465_22357);
        a__18889__auto__.push(arg__18890__auto___22358);
        var G__22359 = seq__20462_22354;
        var G__22360 = chunk__20463_22355;
        var G__22361 = count__20464_22356;
        var G__22362 = i__20465_22357 + 1;
        seq__20462_22354 = G__22359;
        chunk__20463_22355 = G__22360;
        count__20464_22356 = G__22361;
        i__20465_22357 = G__22362;
        continue;
      } else {
        var temp__4092__auto___22363 = cljs.core.seq.call(null, seq__20462_22354);
        if (temp__4092__auto___22363) {
          var seq__20462_22364__$1 = temp__4092__auto___22363;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20462_22364__$1)) {
            var c__17462__auto___22365 = cljs.core.chunk_first.call(null, seq__20462_22364__$1);
            var G__22366 = cljs.core.chunk_rest.call(null, seq__20462_22364__$1);
            var G__22367 = c__17462__auto___22365;
            var G__22368 = cljs.core.count.call(null, c__17462__auto___22365);
            var G__22369 = 0;
            seq__20462_22354 = G__22366;
            chunk__20463_22355 = G__22367;
            count__20464_22356 = G__22368;
            i__20465_22357 = G__22369;
            continue;
          } else {
            var arg__18890__auto___22370 = cljs.core.first.call(null, seq__20462_22364__$1);
            a__18889__auto__.push(arg__18890__auto___22370);
            var G__22371 = cljs.core.next.call(null, seq__20462_22364__$1);
            var G__22372 = null;
            var G__22373 = 0;
            var G__22374 = 0;
            seq__20462_22354 = G__22371;
            chunk__20463_22355 = G__22372;
            count__20464_22356 = G__22373;
            i__20465_22357 = G__22374;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.object.apply(null, a__18889__auto__);
  };
  var object = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return object__delegate.call(this, args__18888__auto__);
  };
  object.cljs$lang$maxFixedArity = 0;
  object.cljs$lang$applyTo = function(arglist__22375) {
    var args__18888__auto__ = cljs.core.seq(arglist__22375);
    return object__delegate(args__18888__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
quiescent.dom.ol = function() {
  var ol__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20470_22376 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20471_22377 = null;
    var count__20472_22378 = 0;
    var i__20473_22379 = 0;
    while (true) {
      if (i__20473_22379 < count__20472_22378) {
        var arg__18890__auto___22380 = cljs.core._nth.call(null, chunk__20471_22377, i__20473_22379);
        a__18889__auto__.push(arg__18890__auto___22380);
        var G__22381 = seq__20470_22376;
        var G__22382 = chunk__20471_22377;
        var G__22383 = count__20472_22378;
        var G__22384 = i__20473_22379 + 1;
        seq__20470_22376 = G__22381;
        chunk__20471_22377 = G__22382;
        count__20472_22378 = G__22383;
        i__20473_22379 = G__22384;
        continue;
      } else {
        var temp__4092__auto___22385 = cljs.core.seq.call(null, seq__20470_22376);
        if (temp__4092__auto___22385) {
          var seq__20470_22386__$1 = temp__4092__auto___22385;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20470_22386__$1)) {
            var c__17462__auto___22387 = cljs.core.chunk_first.call(null, seq__20470_22386__$1);
            var G__22388 = cljs.core.chunk_rest.call(null, seq__20470_22386__$1);
            var G__22389 = c__17462__auto___22387;
            var G__22390 = cljs.core.count.call(null, c__17462__auto___22387);
            var G__22391 = 0;
            seq__20470_22376 = G__22388;
            chunk__20471_22377 = G__22389;
            count__20472_22378 = G__22390;
            i__20473_22379 = G__22391;
            continue;
          } else {
            var arg__18890__auto___22392 = cljs.core.first.call(null, seq__20470_22386__$1);
            a__18889__auto__.push(arg__18890__auto___22392);
            var G__22393 = cljs.core.next.call(null, seq__20470_22386__$1);
            var G__22394 = null;
            var G__22395 = 0;
            var G__22396 = 0;
            seq__20470_22376 = G__22393;
            chunk__20471_22377 = G__22394;
            count__20472_22378 = G__22395;
            i__20473_22379 = G__22396;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ol.apply(null, a__18889__auto__);
  };
  var ol = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ol__delegate.call(this, args__18888__auto__);
  };
  ol.cljs$lang$maxFixedArity = 0;
  ol.cljs$lang$applyTo = function(arglist__22397) {
    var args__18888__auto__ = cljs.core.seq(arglist__22397);
    return ol__delegate(args__18888__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
quiescent.dom.optgroup = function() {
  var optgroup__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20478_22398 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20479_22399 = null;
    var count__20480_22400 = 0;
    var i__20481_22401 = 0;
    while (true) {
      if (i__20481_22401 < count__20480_22400) {
        var arg__18890__auto___22402 = cljs.core._nth.call(null, chunk__20479_22399, i__20481_22401);
        a__18889__auto__.push(arg__18890__auto___22402);
        var G__22403 = seq__20478_22398;
        var G__22404 = chunk__20479_22399;
        var G__22405 = count__20480_22400;
        var G__22406 = i__20481_22401 + 1;
        seq__20478_22398 = G__22403;
        chunk__20479_22399 = G__22404;
        count__20480_22400 = G__22405;
        i__20481_22401 = G__22406;
        continue;
      } else {
        var temp__4092__auto___22407 = cljs.core.seq.call(null, seq__20478_22398);
        if (temp__4092__auto___22407) {
          var seq__20478_22408__$1 = temp__4092__auto___22407;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20478_22408__$1)) {
            var c__17462__auto___22409 = cljs.core.chunk_first.call(null, seq__20478_22408__$1);
            var G__22410 = cljs.core.chunk_rest.call(null, seq__20478_22408__$1);
            var G__22411 = c__17462__auto___22409;
            var G__22412 = cljs.core.count.call(null, c__17462__auto___22409);
            var G__22413 = 0;
            seq__20478_22398 = G__22410;
            chunk__20479_22399 = G__22411;
            count__20480_22400 = G__22412;
            i__20481_22401 = G__22413;
            continue;
          } else {
            var arg__18890__auto___22414 = cljs.core.first.call(null, seq__20478_22408__$1);
            a__18889__auto__.push(arg__18890__auto___22414);
            var G__22415 = cljs.core.next.call(null, seq__20478_22408__$1);
            var G__22416 = null;
            var G__22417 = 0;
            var G__22418 = 0;
            seq__20478_22398 = G__22415;
            chunk__20479_22399 = G__22416;
            count__20480_22400 = G__22417;
            i__20481_22401 = G__22418;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.optgroup.apply(null, a__18889__auto__);
  };
  var optgroup = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return optgroup__delegate.call(this, args__18888__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 0;
  optgroup.cljs$lang$applyTo = function(arglist__22419) {
    var args__18888__auto__ = cljs.core.seq(arglist__22419);
    return optgroup__delegate(args__18888__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
quiescent.dom.option = function() {
  var option__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20486_22420 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20487_22421 = null;
    var count__20488_22422 = 0;
    var i__20489_22423 = 0;
    while (true) {
      if (i__20489_22423 < count__20488_22422) {
        var arg__18890__auto___22424 = cljs.core._nth.call(null, chunk__20487_22421, i__20489_22423);
        a__18889__auto__.push(arg__18890__auto___22424);
        var G__22425 = seq__20486_22420;
        var G__22426 = chunk__20487_22421;
        var G__22427 = count__20488_22422;
        var G__22428 = i__20489_22423 + 1;
        seq__20486_22420 = G__22425;
        chunk__20487_22421 = G__22426;
        count__20488_22422 = G__22427;
        i__20489_22423 = G__22428;
        continue;
      } else {
        var temp__4092__auto___22429 = cljs.core.seq.call(null, seq__20486_22420);
        if (temp__4092__auto___22429) {
          var seq__20486_22430__$1 = temp__4092__auto___22429;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20486_22430__$1)) {
            var c__17462__auto___22431 = cljs.core.chunk_first.call(null, seq__20486_22430__$1);
            var G__22432 = cljs.core.chunk_rest.call(null, seq__20486_22430__$1);
            var G__22433 = c__17462__auto___22431;
            var G__22434 = cljs.core.count.call(null, c__17462__auto___22431);
            var G__22435 = 0;
            seq__20486_22420 = G__22432;
            chunk__20487_22421 = G__22433;
            count__20488_22422 = G__22434;
            i__20489_22423 = G__22435;
            continue;
          } else {
            var arg__18890__auto___22436 = cljs.core.first.call(null, seq__20486_22430__$1);
            a__18889__auto__.push(arg__18890__auto___22436);
            var G__22437 = cljs.core.next.call(null, seq__20486_22430__$1);
            var G__22438 = null;
            var G__22439 = 0;
            var G__22440 = 0;
            seq__20486_22420 = G__22437;
            chunk__20487_22421 = G__22438;
            count__20488_22422 = G__22439;
            i__20489_22423 = G__22440;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.option.apply(null, a__18889__auto__);
  };
  var option = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return option__delegate.call(this, args__18888__auto__);
  };
  option.cljs$lang$maxFixedArity = 0;
  option.cljs$lang$applyTo = function(arglist__22441) {
    var args__18888__auto__ = cljs.core.seq(arglist__22441);
    return option__delegate(args__18888__auto__);
  };
  option.cljs$core$IFn$_invoke$arity$variadic = option__delegate;
  return option;
}();
quiescent.dom.output = function() {
  var output__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20494_22442 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20495_22443 = null;
    var count__20496_22444 = 0;
    var i__20497_22445 = 0;
    while (true) {
      if (i__20497_22445 < count__20496_22444) {
        var arg__18890__auto___22446 = cljs.core._nth.call(null, chunk__20495_22443, i__20497_22445);
        a__18889__auto__.push(arg__18890__auto___22446);
        var G__22447 = seq__20494_22442;
        var G__22448 = chunk__20495_22443;
        var G__22449 = count__20496_22444;
        var G__22450 = i__20497_22445 + 1;
        seq__20494_22442 = G__22447;
        chunk__20495_22443 = G__22448;
        count__20496_22444 = G__22449;
        i__20497_22445 = G__22450;
        continue;
      } else {
        var temp__4092__auto___22451 = cljs.core.seq.call(null, seq__20494_22442);
        if (temp__4092__auto___22451) {
          var seq__20494_22452__$1 = temp__4092__auto___22451;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20494_22452__$1)) {
            var c__17462__auto___22453 = cljs.core.chunk_first.call(null, seq__20494_22452__$1);
            var G__22454 = cljs.core.chunk_rest.call(null, seq__20494_22452__$1);
            var G__22455 = c__17462__auto___22453;
            var G__22456 = cljs.core.count.call(null, c__17462__auto___22453);
            var G__22457 = 0;
            seq__20494_22442 = G__22454;
            chunk__20495_22443 = G__22455;
            count__20496_22444 = G__22456;
            i__20497_22445 = G__22457;
            continue;
          } else {
            var arg__18890__auto___22458 = cljs.core.first.call(null, seq__20494_22452__$1);
            a__18889__auto__.push(arg__18890__auto___22458);
            var G__22459 = cljs.core.next.call(null, seq__20494_22452__$1);
            var G__22460 = null;
            var G__22461 = 0;
            var G__22462 = 0;
            seq__20494_22442 = G__22459;
            chunk__20495_22443 = G__22460;
            count__20496_22444 = G__22461;
            i__20497_22445 = G__22462;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.output.apply(null, a__18889__auto__);
  };
  var output = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return output__delegate.call(this, args__18888__auto__);
  };
  output.cljs$lang$maxFixedArity = 0;
  output.cljs$lang$applyTo = function(arglist__22463) {
    var args__18888__auto__ = cljs.core.seq(arglist__22463);
    return output__delegate(args__18888__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
quiescent.dom.p = function() {
  var p__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20502_22464 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20503_22465 = null;
    var count__20504_22466 = 0;
    var i__20505_22467 = 0;
    while (true) {
      if (i__20505_22467 < count__20504_22466) {
        var arg__18890__auto___22468 = cljs.core._nth.call(null, chunk__20503_22465, i__20505_22467);
        a__18889__auto__.push(arg__18890__auto___22468);
        var G__22469 = seq__20502_22464;
        var G__22470 = chunk__20503_22465;
        var G__22471 = count__20504_22466;
        var G__22472 = i__20505_22467 + 1;
        seq__20502_22464 = G__22469;
        chunk__20503_22465 = G__22470;
        count__20504_22466 = G__22471;
        i__20505_22467 = G__22472;
        continue;
      } else {
        var temp__4092__auto___22473 = cljs.core.seq.call(null, seq__20502_22464);
        if (temp__4092__auto___22473) {
          var seq__20502_22474__$1 = temp__4092__auto___22473;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20502_22474__$1)) {
            var c__17462__auto___22475 = cljs.core.chunk_first.call(null, seq__20502_22474__$1);
            var G__22476 = cljs.core.chunk_rest.call(null, seq__20502_22474__$1);
            var G__22477 = c__17462__auto___22475;
            var G__22478 = cljs.core.count.call(null, c__17462__auto___22475);
            var G__22479 = 0;
            seq__20502_22464 = G__22476;
            chunk__20503_22465 = G__22477;
            count__20504_22466 = G__22478;
            i__20505_22467 = G__22479;
            continue;
          } else {
            var arg__18890__auto___22480 = cljs.core.first.call(null, seq__20502_22474__$1);
            a__18889__auto__.push(arg__18890__auto___22480);
            var G__22481 = cljs.core.next.call(null, seq__20502_22474__$1);
            var G__22482 = null;
            var G__22483 = 0;
            var G__22484 = 0;
            seq__20502_22464 = G__22481;
            chunk__20503_22465 = G__22482;
            count__20504_22466 = G__22483;
            i__20505_22467 = G__22484;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.p.apply(null, a__18889__auto__);
  };
  var p = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return p__delegate.call(this, args__18888__auto__);
  };
  p.cljs$lang$maxFixedArity = 0;
  p.cljs$lang$applyTo = function(arglist__22485) {
    var args__18888__auto__ = cljs.core.seq(arglist__22485);
    return p__delegate(args__18888__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
quiescent.dom.param = function() {
  var param__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20510_22486 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20511_22487 = null;
    var count__20512_22488 = 0;
    var i__20513_22489 = 0;
    while (true) {
      if (i__20513_22489 < count__20512_22488) {
        var arg__18890__auto___22490 = cljs.core._nth.call(null, chunk__20511_22487, i__20513_22489);
        a__18889__auto__.push(arg__18890__auto___22490);
        var G__22491 = seq__20510_22486;
        var G__22492 = chunk__20511_22487;
        var G__22493 = count__20512_22488;
        var G__22494 = i__20513_22489 + 1;
        seq__20510_22486 = G__22491;
        chunk__20511_22487 = G__22492;
        count__20512_22488 = G__22493;
        i__20513_22489 = G__22494;
        continue;
      } else {
        var temp__4092__auto___22495 = cljs.core.seq.call(null, seq__20510_22486);
        if (temp__4092__auto___22495) {
          var seq__20510_22496__$1 = temp__4092__auto___22495;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20510_22496__$1)) {
            var c__17462__auto___22497 = cljs.core.chunk_first.call(null, seq__20510_22496__$1);
            var G__22498 = cljs.core.chunk_rest.call(null, seq__20510_22496__$1);
            var G__22499 = c__17462__auto___22497;
            var G__22500 = cljs.core.count.call(null, c__17462__auto___22497);
            var G__22501 = 0;
            seq__20510_22486 = G__22498;
            chunk__20511_22487 = G__22499;
            count__20512_22488 = G__22500;
            i__20513_22489 = G__22501;
            continue;
          } else {
            var arg__18890__auto___22502 = cljs.core.first.call(null, seq__20510_22496__$1);
            a__18889__auto__.push(arg__18890__auto___22502);
            var G__22503 = cljs.core.next.call(null, seq__20510_22496__$1);
            var G__22504 = null;
            var G__22505 = 0;
            var G__22506 = 0;
            seq__20510_22486 = G__22503;
            chunk__20511_22487 = G__22504;
            count__20512_22488 = G__22505;
            i__20513_22489 = G__22506;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.param.apply(null, a__18889__auto__);
  };
  var param = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return param__delegate.call(this, args__18888__auto__);
  };
  param.cljs$lang$maxFixedArity = 0;
  param.cljs$lang$applyTo = function(arglist__22507) {
    var args__18888__auto__ = cljs.core.seq(arglist__22507);
    return param__delegate(args__18888__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
quiescent.dom.pre = function() {
  var pre__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20518_22508 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20519_22509 = null;
    var count__20520_22510 = 0;
    var i__20521_22511 = 0;
    while (true) {
      if (i__20521_22511 < count__20520_22510) {
        var arg__18890__auto___22512 = cljs.core._nth.call(null, chunk__20519_22509, i__20521_22511);
        a__18889__auto__.push(arg__18890__auto___22512);
        var G__22513 = seq__20518_22508;
        var G__22514 = chunk__20519_22509;
        var G__22515 = count__20520_22510;
        var G__22516 = i__20521_22511 + 1;
        seq__20518_22508 = G__22513;
        chunk__20519_22509 = G__22514;
        count__20520_22510 = G__22515;
        i__20521_22511 = G__22516;
        continue;
      } else {
        var temp__4092__auto___22517 = cljs.core.seq.call(null, seq__20518_22508);
        if (temp__4092__auto___22517) {
          var seq__20518_22518__$1 = temp__4092__auto___22517;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20518_22518__$1)) {
            var c__17462__auto___22519 = cljs.core.chunk_first.call(null, seq__20518_22518__$1);
            var G__22520 = cljs.core.chunk_rest.call(null, seq__20518_22518__$1);
            var G__22521 = c__17462__auto___22519;
            var G__22522 = cljs.core.count.call(null, c__17462__auto___22519);
            var G__22523 = 0;
            seq__20518_22508 = G__22520;
            chunk__20519_22509 = G__22521;
            count__20520_22510 = G__22522;
            i__20521_22511 = G__22523;
            continue;
          } else {
            var arg__18890__auto___22524 = cljs.core.first.call(null, seq__20518_22518__$1);
            a__18889__auto__.push(arg__18890__auto___22524);
            var G__22525 = cljs.core.next.call(null, seq__20518_22518__$1);
            var G__22526 = null;
            var G__22527 = 0;
            var G__22528 = 0;
            seq__20518_22508 = G__22525;
            chunk__20519_22509 = G__22526;
            count__20520_22510 = G__22527;
            i__20521_22511 = G__22528;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.pre.apply(null, a__18889__auto__);
  };
  var pre = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pre__delegate.call(this, args__18888__auto__);
  };
  pre.cljs$lang$maxFixedArity = 0;
  pre.cljs$lang$applyTo = function(arglist__22529) {
    var args__18888__auto__ = cljs.core.seq(arglist__22529);
    return pre__delegate(args__18888__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
quiescent.dom.progress = function() {
  var progress__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20526_22530 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20527_22531 = null;
    var count__20528_22532 = 0;
    var i__20529_22533 = 0;
    while (true) {
      if (i__20529_22533 < count__20528_22532) {
        var arg__18890__auto___22534 = cljs.core._nth.call(null, chunk__20527_22531, i__20529_22533);
        a__18889__auto__.push(arg__18890__auto___22534);
        var G__22535 = seq__20526_22530;
        var G__22536 = chunk__20527_22531;
        var G__22537 = count__20528_22532;
        var G__22538 = i__20529_22533 + 1;
        seq__20526_22530 = G__22535;
        chunk__20527_22531 = G__22536;
        count__20528_22532 = G__22537;
        i__20529_22533 = G__22538;
        continue;
      } else {
        var temp__4092__auto___22539 = cljs.core.seq.call(null, seq__20526_22530);
        if (temp__4092__auto___22539) {
          var seq__20526_22540__$1 = temp__4092__auto___22539;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20526_22540__$1)) {
            var c__17462__auto___22541 = cljs.core.chunk_first.call(null, seq__20526_22540__$1);
            var G__22542 = cljs.core.chunk_rest.call(null, seq__20526_22540__$1);
            var G__22543 = c__17462__auto___22541;
            var G__22544 = cljs.core.count.call(null, c__17462__auto___22541);
            var G__22545 = 0;
            seq__20526_22530 = G__22542;
            chunk__20527_22531 = G__22543;
            count__20528_22532 = G__22544;
            i__20529_22533 = G__22545;
            continue;
          } else {
            var arg__18890__auto___22546 = cljs.core.first.call(null, seq__20526_22540__$1);
            a__18889__auto__.push(arg__18890__auto___22546);
            var G__22547 = cljs.core.next.call(null, seq__20526_22540__$1);
            var G__22548 = null;
            var G__22549 = 0;
            var G__22550 = 0;
            seq__20526_22530 = G__22547;
            chunk__20527_22531 = G__22548;
            count__20528_22532 = G__22549;
            i__20529_22533 = G__22550;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.progress.apply(null, a__18889__auto__);
  };
  var progress = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return progress__delegate.call(this, args__18888__auto__);
  };
  progress.cljs$lang$maxFixedArity = 0;
  progress.cljs$lang$applyTo = function(arglist__22551) {
    var args__18888__auto__ = cljs.core.seq(arglist__22551);
    return progress__delegate(args__18888__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
quiescent.dom.q = function() {
  var q__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20534_22552 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20535_22553 = null;
    var count__20536_22554 = 0;
    var i__20537_22555 = 0;
    while (true) {
      if (i__20537_22555 < count__20536_22554) {
        var arg__18890__auto___22556 = cljs.core._nth.call(null, chunk__20535_22553, i__20537_22555);
        a__18889__auto__.push(arg__18890__auto___22556);
        var G__22557 = seq__20534_22552;
        var G__22558 = chunk__20535_22553;
        var G__22559 = count__20536_22554;
        var G__22560 = i__20537_22555 + 1;
        seq__20534_22552 = G__22557;
        chunk__20535_22553 = G__22558;
        count__20536_22554 = G__22559;
        i__20537_22555 = G__22560;
        continue;
      } else {
        var temp__4092__auto___22561 = cljs.core.seq.call(null, seq__20534_22552);
        if (temp__4092__auto___22561) {
          var seq__20534_22562__$1 = temp__4092__auto___22561;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20534_22562__$1)) {
            var c__17462__auto___22563 = cljs.core.chunk_first.call(null, seq__20534_22562__$1);
            var G__22564 = cljs.core.chunk_rest.call(null, seq__20534_22562__$1);
            var G__22565 = c__17462__auto___22563;
            var G__22566 = cljs.core.count.call(null, c__17462__auto___22563);
            var G__22567 = 0;
            seq__20534_22552 = G__22564;
            chunk__20535_22553 = G__22565;
            count__20536_22554 = G__22566;
            i__20537_22555 = G__22567;
            continue;
          } else {
            var arg__18890__auto___22568 = cljs.core.first.call(null, seq__20534_22562__$1);
            a__18889__auto__.push(arg__18890__auto___22568);
            var G__22569 = cljs.core.next.call(null, seq__20534_22562__$1);
            var G__22570 = null;
            var G__22571 = 0;
            var G__22572 = 0;
            seq__20534_22552 = G__22569;
            chunk__20535_22553 = G__22570;
            count__20536_22554 = G__22571;
            i__20537_22555 = G__22572;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.q.apply(null, a__18889__auto__);
  };
  var q = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return q__delegate.call(this, args__18888__auto__);
  };
  q.cljs$lang$maxFixedArity = 0;
  q.cljs$lang$applyTo = function(arglist__22573) {
    var args__18888__auto__ = cljs.core.seq(arglist__22573);
    return q__delegate(args__18888__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
quiescent.dom.rp = function() {
  var rp__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20542_22574 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20543_22575 = null;
    var count__20544_22576 = 0;
    var i__20545_22577 = 0;
    while (true) {
      if (i__20545_22577 < count__20544_22576) {
        var arg__18890__auto___22578 = cljs.core._nth.call(null, chunk__20543_22575, i__20545_22577);
        a__18889__auto__.push(arg__18890__auto___22578);
        var G__22579 = seq__20542_22574;
        var G__22580 = chunk__20543_22575;
        var G__22581 = count__20544_22576;
        var G__22582 = i__20545_22577 + 1;
        seq__20542_22574 = G__22579;
        chunk__20543_22575 = G__22580;
        count__20544_22576 = G__22581;
        i__20545_22577 = G__22582;
        continue;
      } else {
        var temp__4092__auto___22583 = cljs.core.seq.call(null, seq__20542_22574);
        if (temp__4092__auto___22583) {
          var seq__20542_22584__$1 = temp__4092__auto___22583;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20542_22584__$1)) {
            var c__17462__auto___22585 = cljs.core.chunk_first.call(null, seq__20542_22584__$1);
            var G__22586 = cljs.core.chunk_rest.call(null, seq__20542_22584__$1);
            var G__22587 = c__17462__auto___22585;
            var G__22588 = cljs.core.count.call(null, c__17462__auto___22585);
            var G__22589 = 0;
            seq__20542_22574 = G__22586;
            chunk__20543_22575 = G__22587;
            count__20544_22576 = G__22588;
            i__20545_22577 = G__22589;
            continue;
          } else {
            var arg__18890__auto___22590 = cljs.core.first.call(null, seq__20542_22584__$1);
            a__18889__auto__.push(arg__18890__auto___22590);
            var G__22591 = cljs.core.next.call(null, seq__20542_22584__$1);
            var G__22592 = null;
            var G__22593 = 0;
            var G__22594 = 0;
            seq__20542_22574 = G__22591;
            chunk__20543_22575 = G__22592;
            count__20544_22576 = G__22593;
            i__20545_22577 = G__22594;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rp.apply(null, a__18889__auto__);
  };
  var rp = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rp__delegate.call(this, args__18888__auto__);
  };
  rp.cljs$lang$maxFixedArity = 0;
  rp.cljs$lang$applyTo = function(arglist__22595) {
    var args__18888__auto__ = cljs.core.seq(arglist__22595);
    return rp__delegate(args__18888__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
quiescent.dom.rt = function() {
  var rt__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20550_22596 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20551_22597 = null;
    var count__20552_22598 = 0;
    var i__20553_22599 = 0;
    while (true) {
      if (i__20553_22599 < count__20552_22598) {
        var arg__18890__auto___22600 = cljs.core._nth.call(null, chunk__20551_22597, i__20553_22599);
        a__18889__auto__.push(arg__18890__auto___22600);
        var G__22601 = seq__20550_22596;
        var G__22602 = chunk__20551_22597;
        var G__22603 = count__20552_22598;
        var G__22604 = i__20553_22599 + 1;
        seq__20550_22596 = G__22601;
        chunk__20551_22597 = G__22602;
        count__20552_22598 = G__22603;
        i__20553_22599 = G__22604;
        continue;
      } else {
        var temp__4092__auto___22605 = cljs.core.seq.call(null, seq__20550_22596);
        if (temp__4092__auto___22605) {
          var seq__20550_22606__$1 = temp__4092__auto___22605;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20550_22606__$1)) {
            var c__17462__auto___22607 = cljs.core.chunk_first.call(null, seq__20550_22606__$1);
            var G__22608 = cljs.core.chunk_rest.call(null, seq__20550_22606__$1);
            var G__22609 = c__17462__auto___22607;
            var G__22610 = cljs.core.count.call(null, c__17462__auto___22607);
            var G__22611 = 0;
            seq__20550_22596 = G__22608;
            chunk__20551_22597 = G__22609;
            count__20552_22598 = G__22610;
            i__20553_22599 = G__22611;
            continue;
          } else {
            var arg__18890__auto___22612 = cljs.core.first.call(null, seq__20550_22606__$1);
            a__18889__auto__.push(arg__18890__auto___22612);
            var G__22613 = cljs.core.next.call(null, seq__20550_22606__$1);
            var G__22614 = null;
            var G__22615 = 0;
            var G__22616 = 0;
            seq__20550_22596 = G__22613;
            chunk__20551_22597 = G__22614;
            count__20552_22598 = G__22615;
            i__20553_22599 = G__22616;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rt.apply(null, a__18889__auto__);
  };
  var rt = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rt__delegate.call(this, args__18888__auto__);
  };
  rt.cljs$lang$maxFixedArity = 0;
  rt.cljs$lang$applyTo = function(arglist__22617) {
    var args__18888__auto__ = cljs.core.seq(arglist__22617);
    return rt__delegate(args__18888__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
quiescent.dom.ruby = function() {
  var ruby__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20558_22618 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20559_22619 = null;
    var count__20560_22620 = 0;
    var i__20561_22621 = 0;
    while (true) {
      if (i__20561_22621 < count__20560_22620) {
        var arg__18890__auto___22622 = cljs.core._nth.call(null, chunk__20559_22619, i__20561_22621);
        a__18889__auto__.push(arg__18890__auto___22622);
        var G__22623 = seq__20558_22618;
        var G__22624 = chunk__20559_22619;
        var G__22625 = count__20560_22620;
        var G__22626 = i__20561_22621 + 1;
        seq__20558_22618 = G__22623;
        chunk__20559_22619 = G__22624;
        count__20560_22620 = G__22625;
        i__20561_22621 = G__22626;
        continue;
      } else {
        var temp__4092__auto___22627 = cljs.core.seq.call(null, seq__20558_22618);
        if (temp__4092__auto___22627) {
          var seq__20558_22628__$1 = temp__4092__auto___22627;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20558_22628__$1)) {
            var c__17462__auto___22629 = cljs.core.chunk_first.call(null, seq__20558_22628__$1);
            var G__22630 = cljs.core.chunk_rest.call(null, seq__20558_22628__$1);
            var G__22631 = c__17462__auto___22629;
            var G__22632 = cljs.core.count.call(null, c__17462__auto___22629);
            var G__22633 = 0;
            seq__20558_22618 = G__22630;
            chunk__20559_22619 = G__22631;
            count__20560_22620 = G__22632;
            i__20561_22621 = G__22633;
            continue;
          } else {
            var arg__18890__auto___22634 = cljs.core.first.call(null, seq__20558_22628__$1);
            a__18889__auto__.push(arg__18890__auto___22634);
            var G__22635 = cljs.core.next.call(null, seq__20558_22628__$1);
            var G__22636 = null;
            var G__22637 = 0;
            var G__22638 = 0;
            seq__20558_22618 = G__22635;
            chunk__20559_22619 = G__22636;
            count__20560_22620 = G__22637;
            i__20561_22621 = G__22638;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ruby.apply(null, a__18889__auto__);
  };
  var ruby = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ruby__delegate.call(this, args__18888__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 0;
  ruby.cljs$lang$applyTo = function(arglist__22639) {
    var args__18888__auto__ = cljs.core.seq(arglist__22639);
    return ruby__delegate(args__18888__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
quiescent.dom.s = function() {
  var s__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20566_22640 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20567_22641 = null;
    var count__20568_22642 = 0;
    var i__20569_22643 = 0;
    while (true) {
      if (i__20569_22643 < count__20568_22642) {
        var arg__18890__auto___22644 = cljs.core._nth.call(null, chunk__20567_22641, i__20569_22643);
        a__18889__auto__.push(arg__18890__auto___22644);
        var G__22645 = seq__20566_22640;
        var G__22646 = chunk__20567_22641;
        var G__22647 = count__20568_22642;
        var G__22648 = i__20569_22643 + 1;
        seq__20566_22640 = G__22645;
        chunk__20567_22641 = G__22646;
        count__20568_22642 = G__22647;
        i__20569_22643 = G__22648;
        continue;
      } else {
        var temp__4092__auto___22649 = cljs.core.seq.call(null, seq__20566_22640);
        if (temp__4092__auto___22649) {
          var seq__20566_22650__$1 = temp__4092__auto___22649;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20566_22650__$1)) {
            var c__17462__auto___22651 = cljs.core.chunk_first.call(null, seq__20566_22650__$1);
            var G__22652 = cljs.core.chunk_rest.call(null, seq__20566_22650__$1);
            var G__22653 = c__17462__auto___22651;
            var G__22654 = cljs.core.count.call(null, c__17462__auto___22651);
            var G__22655 = 0;
            seq__20566_22640 = G__22652;
            chunk__20567_22641 = G__22653;
            count__20568_22642 = G__22654;
            i__20569_22643 = G__22655;
            continue;
          } else {
            var arg__18890__auto___22656 = cljs.core.first.call(null, seq__20566_22650__$1);
            a__18889__auto__.push(arg__18890__auto___22656);
            var G__22657 = cljs.core.next.call(null, seq__20566_22650__$1);
            var G__22658 = null;
            var G__22659 = 0;
            var G__22660 = 0;
            seq__20566_22640 = G__22657;
            chunk__20567_22641 = G__22658;
            count__20568_22642 = G__22659;
            i__20569_22643 = G__22660;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.s.apply(null, a__18889__auto__);
  };
  var s = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return s__delegate.call(this, args__18888__auto__);
  };
  s.cljs$lang$maxFixedArity = 0;
  s.cljs$lang$applyTo = function(arglist__22661) {
    var args__18888__auto__ = cljs.core.seq(arglist__22661);
    return s__delegate(args__18888__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
quiescent.dom.samp = function() {
  var samp__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20574_22662 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20575_22663 = null;
    var count__20576_22664 = 0;
    var i__20577_22665 = 0;
    while (true) {
      if (i__20577_22665 < count__20576_22664) {
        var arg__18890__auto___22666 = cljs.core._nth.call(null, chunk__20575_22663, i__20577_22665);
        a__18889__auto__.push(arg__18890__auto___22666);
        var G__22667 = seq__20574_22662;
        var G__22668 = chunk__20575_22663;
        var G__22669 = count__20576_22664;
        var G__22670 = i__20577_22665 + 1;
        seq__20574_22662 = G__22667;
        chunk__20575_22663 = G__22668;
        count__20576_22664 = G__22669;
        i__20577_22665 = G__22670;
        continue;
      } else {
        var temp__4092__auto___22671 = cljs.core.seq.call(null, seq__20574_22662);
        if (temp__4092__auto___22671) {
          var seq__20574_22672__$1 = temp__4092__auto___22671;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20574_22672__$1)) {
            var c__17462__auto___22673 = cljs.core.chunk_first.call(null, seq__20574_22672__$1);
            var G__22674 = cljs.core.chunk_rest.call(null, seq__20574_22672__$1);
            var G__22675 = c__17462__auto___22673;
            var G__22676 = cljs.core.count.call(null, c__17462__auto___22673);
            var G__22677 = 0;
            seq__20574_22662 = G__22674;
            chunk__20575_22663 = G__22675;
            count__20576_22664 = G__22676;
            i__20577_22665 = G__22677;
            continue;
          } else {
            var arg__18890__auto___22678 = cljs.core.first.call(null, seq__20574_22672__$1);
            a__18889__auto__.push(arg__18890__auto___22678);
            var G__22679 = cljs.core.next.call(null, seq__20574_22672__$1);
            var G__22680 = null;
            var G__22681 = 0;
            var G__22682 = 0;
            seq__20574_22662 = G__22679;
            chunk__20575_22663 = G__22680;
            count__20576_22664 = G__22681;
            i__20577_22665 = G__22682;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.samp.apply(null, a__18889__auto__);
  };
  var samp = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return samp__delegate.call(this, args__18888__auto__);
  };
  samp.cljs$lang$maxFixedArity = 0;
  samp.cljs$lang$applyTo = function(arglist__22683) {
    var args__18888__auto__ = cljs.core.seq(arglist__22683);
    return samp__delegate(args__18888__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
quiescent.dom.script = function() {
  var script__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20582_22684 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20583_22685 = null;
    var count__20584_22686 = 0;
    var i__20585_22687 = 0;
    while (true) {
      if (i__20585_22687 < count__20584_22686) {
        var arg__18890__auto___22688 = cljs.core._nth.call(null, chunk__20583_22685, i__20585_22687);
        a__18889__auto__.push(arg__18890__auto___22688);
        var G__22689 = seq__20582_22684;
        var G__22690 = chunk__20583_22685;
        var G__22691 = count__20584_22686;
        var G__22692 = i__20585_22687 + 1;
        seq__20582_22684 = G__22689;
        chunk__20583_22685 = G__22690;
        count__20584_22686 = G__22691;
        i__20585_22687 = G__22692;
        continue;
      } else {
        var temp__4092__auto___22693 = cljs.core.seq.call(null, seq__20582_22684);
        if (temp__4092__auto___22693) {
          var seq__20582_22694__$1 = temp__4092__auto___22693;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20582_22694__$1)) {
            var c__17462__auto___22695 = cljs.core.chunk_first.call(null, seq__20582_22694__$1);
            var G__22696 = cljs.core.chunk_rest.call(null, seq__20582_22694__$1);
            var G__22697 = c__17462__auto___22695;
            var G__22698 = cljs.core.count.call(null, c__17462__auto___22695);
            var G__22699 = 0;
            seq__20582_22684 = G__22696;
            chunk__20583_22685 = G__22697;
            count__20584_22686 = G__22698;
            i__20585_22687 = G__22699;
            continue;
          } else {
            var arg__18890__auto___22700 = cljs.core.first.call(null, seq__20582_22694__$1);
            a__18889__auto__.push(arg__18890__auto___22700);
            var G__22701 = cljs.core.next.call(null, seq__20582_22694__$1);
            var G__22702 = null;
            var G__22703 = 0;
            var G__22704 = 0;
            seq__20582_22684 = G__22701;
            chunk__20583_22685 = G__22702;
            count__20584_22686 = G__22703;
            i__20585_22687 = G__22704;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.script.apply(null, a__18889__auto__);
  };
  var script = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return script__delegate.call(this, args__18888__auto__);
  };
  script.cljs$lang$maxFixedArity = 0;
  script.cljs$lang$applyTo = function(arglist__22705) {
    var args__18888__auto__ = cljs.core.seq(arglist__22705);
    return script__delegate(args__18888__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
quiescent.dom.section = function() {
  var section__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20590_22706 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20591_22707 = null;
    var count__20592_22708 = 0;
    var i__20593_22709 = 0;
    while (true) {
      if (i__20593_22709 < count__20592_22708) {
        var arg__18890__auto___22710 = cljs.core._nth.call(null, chunk__20591_22707, i__20593_22709);
        a__18889__auto__.push(arg__18890__auto___22710);
        var G__22711 = seq__20590_22706;
        var G__22712 = chunk__20591_22707;
        var G__22713 = count__20592_22708;
        var G__22714 = i__20593_22709 + 1;
        seq__20590_22706 = G__22711;
        chunk__20591_22707 = G__22712;
        count__20592_22708 = G__22713;
        i__20593_22709 = G__22714;
        continue;
      } else {
        var temp__4092__auto___22715 = cljs.core.seq.call(null, seq__20590_22706);
        if (temp__4092__auto___22715) {
          var seq__20590_22716__$1 = temp__4092__auto___22715;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20590_22716__$1)) {
            var c__17462__auto___22717 = cljs.core.chunk_first.call(null, seq__20590_22716__$1);
            var G__22718 = cljs.core.chunk_rest.call(null, seq__20590_22716__$1);
            var G__22719 = c__17462__auto___22717;
            var G__22720 = cljs.core.count.call(null, c__17462__auto___22717);
            var G__22721 = 0;
            seq__20590_22706 = G__22718;
            chunk__20591_22707 = G__22719;
            count__20592_22708 = G__22720;
            i__20593_22709 = G__22721;
            continue;
          } else {
            var arg__18890__auto___22722 = cljs.core.first.call(null, seq__20590_22716__$1);
            a__18889__auto__.push(arg__18890__auto___22722);
            var G__22723 = cljs.core.next.call(null, seq__20590_22716__$1);
            var G__22724 = null;
            var G__22725 = 0;
            var G__22726 = 0;
            seq__20590_22706 = G__22723;
            chunk__20591_22707 = G__22724;
            count__20592_22708 = G__22725;
            i__20593_22709 = G__22726;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.section.apply(null, a__18889__auto__);
  };
  var section = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return section__delegate.call(this, args__18888__auto__);
  };
  section.cljs$lang$maxFixedArity = 0;
  section.cljs$lang$applyTo = function(arglist__22727) {
    var args__18888__auto__ = cljs.core.seq(arglist__22727);
    return section__delegate(args__18888__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
quiescent.dom.select = function() {
  var select__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20598_22728 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20599_22729 = null;
    var count__20600_22730 = 0;
    var i__20601_22731 = 0;
    while (true) {
      if (i__20601_22731 < count__20600_22730) {
        var arg__18890__auto___22732 = cljs.core._nth.call(null, chunk__20599_22729, i__20601_22731);
        a__18889__auto__.push(arg__18890__auto___22732);
        var G__22733 = seq__20598_22728;
        var G__22734 = chunk__20599_22729;
        var G__22735 = count__20600_22730;
        var G__22736 = i__20601_22731 + 1;
        seq__20598_22728 = G__22733;
        chunk__20599_22729 = G__22734;
        count__20600_22730 = G__22735;
        i__20601_22731 = G__22736;
        continue;
      } else {
        var temp__4092__auto___22737 = cljs.core.seq.call(null, seq__20598_22728);
        if (temp__4092__auto___22737) {
          var seq__20598_22738__$1 = temp__4092__auto___22737;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20598_22738__$1)) {
            var c__17462__auto___22739 = cljs.core.chunk_first.call(null, seq__20598_22738__$1);
            var G__22740 = cljs.core.chunk_rest.call(null, seq__20598_22738__$1);
            var G__22741 = c__17462__auto___22739;
            var G__22742 = cljs.core.count.call(null, c__17462__auto___22739);
            var G__22743 = 0;
            seq__20598_22728 = G__22740;
            chunk__20599_22729 = G__22741;
            count__20600_22730 = G__22742;
            i__20601_22731 = G__22743;
            continue;
          } else {
            var arg__18890__auto___22744 = cljs.core.first.call(null, seq__20598_22738__$1);
            a__18889__auto__.push(arg__18890__auto___22744);
            var G__22745 = cljs.core.next.call(null, seq__20598_22738__$1);
            var G__22746 = null;
            var G__22747 = 0;
            var G__22748 = 0;
            seq__20598_22728 = G__22745;
            chunk__20599_22729 = G__22746;
            count__20600_22730 = G__22747;
            i__20601_22731 = G__22748;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.select.apply(null, a__18889__auto__);
  };
  var select = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return select__delegate.call(this, args__18888__auto__);
  };
  select.cljs$lang$maxFixedArity = 0;
  select.cljs$lang$applyTo = function(arglist__22749) {
    var args__18888__auto__ = cljs.core.seq(arglist__22749);
    return select__delegate(args__18888__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
quiescent.dom.small = function() {
  var small__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20606_22750 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20607_22751 = null;
    var count__20608_22752 = 0;
    var i__20609_22753 = 0;
    while (true) {
      if (i__20609_22753 < count__20608_22752) {
        var arg__18890__auto___22754 = cljs.core._nth.call(null, chunk__20607_22751, i__20609_22753);
        a__18889__auto__.push(arg__18890__auto___22754);
        var G__22755 = seq__20606_22750;
        var G__22756 = chunk__20607_22751;
        var G__22757 = count__20608_22752;
        var G__22758 = i__20609_22753 + 1;
        seq__20606_22750 = G__22755;
        chunk__20607_22751 = G__22756;
        count__20608_22752 = G__22757;
        i__20609_22753 = G__22758;
        continue;
      } else {
        var temp__4092__auto___22759 = cljs.core.seq.call(null, seq__20606_22750);
        if (temp__4092__auto___22759) {
          var seq__20606_22760__$1 = temp__4092__auto___22759;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20606_22760__$1)) {
            var c__17462__auto___22761 = cljs.core.chunk_first.call(null, seq__20606_22760__$1);
            var G__22762 = cljs.core.chunk_rest.call(null, seq__20606_22760__$1);
            var G__22763 = c__17462__auto___22761;
            var G__22764 = cljs.core.count.call(null, c__17462__auto___22761);
            var G__22765 = 0;
            seq__20606_22750 = G__22762;
            chunk__20607_22751 = G__22763;
            count__20608_22752 = G__22764;
            i__20609_22753 = G__22765;
            continue;
          } else {
            var arg__18890__auto___22766 = cljs.core.first.call(null, seq__20606_22760__$1);
            a__18889__auto__.push(arg__18890__auto___22766);
            var G__22767 = cljs.core.next.call(null, seq__20606_22760__$1);
            var G__22768 = null;
            var G__22769 = 0;
            var G__22770 = 0;
            seq__20606_22750 = G__22767;
            chunk__20607_22751 = G__22768;
            count__20608_22752 = G__22769;
            i__20609_22753 = G__22770;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.small.apply(null, a__18889__auto__);
  };
  var small = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return small__delegate.call(this, args__18888__auto__);
  };
  small.cljs$lang$maxFixedArity = 0;
  small.cljs$lang$applyTo = function(arglist__22771) {
    var args__18888__auto__ = cljs.core.seq(arglist__22771);
    return small__delegate(args__18888__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
quiescent.dom.source = function() {
  var source__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20614_22772 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20615_22773 = null;
    var count__20616_22774 = 0;
    var i__20617_22775 = 0;
    while (true) {
      if (i__20617_22775 < count__20616_22774) {
        var arg__18890__auto___22776 = cljs.core._nth.call(null, chunk__20615_22773, i__20617_22775);
        a__18889__auto__.push(arg__18890__auto___22776);
        var G__22777 = seq__20614_22772;
        var G__22778 = chunk__20615_22773;
        var G__22779 = count__20616_22774;
        var G__22780 = i__20617_22775 + 1;
        seq__20614_22772 = G__22777;
        chunk__20615_22773 = G__22778;
        count__20616_22774 = G__22779;
        i__20617_22775 = G__22780;
        continue;
      } else {
        var temp__4092__auto___22781 = cljs.core.seq.call(null, seq__20614_22772);
        if (temp__4092__auto___22781) {
          var seq__20614_22782__$1 = temp__4092__auto___22781;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20614_22782__$1)) {
            var c__17462__auto___22783 = cljs.core.chunk_first.call(null, seq__20614_22782__$1);
            var G__22784 = cljs.core.chunk_rest.call(null, seq__20614_22782__$1);
            var G__22785 = c__17462__auto___22783;
            var G__22786 = cljs.core.count.call(null, c__17462__auto___22783);
            var G__22787 = 0;
            seq__20614_22772 = G__22784;
            chunk__20615_22773 = G__22785;
            count__20616_22774 = G__22786;
            i__20617_22775 = G__22787;
            continue;
          } else {
            var arg__18890__auto___22788 = cljs.core.first.call(null, seq__20614_22782__$1);
            a__18889__auto__.push(arg__18890__auto___22788);
            var G__22789 = cljs.core.next.call(null, seq__20614_22782__$1);
            var G__22790 = null;
            var G__22791 = 0;
            var G__22792 = 0;
            seq__20614_22772 = G__22789;
            chunk__20615_22773 = G__22790;
            count__20616_22774 = G__22791;
            i__20617_22775 = G__22792;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.source.apply(null, a__18889__auto__);
  };
  var source = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return source__delegate.call(this, args__18888__auto__);
  };
  source.cljs$lang$maxFixedArity = 0;
  source.cljs$lang$applyTo = function(arglist__22793) {
    var args__18888__auto__ = cljs.core.seq(arglist__22793);
    return source__delegate(args__18888__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
quiescent.dom.span = function() {
  var span__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20622_22794 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20623_22795 = null;
    var count__20624_22796 = 0;
    var i__20625_22797 = 0;
    while (true) {
      if (i__20625_22797 < count__20624_22796) {
        var arg__18890__auto___22798 = cljs.core._nth.call(null, chunk__20623_22795, i__20625_22797);
        a__18889__auto__.push(arg__18890__auto___22798);
        var G__22799 = seq__20622_22794;
        var G__22800 = chunk__20623_22795;
        var G__22801 = count__20624_22796;
        var G__22802 = i__20625_22797 + 1;
        seq__20622_22794 = G__22799;
        chunk__20623_22795 = G__22800;
        count__20624_22796 = G__22801;
        i__20625_22797 = G__22802;
        continue;
      } else {
        var temp__4092__auto___22803 = cljs.core.seq.call(null, seq__20622_22794);
        if (temp__4092__auto___22803) {
          var seq__20622_22804__$1 = temp__4092__auto___22803;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20622_22804__$1)) {
            var c__17462__auto___22805 = cljs.core.chunk_first.call(null, seq__20622_22804__$1);
            var G__22806 = cljs.core.chunk_rest.call(null, seq__20622_22804__$1);
            var G__22807 = c__17462__auto___22805;
            var G__22808 = cljs.core.count.call(null, c__17462__auto___22805);
            var G__22809 = 0;
            seq__20622_22794 = G__22806;
            chunk__20623_22795 = G__22807;
            count__20624_22796 = G__22808;
            i__20625_22797 = G__22809;
            continue;
          } else {
            var arg__18890__auto___22810 = cljs.core.first.call(null, seq__20622_22804__$1);
            a__18889__auto__.push(arg__18890__auto___22810);
            var G__22811 = cljs.core.next.call(null, seq__20622_22804__$1);
            var G__22812 = null;
            var G__22813 = 0;
            var G__22814 = 0;
            seq__20622_22794 = G__22811;
            chunk__20623_22795 = G__22812;
            count__20624_22796 = G__22813;
            i__20625_22797 = G__22814;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.span.apply(null, a__18889__auto__);
  };
  var span = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return span__delegate.call(this, args__18888__auto__);
  };
  span.cljs$lang$maxFixedArity = 0;
  span.cljs$lang$applyTo = function(arglist__22815) {
    var args__18888__auto__ = cljs.core.seq(arglist__22815);
    return span__delegate(args__18888__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
quiescent.dom.strong = function() {
  var strong__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20630_22816 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20631_22817 = null;
    var count__20632_22818 = 0;
    var i__20633_22819 = 0;
    while (true) {
      if (i__20633_22819 < count__20632_22818) {
        var arg__18890__auto___22820 = cljs.core._nth.call(null, chunk__20631_22817, i__20633_22819);
        a__18889__auto__.push(arg__18890__auto___22820);
        var G__22821 = seq__20630_22816;
        var G__22822 = chunk__20631_22817;
        var G__22823 = count__20632_22818;
        var G__22824 = i__20633_22819 + 1;
        seq__20630_22816 = G__22821;
        chunk__20631_22817 = G__22822;
        count__20632_22818 = G__22823;
        i__20633_22819 = G__22824;
        continue;
      } else {
        var temp__4092__auto___22825 = cljs.core.seq.call(null, seq__20630_22816);
        if (temp__4092__auto___22825) {
          var seq__20630_22826__$1 = temp__4092__auto___22825;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20630_22826__$1)) {
            var c__17462__auto___22827 = cljs.core.chunk_first.call(null, seq__20630_22826__$1);
            var G__22828 = cljs.core.chunk_rest.call(null, seq__20630_22826__$1);
            var G__22829 = c__17462__auto___22827;
            var G__22830 = cljs.core.count.call(null, c__17462__auto___22827);
            var G__22831 = 0;
            seq__20630_22816 = G__22828;
            chunk__20631_22817 = G__22829;
            count__20632_22818 = G__22830;
            i__20633_22819 = G__22831;
            continue;
          } else {
            var arg__18890__auto___22832 = cljs.core.first.call(null, seq__20630_22826__$1);
            a__18889__auto__.push(arg__18890__auto___22832);
            var G__22833 = cljs.core.next.call(null, seq__20630_22826__$1);
            var G__22834 = null;
            var G__22835 = 0;
            var G__22836 = 0;
            seq__20630_22816 = G__22833;
            chunk__20631_22817 = G__22834;
            count__20632_22818 = G__22835;
            i__20633_22819 = G__22836;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.strong.apply(null, a__18889__auto__);
  };
  var strong = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return strong__delegate.call(this, args__18888__auto__);
  };
  strong.cljs$lang$maxFixedArity = 0;
  strong.cljs$lang$applyTo = function(arglist__22837) {
    var args__18888__auto__ = cljs.core.seq(arglist__22837);
    return strong__delegate(args__18888__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
quiescent.dom.style = function() {
  var style__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20638_22838 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20639_22839 = null;
    var count__20640_22840 = 0;
    var i__20641_22841 = 0;
    while (true) {
      if (i__20641_22841 < count__20640_22840) {
        var arg__18890__auto___22842 = cljs.core._nth.call(null, chunk__20639_22839, i__20641_22841);
        a__18889__auto__.push(arg__18890__auto___22842);
        var G__22843 = seq__20638_22838;
        var G__22844 = chunk__20639_22839;
        var G__22845 = count__20640_22840;
        var G__22846 = i__20641_22841 + 1;
        seq__20638_22838 = G__22843;
        chunk__20639_22839 = G__22844;
        count__20640_22840 = G__22845;
        i__20641_22841 = G__22846;
        continue;
      } else {
        var temp__4092__auto___22847 = cljs.core.seq.call(null, seq__20638_22838);
        if (temp__4092__auto___22847) {
          var seq__20638_22848__$1 = temp__4092__auto___22847;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20638_22848__$1)) {
            var c__17462__auto___22849 = cljs.core.chunk_first.call(null, seq__20638_22848__$1);
            var G__22850 = cljs.core.chunk_rest.call(null, seq__20638_22848__$1);
            var G__22851 = c__17462__auto___22849;
            var G__22852 = cljs.core.count.call(null, c__17462__auto___22849);
            var G__22853 = 0;
            seq__20638_22838 = G__22850;
            chunk__20639_22839 = G__22851;
            count__20640_22840 = G__22852;
            i__20641_22841 = G__22853;
            continue;
          } else {
            var arg__18890__auto___22854 = cljs.core.first.call(null, seq__20638_22848__$1);
            a__18889__auto__.push(arg__18890__auto___22854);
            var G__22855 = cljs.core.next.call(null, seq__20638_22848__$1);
            var G__22856 = null;
            var G__22857 = 0;
            var G__22858 = 0;
            seq__20638_22838 = G__22855;
            chunk__20639_22839 = G__22856;
            count__20640_22840 = G__22857;
            i__20641_22841 = G__22858;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.style.apply(null, a__18889__auto__);
  };
  var style = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return style__delegate.call(this, args__18888__auto__);
  };
  style.cljs$lang$maxFixedArity = 0;
  style.cljs$lang$applyTo = function(arglist__22859) {
    var args__18888__auto__ = cljs.core.seq(arglist__22859);
    return style__delegate(args__18888__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
quiescent.dom.sub = function() {
  var sub__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20646_22860 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20647_22861 = null;
    var count__20648_22862 = 0;
    var i__20649_22863 = 0;
    while (true) {
      if (i__20649_22863 < count__20648_22862) {
        var arg__18890__auto___22864 = cljs.core._nth.call(null, chunk__20647_22861, i__20649_22863);
        a__18889__auto__.push(arg__18890__auto___22864);
        var G__22865 = seq__20646_22860;
        var G__22866 = chunk__20647_22861;
        var G__22867 = count__20648_22862;
        var G__22868 = i__20649_22863 + 1;
        seq__20646_22860 = G__22865;
        chunk__20647_22861 = G__22866;
        count__20648_22862 = G__22867;
        i__20649_22863 = G__22868;
        continue;
      } else {
        var temp__4092__auto___22869 = cljs.core.seq.call(null, seq__20646_22860);
        if (temp__4092__auto___22869) {
          var seq__20646_22870__$1 = temp__4092__auto___22869;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20646_22870__$1)) {
            var c__17462__auto___22871 = cljs.core.chunk_first.call(null, seq__20646_22870__$1);
            var G__22872 = cljs.core.chunk_rest.call(null, seq__20646_22870__$1);
            var G__22873 = c__17462__auto___22871;
            var G__22874 = cljs.core.count.call(null, c__17462__auto___22871);
            var G__22875 = 0;
            seq__20646_22860 = G__22872;
            chunk__20647_22861 = G__22873;
            count__20648_22862 = G__22874;
            i__20649_22863 = G__22875;
            continue;
          } else {
            var arg__18890__auto___22876 = cljs.core.first.call(null, seq__20646_22870__$1);
            a__18889__auto__.push(arg__18890__auto___22876);
            var G__22877 = cljs.core.next.call(null, seq__20646_22870__$1);
            var G__22878 = null;
            var G__22879 = 0;
            var G__22880 = 0;
            seq__20646_22860 = G__22877;
            chunk__20647_22861 = G__22878;
            count__20648_22862 = G__22879;
            i__20649_22863 = G__22880;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sub.apply(null, a__18889__auto__);
  };
  var sub = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sub__delegate.call(this, args__18888__auto__);
  };
  sub.cljs$lang$maxFixedArity = 0;
  sub.cljs$lang$applyTo = function(arglist__22881) {
    var args__18888__auto__ = cljs.core.seq(arglist__22881);
    return sub__delegate(args__18888__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
quiescent.dom.summary = function() {
  var summary__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20654_22882 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20655_22883 = null;
    var count__20656_22884 = 0;
    var i__20657_22885 = 0;
    while (true) {
      if (i__20657_22885 < count__20656_22884) {
        var arg__18890__auto___22886 = cljs.core._nth.call(null, chunk__20655_22883, i__20657_22885);
        a__18889__auto__.push(arg__18890__auto___22886);
        var G__22887 = seq__20654_22882;
        var G__22888 = chunk__20655_22883;
        var G__22889 = count__20656_22884;
        var G__22890 = i__20657_22885 + 1;
        seq__20654_22882 = G__22887;
        chunk__20655_22883 = G__22888;
        count__20656_22884 = G__22889;
        i__20657_22885 = G__22890;
        continue;
      } else {
        var temp__4092__auto___22891 = cljs.core.seq.call(null, seq__20654_22882);
        if (temp__4092__auto___22891) {
          var seq__20654_22892__$1 = temp__4092__auto___22891;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20654_22892__$1)) {
            var c__17462__auto___22893 = cljs.core.chunk_first.call(null, seq__20654_22892__$1);
            var G__22894 = cljs.core.chunk_rest.call(null, seq__20654_22892__$1);
            var G__22895 = c__17462__auto___22893;
            var G__22896 = cljs.core.count.call(null, c__17462__auto___22893);
            var G__22897 = 0;
            seq__20654_22882 = G__22894;
            chunk__20655_22883 = G__22895;
            count__20656_22884 = G__22896;
            i__20657_22885 = G__22897;
            continue;
          } else {
            var arg__18890__auto___22898 = cljs.core.first.call(null, seq__20654_22892__$1);
            a__18889__auto__.push(arg__18890__auto___22898);
            var G__22899 = cljs.core.next.call(null, seq__20654_22892__$1);
            var G__22900 = null;
            var G__22901 = 0;
            var G__22902 = 0;
            seq__20654_22882 = G__22899;
            chunk__20655_22883 = G__22900;
            count__20656_22884 = G__22901;
            i__20657_22885 = G__22902;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.summary.apply(null, a__18889__auto__);
  };
  var summary = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return summary__delegate.call(this, args__18888__auto__);
  };
  summary.cljs$lang$maxFixedArity = 0;
  summary.cljs$lang$applyTo = function(arglist__22903) {
    var args__18888__auto__ = cljs.core.seq(arglist__22903);
    return summary__delegate(args__18888__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
quiescent.dom.sup = function() {
  var sup__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20662_22904 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20663_22905 = null;
    var count__20664_22906 = 0;
    var i__20665_22907 = 0;
    while (true) {
      if (i__20665_22907 < count__20664_22906) {
        var arg__18890__auto___22908 = cljs.core._nth.call(null, chunk__20663_22905, i__20665_22907);
        a__18889__auto__.push(arg__18890__auto___22908);
        var G__22909 = seq__20662_22904;
        var G__22910 = chunk__20663_22905;
        var G__22911 = count__20664_22906;
        var G__22912 = i__20665_22907 + 1;
        seq__20662_22904 = G__22909;
        chunk__20663_22905 = G__22910;
        count__20664_22906 = G__22911;
        i__20665_22907 = G__22912;
        continue;
      } else {
        var temp__4092__auto___22913 = cljs.core.seq.call(null, seq__20662_22904);
        if (temp__4092__auto___22913) {
          var seq__20662_22914__$1 = temp__4092__auto___22913;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20662_22914__$1)) {
            var c__17462__auto___22915 = cljs.core.chunk_first.call(null, seq__20662_22914__$1);
            var G__22916 = cljs.core.chunk_rest.call(null, seq__20662_22914__$1);
            var G__22917 = c__17462__auto___22915;
            var G__22918 = cljs.core.count.call(null, c__17462__auto___22915);
            var G__22919 = 0;
            seq__20662_22904 = G__22916;
            chunk__20663_22905 = G__22917;
            count__20664_22906 = G__22918;
            i__20665_22907 = G__22919;
            continue;
          } else {
            var arg__18890__auto___22920 = cljs.core.first.call(null, seq__20662_22914__$1);
            a__18889__auto__.push(arg__18890__auto___22920);
            var G__22921 = cljs.core.next.call(null, seq__20662_22914__$1);
            var G__22922 = null;
            var G__22923 = 0;
            var G__22924 = 0;
            seq__20662_22904 = G__22921;
            chunk__20663_22905 = G__22922;
            count__20664_22906 = G__22923;
            i__20665_22907 = G__22924;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sup.apply(null, a__18889__auto__);
  };
  var sup = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sup__delegate.call(this, args__18888__auto__);
  };
  sup.cljs$lang$maxFixedArity = 0;
  sup.cljs$lang$applyTo = function(arglist__22925) {
    var args__18888__auto__ = cljs.core.seq(arglist__22925);
    return sup__delegate(args__18888__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
quiescent.dom.table = function() {
  var table__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20670_22926 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20671_22927 = null;
    var count__20672_22928 = 0;
    var i__20673_22929 = 0;
    while (true) {
      if (i__20673_22929 < count__20672_22928) {
        var arg__18890__auto___22930 = cljs.core._nth.call(null, chunk__20671_22927, i__20673_22929);
        a__18889__auto__.push(arg__18890__auto___22930);
        var G__22931 = seq__20670_22926;
        var G__22932 = chunk__20671_22927;
        var G__22933 = count__20672_22928;
        var G__22934 = i__20673_22929 + 1;
        seq__20670_22926 = G__22931;
        chunk__20671_22927 = G__22932;
        count__20672_22928 = G__22933;
        i__20673_22929 = G__22934;
        continue;
      } else {
        var temp__4092__auto___22935 = cljs.core.seq.call(null, seq__20670_22926);
        if (temp__4092__auto___22935) {
          var seq__20670_22936__$1 = temp__4092__auto___22935;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20670_22936__$1)) {
            var c__17462__auto___22937 = cljs.core.chunk_first.call(null, seq__20670_22936__$1);
            var G__22938 = cljs.core.chunk_rest.call(null, seq__20670_22936__$1);
            var G__22939 = c__17462__auto___22937;
            var G__22940 = cljs.core.count.call(null, c__17462__auto___22937);
            var G__22941 = 0;
            seq__20670_22926 = G__22938;
            chunk__20671_22927 = G__22939;
            count__20672_22928 = G__22940;
            i__20673_22929 = G__22941;
            continue;
          } else {
            var arg__18890__auto___22942 = cljs.core.first.call(null, seq__20670_22936__$1);
            a__18889__auto__.push(arg__18890__auto___22942);
            var G__22943 = cljs.core.next.call(null, seq__20670_22936__$1);
            var G__22944 = null;
            var G__22945 = 0;
            var G__22946 = 0;
            seq__20670_22926 = G__22943;
            chunk__20671_22927 = G__22944;
            count__20672_22928 = G__22945;
            i__20673_22929 = G__22946;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.table.apply(null, a__18889__auto__);
  };
  var table = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return table__delegate.call(this, args__18888__auto__);
  };
  table.cljs$lang$maxFixedArity = 0;
  table.cljs$lang$applyTo = function(arglist__22947) {
    var args__18888__auto__ = cljs.core.seq(arglist__22947);
    return table__delegate(args__18888__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
quiescent.dom.tbody = function() {
  var tbody__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20678_22948 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20679_22949 = null;
    var count__20680_22950 = 0;
    var i__20681_22951 = 0;
    while (true) {
      if (i__20681_22951 < count__20680_22950) {
        var arg__18890__auto___22952 = cljs.core._nth.call(null, chunk__20679_22949, i__20681_22951);
        a__18889__auto__.push(arg__18890__auto___22952);
        var G__22953 = seq__20678_22948;
        var G__22954 = chunk__20679_22949;
        var G__22955 = count__20680_22950;
        var G__22956 = i__20681_22951 + 1;
        seq__20678_22948 = G__22953;
        chunk__20679_22949 = G__22954;
        count__20680_22950 = G__22955;
        i__20681_22951 = G__22956;
        continue;
      } else {
        var temp__4092__auto___22957 = cljs.core.seq.call(null, seq__20678_22948);
        if (temp__4092__auto___22957) {
          var seq__20678_22958__$1 = temp__4092__auto___22957;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20678_22958__$1)) {
            var c__17462__auto___22959 = cljs.core.chunk_first.call(null, seq__20678_22958__$1);
            var G__22960 = cljs.core.chunk_rest.call(null, seq__20678_22958__$1);
            var G__22961 = c__17462__auto___22959;
            var G__22962 = cljs.core.count.call(null, c__17462__auto___22959);
            var G__22963 = 0;
            seq__20678_22948 = G__22960;
            chunk__20679_22949 = G__22961;
            count__20680_22950 = G__22962;
            i__20681_22951 = G__22963;
            continue;
          } else {
            var arg__18890__auto___22964 = cljs.core.first.call(null, seq__20678_22958__$1);
            a__18889__auto__.push(arg__18890__auto___22964);
            var G__22965 = cljs.core.next.call(null, seq__20678_22958__$1);
            var G__22966 = null;
            var G__22967 = 0;
            var G__22968 = 0;
            seq__20678_22948 = G__22965;
            chunk__20679_22949 = G__22966;
            count__20680_22950 = G__22967;
            i__20681_22951 = G__22968;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tbody.apply(null, a__18889__auto__);
  };
  var tbody = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tbody__delegate.call(this, args__18888__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 0;
  tbody.cljs$lang$applyTo = function(arglist__22969) {
    var args__18888__auto__ = cljs.core.seq(arglist__22969);
    return tbody__delegate(args__18888__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
quiescent.dom.td = function() {
  var td__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20686_22970 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20687_22971 = null;
    var count__20688_22972 = 0;
    var i__20689_22973 = 0;
    while (true) {
      if (i__20689_22973 < count__20688_22972) {
        var arg__18890__auto___22974 = cljs.core._nth.call(null, chunk__20687_22971, i__20689_22973);
        a__18889__auto__.push(arg__18890__auto___22974);
        var G__22975 = seq__20686_22970;
        var G__22976 = chunk__20687_22971;
        var G__22977 = count__20688_22972;
        var G__22978 = i__20689_22973 + 1;
        seq__20686_22970 = G__22975;
        chunk__20687_22971 = G__22976;
        count__20688_22972 = G__22977;
        i__20689_22973 = G__22978;
        continue;
      } else {
        var temp__4092__auto___22979 = cljs.core.seq.call(null, seq__20686_22970);
        if (temp__4092__auto___22979) {
          var seq__20686_22980__$1 = temp__4092__auto___22979;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20686_22980__$1)) {
            var c__17462__auto___22981 = cljs.core.chunk_first.call(null, seq__20686_22980__$1);
            var G__22982 = cljs.core.chunk_rest.call(null, seq__20686_22980__$1);
            var G__22983 = c__17462__auto___22981;
            var G__22984 = cljs.core.count.call(null, c__17462__auto___22981);
            var G__22985 = 0;
            seq__20686_22970 = G__22982;
            chunk__20687_22971 = G__22983;
            count__20688_22972 = G__22984;
            i__20689_22973 = G__22985;
            continue;
          } else {
            var arg__18890__auto___22986 = cljs.core.first.call(null, seq__20686_22980__$1);
            a__18889__auto__.push(arg__18890__auto___22986);
            var G__22987 = cljs.core.next.call(null, seq__20686_22980__$1);
            var G__22988 = null;
            var G__22989 = 0;
            var G__22990 = 0;
            seq__20686_22970 = G__22987;
            chunk__20687_22971 = G__22988;
            count__20688_22972 = G__22989;
            i__20689_22973 = G__22990;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.td.apply(null, a__18889__auto__);
  };
  var td = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return td__delegate.call(this, args__18888__auto__);
  };
  td.cljs$lang$maxFixedArity = 0;
  td.cljs$lang$applyTo = function(arglist__22991) {
    var args__18888__auto__ = cljs.core.seq(arglist__22991);
    return td__delegate(args__18888__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
quiescent.dom.textarea = function() {
  var textarea__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20694_22992 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20695_22993 = null;
    var count__20696_22994 = 0;
    var i__20697_22995 = 0;
    while (true) {
      if (i__20697_22995 < count__20696_22994) {
        var arg__18890__auto___22996 = cljs.core._nth.call(null, chunk__20695_22993, i__20697_22995);
        a__18889__auto__.push(arg__18890__auto___22996);
        var G__22997 = seq__20694_22992;
        var G__22998 = chunk__20695_22993;
        var G__22999 = count__20696_22994;
        var G__23000 = i__20697_22995 + 1;
        seq__20694_22992 = G__22997;
        chunk__20695_22993 = G__22998;
        count__20696_22994 = G__22999;
        i__20697_22995 = G__23000;
        continue;
      } else {
        var temp__4092__auto___23001 = cljs.core.seq.call(null, seq__20694_22992);
        if (temp__4092__auto___23001) {
          var seq__20694_23002__$1 = temp__4092__auto___23001;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20694_23002__$1)) {
            var c__17462__auto___23003 = cljs.core.chunk_first.call(null, seq__20694_23002__$1);
            var G__23004 = cljs.core.chunk_rest.call(null, seq__20694_23002__$1);
            var G__23005 = c__17462__auto___23003;
            var G__23006 = cljs.core.count.call(null, c__17462__auto___23003);
            var G__23007 = 0;
            seq__20694_22992 = G__23004;
            chunk__20695_22993 = G__23005;
            count__20696_22994 = G__23006;
            i__20697_22995 = G__23007;
            continue;
          } else {
            var arg__18890__auto___23008 = cljs.core.first.call(null, seq__20694_23002__$1);
            a__18889__auto__.push(arg__18890__auto___23008);
            var G__23009 = cljs.core.next.call(null, seq__20694_23002__$1);
            var G__23010 = null;
            var G__23011 = 0;
            var G__23012 = 0;
            seq__20694_22992 = G__23009;
            chunk__20695_22993 = G__23010;
            count__20696_22994 = G__23011;
            i__20697_22995 = G__23012;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.textarea.apply(null, a__18889__auto__);
  };
  var textarea = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return textarea__delegate.call(this, args__18888__auto__);
  };
  textarea.cljs$lang$maxFixedArity = 0;
  textarea.cljs$lang$applyTo = function(arglist__23013) {
    var args__18888__auto__ = cljs.core.seq(arglist__23013);
    return textarea__delegate(args__18888__auto__);
  };
  textarea.cljs$core$IFn$_invoke$arity$variadic = textarea__delegate;
  return textarea;
}();
quiescent.dom.tfoot = function() {
  var tfoot__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20702_23014 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20703_23015 = null;
    var count__20704_23016 = 0;
    var i__20705_23017 = 0;
    while (true) {
      if (i__20705_23017 < count__20704_23016) {
        var arg__18890__auto___23018 = cljs.core._nth.call(null, chunk__20703_23015, i__20705_23017);
        a__18889__auto__.push(arg__18890__auto___23018);
        var G__23019 = seq__20702_23014;
        var G__23020 = chunk__20703_23015;
        var G__23021 = count__20704_23016;
        var G__23022 = i__20705_23017 + 1;
        seq__20702_23014 = G__23019;
        chunk__20703_23015 = G__23020;
        count__20704_23016 = G__23021;
        i__20705_23017 = G__23022;
        continue;
      } else {
        var temp__4092__auto___23023 = cljs.core.seq.call(null, seq__20702_23014);
        if (temp__4092__auto___23023) {
          var seq__20702_23024__$1 = temp__4092__auto___23023;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20702_23024__$1)) {
            var c__17462__auto___23025 = cljs.core.chunk_first.call(null, seq__20702_23024__$1);
            var G__23026 = cljs.core.chunk_rest.call(null, seq__20702_23024__$1);
            var G__23027 = c__17462__auto___23025;
            var G__23028 = cljs.core.count.call(null, c__17462__auto___23025);
            var G__23029 = 0;
            seq__20702_23014 = G__23026;
            chunk__20703_23015 = G__23027;
            count__20704_23016 = G__23028;
            i__20705_23017 = G__23029;
            continue;
          } else {
            var arg__18890__auto___23030 = cljs.core.first.call(null, seq__20702_23024__$1);
            a__18889__auto__.push(arg__18890__auto___23030);
            var G__23031 = cljs.core.next.call(null, seq__20702_23024__$1);
            var G__23032 = null;
            var G__23033 = 0;
            var G__23034 = 0;
            seq__20702_23014 = G__23031;
            chunk__20703_23015 = G__23032;
            count__20704_23016 = G__23033;
            i__20705_23017 = G__23034;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tfoot.apply(null, a__18889__auto__);
  };
  var tfoot = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tfoot__delegate.call(this, args__18888__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 0;
  tfoot.cljs$lang$applyTo = function(arglist__23035) {
    var args__18888__auto__ = cljs.core.seq(arglist__23035);
    return tfoot__delegate(args__18888__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
quiescent.dom.th = function() {
  var th__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20710_23036 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20711_23037 = null;
    var count__20712_23038 = 0;
    var i__20713_23039 = 0;
    while (true) {
      if (i__20713_23039 < count__20712_23038) {
        var arg__18890__auto___23040 = cljs.core._nth.call(null, chunk__20711_23037, i__20713_23039);
        a__18889__auto__.push(arg__18890__auto___23040);
        var G__23041 = seq__20710_23036;
        var G__23042 = chunk__20711_23037;
        var G__23043 = count__20712_23038;
        var G__23044 = i__20713_23039 + 1;
        seq__20710_23036 = G__23041;
        chunk__20711_23037 = G__23042;
        count__20712_23038 = G__23043;
        i__20713_23039 = G__23044;
        continue;
      } else {
        var temp__4092__auto___23045 = cljs.core.seq.call(null, seq__20710_23036);
        if (temp__4092__auto___23045) {
          var seq__20710_23046__$1 = temp__4092__auto___23045;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20710_23046__$1)) {
            var c__17462__auto___23047 = cljs.core.chunk_first.call(null, seq__20710_23046__$1);
            var G__23048 = cljs.core.chunk_rest.call(null, seq__20710_23046__$1);
            var G__23049 = c__17462__auto___23047;
            var G__23050 = cljs.core.count.call(null, c__17462__auto___23047);
            var G__23051 = 0;
            seq__20710_23036 = G__23048;
            chunk__20711_23037 = G__23049;
            count__20712_23038 = G__23050;
            i__20713_23039 = G__23051;
            continue;
          } else {
            var arg__18890__auto___23052 = cljs.core.first.call(null, seq__20710_23046__$1);
            a__18889__auto__.push(arg__18890__auto___23052);
            var G__23053 = cljs.core.next.call(null, seq__20710_23046__$1);
            var G__23054 = null;
            var G__23055 = 0;
            var G__23056 = 0;
            seq__20710_23036 = G__23053;
            chunk__20711_23037 = G__23054;
            count__20712_23038 = G__23055;
            i__20713_23039 = G__23056;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.th.apply(null, a__18889__auto__);
  };
  var th = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return th__delegate.call(this, args__18888__auto__);
  };
  th.cljs$lang$maxFixedArity = 0;
  th.cljs$lang$applyTo = function(arglist__23057) {
    var args__18888__auto__ = cljs.core.seq(arglist__23057);
    return th__delegate(args__18888__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
quiescent.dom.thead = function() {
  var thead__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20718_23058 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20719_23059 = null;
    var count__20720_23060 = 0;
    var i__20721_23061 = 0;
    while (true) {
      if (i__20721_23061 < count__20720_23060) {
        var arg__18890__auto___23062 = cljs.core._nth.call(null, chunk__20719_23059, i__20721_23061);
        a__18889__auto__.push(arg__18890__auto___23062);
        var G__23063 = seq__20718_23058;
        var G__23064 = chunk__20719_23059;
        var G__23065 = count__20720_23060;
        var G__23066 = i__20721_23061 + 1;
        seq__20718_23058 = G__23063;
        chunk__20719_23059 = G__23064;
        count__20720_23060 = G__23065;
        i__20721_23061 = G__23066;
        continue;
      } else {
        var temp__4092__auto___23067 = cljs.core.seq.call(null, seq__20718_23058);
        if (temp__4092__auto___23067) {
          var seq__20718_23068__$1 = temp__4092__auto___23067;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20718_23068__$1)) {
            var c__17462__auto___23069 = cljs.core.chunk_first.call(null, seq__20718_23068__$1);
            var G__23070 = cljs.core.chunk_rest.call(null, seq__20718_23068__$1);
            var G__23071 = c__17462__auto___23069;
            var G__23072 = cljs.core.count.call(null, c__17462__auto___23069);
            var G__23073 = 0;
            seq__20718_23058 = G__23070;
            chunk__20719_23059 = G__23071;
            count__20720_23060 = G__23072;
            i__20721_23061 = G__23073;
            continue;
          } else {
            var arg__18890__auto___23074 = cljs.core.first.call(null, seq__20718_23068__$1);
            a__18889__auto__.push(arg__18890__auto___23074);
            var G__23075 = cljs.core.next.call(null, seq__20718_23068__$1);
            var G__23076 = null;
            var G__23077 = 0;
            var G__23078 = 0;
            seq__20718_23058 = G__23075;
            chunk__20719_23059 = G__23076;
            count__20720_23060 = G__23077;
            i__20721_23061 = G__23078;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.thead.apply(null, a__18889__auto__);
  };
  var thead = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return thead__delegate.call(this, args__18888__auto__);
  };
  thead.cljs$lang$maxFixedArity = 0;
  thead.cljs$lang$applyTo = function(arglist__23079) {
    var args__18888__auto__ = cljs.core.seq(arglist__23079);
    return thead__delegate(args__18888__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
quiescent.dom.time = function() {
  var time__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20726_23080 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20727_23081 = null;
    var count__20728_23082 = 0;
    var i__20729_23083 = 0;
    while (true) {
      if (i__20729_23083 < count__20728_23082) {
        var arg__18890__auto___23084 = cljs.core._nth.call(null, chunk__20727_23081, i__20729_23083);
        a__18889__auto__.push(arg__18890__auto___23084);
        var G__23085 = seq__20726_23080;
        var G__23086 = chunk__20727_23081;
        var G__23087 = count__20728_23082;
        var G__23088 = i__20729_23083 + 1;
        seq__20726_23080 = G__23085;
        chunk__20727_23081 = G__23086;
        count__20728_23082 = G__23087;
        i__20729_23083 = G__23088;
        continue;
      } else {
        var temp__4092__auto___23089 = cljs.core.seq.call(null, seq__20726_23080);
        if (temp__4092__auto___23089) {
          var seq__20726_23090__$1 = temp__4092__auto___23089;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20726_23090__$1)) {
            var c__17462__auto___23091 = cljs.core.chunk_first.call(null, seq__20726_23090__$1);
            var G__23092 = cljs.core.chunk_rest.call(null, seq__20726_23090__$1);
            var G__23093 = c__17462__auto___23091;
            var G__23094 = cljs.core.count.call(null, c__17462__auto___23091);
            var G__23095 = 0;
            seq__20726_23080 = G__23092;
            chunk__20727_23081 = G__23093;
            count__20728_23082 = G__23094;
            i__20729_23083 = G__23095;
            continue;
          } else {
            var arg__18890__auto___23096 = cljs.core.first.call(null, seq__20726_23090__$1);
            a__18889__auto__.push(arg__18890__auto___23096);
            var G__23097 = cljs.core.next.call(null, seq__20726_23090__$1);
            var G__23098 = null;
            var G__23099 = 0;
            var G__23100 = 0;
            seq__20726_23080 = G__23097;
            chunk__20727_23081 = G__23098;
            count__20728_23082 = G__23099;
            i__20729_23083 = G__23100;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.time.apply(null, a__18889__auto__);
  };
  var time = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return time__delegate.call(this, args__18888__auto__);
  };
  time.cljs$lang$maxFixedArity = 0;
  time.cljs$lang$applyTo = function(arglist__23101) {
    var args__18888__auto__ = cljs.core.seq(arglist__23101);
    return time__delegate(args__18888__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
quiescent.dom.title = function() {
  var title__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20734_23102 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20735_23103 = null;
    var count__20736_23104 = 0;
    var i__20737_23105 = 0;
    while (true) {
      if (i__20737_23105 < count__20736_23104) {
        var arg__18890__auto___23106 = cljs.core._nth.call(null, chunk__20735_23103, i__20737_23105);
        a__18889__auto__.push(arg__18890__auto___23106);
        var G__23107 = seq__20734_23102;
        var G__23108 = chunk__20735_23103;
        var G__23109 = count__20736_23104;
        var G__23110 = i__20737_23105 + 1;
        seq__20734_23102 = G__23107;
        chunk__20735_23103 = G__23108;
        count__20736_23104 = G__23109;
        i__20737_23105 = G__23110;
        continue;
      } else {
        var temp__4092__auto___23111 = cljs.core.seq.call(null, seq__20734_23102);
        if (temp__4092__auto___23111) {
          var seq__20734_23112__$1 = temp__4092__auto___23111;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20734_23112__$1)) {
            var c__17462__auto___23113 = cljs.core.chunk_first.call(null, seq__20734_23112__$1);
            var G__23114 = cljs.core.chunk_rest.call(null, seq__20734_23112__$1);
            var G__23115 = c__17462__auto___23113;
            var G__23116 = cljs.core.count.call(null, c__17462__auto___23113);
            var G__23117 = 0;
            seq__20734_23102 = G__23114;
            chunk__20735_23103 = G__23115;
            count__20736_23104 = G__23116;
            i__20737_23105 = G__23117;
            continue;
          } else {
            var arg__18890__auto___23118 = cljs.core.first.call(null, seq__20734_23112__$1);
            a__18889__auto__.push(arg__18890__auto___23118);
            var G__23119 = cljs.core.next.call(null, seq__20734_23112__$1);
            var G__23120 = null;
            var G__23121 = 0;
            var G__23122 = 0;
            seq__20734_23102 = G__23119;
            chunk__20735_23103 = G__23120;
            count__20736_23104 = G__23121;
            i__20737_23105 = G__23122;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.title.apply(null, a__18889__auto__);
  };
  var title = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return title__delegate.call(this, args__18888__auto__);
  };
  title.cljs$lang$maxFixedArity = 0;
  title.cljs$lang$applyTo = function(arglist__23123) {
    var args__18888__auto__ = cljs.core.seq(arglist__23123);
    return title__delegate(args__18888__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
quiescent.dom.tr = function() {
  var tr__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20742_23124 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20743_23125 = null;
    var count__20744_23126 = 0;
    var i__20745_23127 = 0;
    while (true) {
      if (i__20745_23127 < count__20744_23126) {
        var arg__18890__auto___23128 = cljs.core._nth.call(null, chunk__20743_23125, i__20745_23127);
        a__18889__auto__.push(arg__18890__auto___23128);
        var G__23129 = seq__20742_23124;
        var G__23130 = chunk__20743_23125;
        var G__23131 = count__20744_23126;
        var G__23132 = i__20745_23127 + 1;
        seq__20742_23124 = G__23129;
        chunk__20743_23125 = G__23130;
        count__20744_23126 = G__23131;
        i__20745_23127 = G__23132;
        continue;
      } else {
        var temp__4092__auto___23133 = cljs.core.seq.call(null, seq__20742_23124);
        if (temp__4092__auto___23133) {
          var seq__20742_23134__$1 = temp__4092__auto___23133;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20742_23134__$1)) {
            var c__17462__auto___23135 = cljs.core.chunk_first.call(null, seq__20742_23134__$1);
            var G__23136 = cljs.core.chunk_rest.call(null, seq__20742_23134__$1);
            var G__23137 = c__17462__auto___23135;
            var G__23138 = cljs.core.count.call(null, c__17462__auto___23135);
            var G__23139 = 0;
            seq__20742_23124 = G__23136;
            chunk__20743_23125 = G__23137;
            count__20744_23126 = G__23138;
            i__20745_23127 = G__23139;
            continue;
          } else {
            var arg__18890__auto___23140 = cljs.core.first.call(null, seq__20742_23134__$1);
            a__18889__auto__.push(arg__18890__auto___23140);
            var G__23141 = cljs.core.next.call(null, seq__20742_23134__$1);
            var G__23142 = null;
            var G__23143 = 0;
            var G__23144 = 0;
            seq__20742_23124 = G__23141;
            chunk__20743_23125 = G__23142;
            count__20744_23126 = G__23143;
            i__20745_23127 = G__23144;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tr.apply(null, a__18889__auto__);
  };
  var tr = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tr__delegate.call(this, args__18888__auto__);
  };
  tr.cljs$lang$maxFixedArity = 0;
  tr.cljs$lang$applyTo = function(arglist__23145) {
    var args__18888__auto__ = cljs.core.seq(arglist__23145);
    return tr__delegate(args__18888__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
quiescent.dom.track = function() {
  var track__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20750_23146 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20751_23147 = null;
    var count__20752_23148 = 0;
    var i__20753_23149 = 0;
    while (true) {
      if (i__20753_23149 < count__20752_23148) {
        var arg__18890__auto___23150 = cljs.core._nth.call(null, chunk__20751_23147, i__20753_23149);
        a__18889__auto__.push(arg__18890__auto___23150);
        var G__23151 = seq__20750_23146;
        var G__23152 = chunk__20751_23147;
        var G__23153 = count__20752_23148;
        var G__23154 = i__20753_23149 + 1;
        seq__20750_23146 = G__23151;
        chunk__20751_23147 = G__23152;
        count__20752_23148 = G__23153;
        i__20753_23149 = G__23154;
        continue;
      } else {
        var temp__4092__auto___23155 = cljs.core.seq.call(null, seq__20750_23146);
        if (temp__4092__auto___23155) {
          var seq__20750_23156__$1 = temp__4092__auto___23155;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20750_23156__$1)) {
            var c__17462__auto___23157 = cljs.core.chunk_first.call(null, seq__20750_23156__$1);
            var G__23158 = cljs.core.chunk_rest.call(null, seq__20750_23156__$1);
            var G__23159 = c__17462__auto___23157;
            var G__23160 = cljs.core.count.call(null, c__17462__auto___23157);
            var G__23161 = 0;
            seq__20750_23146 = G__23158;
            chunk__20751_23147 = G__23159;
            count__20752_23148 = G__23160;
            i__20753_23149 = G__23161;
            continue;
          } else {
            var arg__18890__auto___23162 = cljs.core.first.call(null, seq__20750_23156__$1);
            a__18889__auto__.push(arg__18890__auto___23162);
            var G__23163 = cljs.core.next.call(null, seq__20750_23156__$1);
            var G__23164 = null;
            var G__23165 = 0;
            var G__23166 = 0;
            seq__20750_23146 = G__23163;
            chunk__20751_23147 = G__23164;
            count__20752_23148 = G__23165;
            i__20753_23149 = G__23166;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.track.apply(null, a__18889__auto__);
  };
  var track = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return track__delegate.call(this, args__18888__auto__);
  };
  track.cljs$lang$maxFixedArity = 0;
  track.cljs$lang$applyTo = function(arglist__23167) {
    var args__18888__auto__ = cljs.core.seq(arglist__23167);
    return track__delegate(args__18888__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
quiescent.dom.u = function() {
  var u__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20758_23168 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20759_23169 = null;
    var count__20760_23170 = 0;
    var i__20761_23171 = 0;
    while (true) {
      if (i__20761_23171 < count__20760_23170) {
        var arg__18890__auto___23172 = cljs.core._nth.call(null, chunk__20759_23169, i__20761_23171);
        a__18889__auto__.push(arg__18890__auto___23172);
        var G__23173 = seq__20758_23168;
        var G__23174 = chunk__20759_23169;
        var G__23175 = count__20760_23170;
        var G__23176 = i__20761_23171 + 1;
        seq__20758_23168 = G__23173;
        chunk__20759_23169 = G__23174;
        count__20760_23170 = G__23175;
        i__20761_23171 = G__23176;
        continue;
      } else {
        var temp__4092__auto___23177 = cljs.core.seq.call(null, seq__20758_23168);
        if (temp__4092__auto___23177) {
          var seq__20758_23178__$1 = temp__4092__auto___23177;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20758_23178__$1)) {
            var c__17462__auto___23179 = cljs.core.chunk_first.call(null, seq__20758_23178__$1);
            var G__23180 = cljs.core.chunk_rest.call(null, seq__20758_23178__$1);
            var G__23181 = c__17462__auto___23179;
            var G__23182 = cljs.core.count.call(null, c__17462__auto___23179);
            var G__23183 = 0;
            seq__20758_23168 = G__23180;
            chunk__20759_23169 = G__23181;
            count__20760_23170 = G__23182;
            i__20761_23171 = G__23183;
            continue;
          } else {
            var arg__18890__auto___23184 = cljs.core.first.call(null, seq__20758_23178__$1);
            a__18889__auto__.push(arg__18890__auto___23184);
            var G__23185 = cljs.core.next.call(null, seq__20758_23178__$1);
            var G__23186 = null;
            var G__23187 = 0;
            var G__23188 = 0;
            seq__20758_23168 = G__23185;
            chunk__20759_23169 = G__23186;
            count__20760_23170 = G__23187;
            i__20761_23171 = G__23188;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.u.apply(null, a__18889__auto__);
  };
  var u = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return u__delegate.call(this, args__18888__auto__);
  };
  u.cljs$lang$maxFixedArity = 0;
  u.cljs$lang$applyTo = function(arglist__23189) {
    var args__18888__auto__ = cljs.core.seq(arglist__23189);
    return u__delegate(args__18888__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
quiescent.dom.ul = function() {
  var ul__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20766_23190 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20767_23191 = null;
    var count__20768_23192 = 0;
    var i__20769_23193 = 0;
    while (true) {
      if (i__20769_23193 < count__20768_23192) {
        var arg__18890__auto___23194 = cljs.core._nth.call(null, chunk__20767_23191, i__20769_23193);
        a__18889__auto__.push(arg__18890__auto___23194);
        var G__23195 = seq__20766_23190;
        var G__23196 = chunk__20767_23191;
        var G__23197 = count__20768_23192;
        var G__23198 = i__20769_23193 + 1;
        seq__20766_23190 = G__23195;
        chunk__20767_23191 = G__23196;
        count__20768_23192 = G__23197;
        i__20769_23193 = G__23198;
        continue;
      } else {
        var temp__4092__auto___23199 = cljs.core.seq.call(null, seq__20766_23190);
        if (temp__4092__auto___23199) {
          var seq__20766_23200__$1 = temp__4092__auto___23199;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20766_23200__$1)) {
            var c__17462__auto___23201 = cljs.core.chunk_first.call(null, seq__20766_23200__$1);
            var G__23202 = cljs.core.chunk_rest.call(null, seq__20766_23200__$1);
            var G__23203 = c__17462__auto___23201;
            var G__23204 = cljs.core.count.call(null, c__17462__auto___23201);
            var G__23205 = 0;
            seq__20766_23190 = G__23202;
            chunk__20767_23191 = G__23203;
            count__20768_23192 = G__23204;
            i__20769_23193 = G__23205;
            continue;
          } else {
            var arg__18890__auto___23206 = cljs.core.first.call(null, seq__20766_23200__$1);
            a__18889__auto__.push(arg__18890__auto___23206);
            var G__23207 = cljs.core.next.call(null, seq__20766_23200__$1);
            var G__23208 = null;
            var G__23209 = 0;
            var G__23210 = 0;
            seq__20766_23190 = G__23207;
            chunk__20767_23191 = G__23208;
            count__20768_23192 = G__23209;
            i__20769_23193 = G__23210;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ul.apply(null, a__18889__auto__);
  };
  var ul = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ul__delegate.call(this, args__18888__auto__);
  };
  ul.cljs$lang$maxFixedArity = 0;
  ul.cljs$lang$applyTo = function(arglist__23211) {
    var args__18888__auto__ = cljs.core.seq(arglist__23211);
    return ul__delegate(args__18888__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
quiescent.dom.var$ = function() {
  var var$__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20774_23212 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20775_23213 = null;
    var count__20776_23214 = 0;
    var i__20777_23215 = 0;
    while (true) {
      if (i__20777_23215 < count__20776_23214) {
        var arg__18890__auto___23216 = cljs.core._nth.call(null, chunk__20775_23213, i__20777_23215);
        a__18889__auto__.push(arg__18890__auto___23216);
        var G__23217 = seq__20774_23212;
        var G__23218 = chunk__20775_23213;
        var G__23219 = count__20776_23214;
        var G__23220 = i__20777_23215 + 1;
        seq__20774_23212 = G__23217;
        chunk__20775_23213 = G__23218;
        count__20776_23214 = G__23219;
        i__20777_23215 = G__23220;
        continue;
      } else {
        var temp__4092__auto___23221 = cljs.core.seq.call(null, seq__20774_23212);
        if (temp__4092__auto___23221) {
          var seq__20774_23222__$1 = temp__4092__auto___23221;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20774_23222__$1)) {
            var c__17462__auto___23223 = cljs.core.chunk_first.call(null, seq__20774_23222__$1);
            var G__23224 = cljs.core.chunk_rest.call(null, seq__20774_23222__$1);
            var G__23225 = c__17462__auto___23223;
            var G__23226 = cljs.core.count.call(null, c__17462__auto___23223);
            var G__23227 = 0;
            seq__20774_23212 = G__23224;
            chunk__20775_23213 = G__23225;
            count__20776_23214 = G__23226;
            i__20777_23215 = G__23227;
            continue;
          } else {
            var arg__18890__auto___23228 = cljs.core.first.call(null, seq__20774_23222__$1);
            a__18889__auto__.push(arg__18890__auto___23228);
            var G__23229 = cljs.core.next.call(null, seq__20774_23222__$1);
            var G__23230 = null;
            var G__23231 = 0;
            var G__23232 = 0;
            seq__20774_23212 = G__23229;
            chunk__20775_23213 = G__23230;
            count__20776_23214 = G__23231;
            i__20777_23215 = G__23232;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.var$.apply(null, a__18889__auto__);
  };
  var var$ = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return var$__delegate.call(this, args__18888__auto__);
  };
  var$.cljs$lang$maxFixedArity = 0;
  var$.cljs$lang$applyTo = function(arglist__23233) {
    var args__18888__auto__ = cljs.core.seq(arglist__23233);
    return var$__delegate(args__18888__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
quiescent.dom.video = function() {
  var video__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20782_23234 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20783_23235 = null;
    var count__20784_23236 = 0;
    var i__20785_23237 = 0;
    while (true) {
      if (i__20785_23237 < count__20784_23236) {
        var arg__18890__auto___23238 = cljs.core._nth.call(null, chunk__20783_23235, i__20785_23237);
        a__18889__auto__.push(arg__18890__auto___23238);
        var G__23239 = seq__20782_23234;
        var G__23240 = chunk__20783_23235;
        var G__23241 = count__20784_23236;
        var G__23242 = i__20785_23237 + 1;
        seq__20782_23234 = G__23239;
        chunk__20783_23235 = G__23240;
        count__20784_23236 = G__23241;
        i__20785_23237 = G__23242;
        continue;
      } else {
        var temp__4092__auto___23243 = cljs.core.seq.call(null, seq__20782_23234);
        if (temp__4092__auto___23243) {
          var seq__20782_23244__$1 = temp__4092__auto___23243;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20782_23244__$1)) {
            var c__17462__auto___23245 = cljs.core.chunk_first.call(null, seq__20782_23244__$1);
            var G__23246 = cljs.core.chunk_rest.call(null, seq__20782_23244__$1);
            var G__23247 = c__17462__auto___23245;
            var G__23248 = cljs.core.count.call(null, c__17462__auto___23245);
            var G__23249 = 0;
            seq__20782_23234 = G__23246;
            chunk__20783_23235 = G__23247;
            count__20784_23236 = G__23248;
            i__20785_23237 = G__23249;
            continue;
          } else {
            var arg__18890__auto___23250 = cljs.core.first.call(null, seq__20782_23244__$1);
            a__18889__auto__.push(arg__18890__auto___23250);
            var G__23251 = cljs.core.next.call(null, seq__20782_23244__$1);
            var G__23252 = null;
            var G__23253 = 0;
            var G__23254 = 0;
            seq__20782_23234 = G__23251;
            chunk__20783_23235 = G__23252;
            count__20784_23236 = G__23253;
            i__20785_23237 = G__23254;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.video.apply(null, a__18889__auto__);
  };
  var video = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return video__delegate.call(this, args__18888__auto__);
  };
  video.cljs$lang$maxFixedArity = 0;
  video.cljs$lang$applyTo = function(arglist__23255) {
    var args__18888__auto__ = cljs.core.seq(arglist__23255);
    return video__delegate(args__18888__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
quiescent.dom.wbr = function() {
  var wbr__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20790_23256 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20791_23257 = null;
    var count__20792_23258 = 0;
    var i__20793_23259 = 0;
    while (true) {
      if (i__20793_23259 < count__20792_23258) {
        var arg__18890__auto___23260 = cljs.core._nth.call(null, chunk__20791_23257, i__20793_23259);
        a__18889__auto__.push(arg__18890__auto___23260);
        var G__23261 = seq__20790_23256;
        var G__23262 = chunk__20791_23257;
        var G__23263 = count__20792_23258;
        var G__23264 = i__20793_23259 + 1;
        seq__20790_23256 = G__23261;
        chunk__20791_23257 = G__23262;
        count__20792_23258 = G__23263;
        i__20793_23259 = G__23264;
        continue;
      } else {
        var temp__4092__auto___23265 = cljs.core.seq.call(null, seq__20790_23256);
        if (temp__4092__auto___23265) {
          var seq__20790_23266__$1 = temp__4092__auto___23265;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20790_23266__$1)) {
            var c__17462__auto___23267 = cljs.core.chunk_first.call(null, seq__20790_23266__$1);
            var G__23268 = cljs.core.chunk_rest.call(null, seq__20790_23266__$1);
            var G__23269 = c__17462__auto___23267;
            var G__23270 = cljs.core.count.call(null, c__17462__auto___23267);
            var G__23271 = 0;
            seq__20790_23256 = G__23268;
            chunk__20791_23257 = G__23269;
            count__20792_23258 = G__23270;
            i__20793_23259 = G__23271;
            continue;
          } else {
            var arg__18890__auto___23272 = cljs.core.first.call(null, seq__20790_23266__$1);
            a__18889__auto__.push(arg__18890__auto___23272);
            var G__23273 = cljs.core.next.call(null, seq__20790_23266__$1);
            var G__23274 = null;
            var G__23275 = 0;
            var G__23276 = 0;
            seq__20790_23256 = G__23273;
            chunk__20791_23257 = G__23274;
            count__20792_23258 = G__23275;
            i__20793_23259 = G__23276;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.wbr.apply(null, a__18889__auto__);
  };
  var wbr = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return wbr__delegate.call(this, args__18888__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 0;
  wbr.cljs$lang$applyTo = function(arglist__23277) {
    var args__18888__auto__ = cljs.core.seq(arglist__23277);
    return wbr__delegate(args__18888__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
quiescent.dom.circle = function() {
  var circle__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20798_23278 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20799_23279 = null;
    var count__20800_23280 = 0;
    var i__20801_23281 = 0;
    while (true) {
      if (i__20801_23281 < count__20800_23280) {
        var arg__18890__auto___23282 = cljs.core._nth.call(null, chunk__20799_23279, i__20801_23281);
        a__18889__auto__.push(arg__18890__auto___23282);
        var G__23283 = seq__20798_23278;
        var G__23284 = chunk__20799_23279;
        var G__23285 = count__20800_23280;
        var G__23286 = i__20801_23281 + 1;
        seq__20798_23278 = G__23283;
        chunk__20799_23279 = G__23284;
        count__20800_23280 = G__23285;
        i__20801_23281 = G__23286;
        continue;
      } else {
        var temp__4092__auto___23287 = cljs.core.seq.call(null, seq__20798_23278);
        if (temp__4092__auto___23287) {
          var seq__20798_23288__$1 = temp__4092__auto___23287;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20798_23288__$1)) {
            var c__17462__auto___23289 = cljs.core.chunk_first.call(null, seq__20798_23288__$1);
            var G__23290 = cljs.core.chunk_rest.call(null, seq__20798_23288__$1);
            var G__23291 = c__17462__auto___23289;
            var G__23292 = cljs.core.count.call(null, c__17462__auto___23289);
            var G__23293 = 0;
            seq__20798_23278 = G__23290;
            chunk__20799_23279 = G__23291;
            count__20800_23280 = G__23292;
            i__20801_23281 = G__23293;
            continue;
          } else {
            var arg__18890__auto___23294 = cljs.core.first.call(null, seq__20798_23288__$1);
            a__18889__auto__.push(arg__18890__auto___23294);
            var G__23295 = cljs.core.next.call(null, seq__20798_23288__$1);
            var G__23296 = null;
            var G__23297 = 0;
            var G__23298 = 0;
            seq__20798_23278 = G__23295;
            chunk__20799_23279 = G__23296;
            count__20800_23280 = G__23297;
            i__20801_23281 = G__23298;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.circle.apply(null, a__18889__auto__);
  };
  var circle = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return circle__delegate.call(this, args__18888__auto__);
  };
  circle.cljs$lang$maxFixedArity = 0;
  circle.cljs$lang$applyTo = function(arglist__23299) {
    var args__18888__auto__ = cljs.core.seq(arglist__23299);
    return circle__delegate(args__18888__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
quiescent.dom.g = function() {
  var g__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20806_23300 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20807_23301 = null;
    var count__20808_23302 = 0;
    var i__20809_23303 = 0;
    while (true) {
      if (i__20809_23303 < count__20808_23302) {
        var arg__18890__auto___23304 = cljs.core._nth.call(null, chunk__20807_23301, i__20809_23303);
        a__18889__auto__.push(arg__18890__auto___23304);
        var G__23305 = seq__20806_23300;
        var G__23306 = chunk__20807_23301;
        var G__23307 = count__20808_23302;
        var G__23308 = i__20809_23303 + 1;
        seq__20806_23300 = G__23305;
        chunk__20807_23301 = G__23306;
        count__20808_23302 = G__23307;
        i__20809_23303 = G__23308;
        continue;
      } else {
        var temp__4092__auto___23309 = cljs.core.seq.call(null, seq__20806_23300);
        if (temp__4092__auto___23309) {
          var seq__20806_23310__$1 = temp__4092__auto___23309;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20806_23310__$1)) {
            var c__17462__auto___23311 = cljs.core.chunk_first.call(null, seq__20806_23310__$1);
            var G__23312 = cljs.core.chunk_rest.call(null, seq__20806_23310__$1);
            var G__23313 = c__17462__auto___23311;
            var G__23314 = cljs.core.count.call(null, c__17462__auto___23311);
            var G__23315 = 0;
            seq__20806_23300 = G__23312;
            chunk__20807_23301 = G__23313;
            count__20808_23302 = G__23314;
            i__20809_23303 = G__23315;
            continue;
          } else {
            var arg__18890__auto___23316 = cljs.core.first.call(null, seq__20806_23310__$1);
            a__18889__auto__.push(arg__18890__auto___23316);
            var G__23317 = cljs.core.next.call(null, seq__20806_23310__$1);
            var G__23318 = null;
            var G__23319 = 0;
            var G__23320 = 0;
            seq__20806_23300 = G__23317;
            chunk__20807_23301 = G__23318;
            count__20808_23302 = G__23319;
            i__20809_23303 = G__23320;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.g.apply(null, a__18889__auto__);
  };
  var g = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return g__delegate.call(this, args__18888__auto__);
  };
  g.cljs$lang$maxFixedArity = 0;
  g.cljs$lang$applyTo = function(arglist__23321) {
    var args__18888__auto__ = cljs.core.seq(arglist__23321);
    return g__delegate(args__18888__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
quiescent.dom.line = function() {
  var line__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20814_23322 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20815_23323 = null;
    var count__20816_23324 = 0;
    var i__20817_23325 = 0;
    while (true) {
      if (i__20817_23325 < count__20816_23324) {
        var arg__18890__auto___23326 = cljs.core._nth.call(null, chunk__20815_23323, i__20817_23325);
        a__18889__auto__.push(arg__18890__auto___23326);
        var G__23327 = seq__20814_23322;
        var G__23328 = chunk__20815_23323;
        var G__23329 = count__20816_23324;
        var G__23330 = i__20817_23325 + 1;
        seq__20814_23322 = G__23327;
        chunk__20815_23323 = G__23328;
        count__20816_23324 = G__23329;
        i__20817_23325 = G__23330;
        continue;
      } else {
        var temp__4092__auto___23331 = cljs.core.seq.call(null, seq__20814_23322);
        if (temp__4092__auto___23331) {
          var seq__20814_23332__$1 = temp__4092__auto___23331;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20814_23332__$1)) {
            var c__17462__auto___23333 = cljs.core.chunk_first.call(null, seq__20814_23332__$1);
            var G__23334 = cljs.core.chunk_rest.call(null, seq__20814_23332__$1);
            var G__23335 = c__17462__auto___23333;
            var G__23336 = cljs.core.count.call(null, c__17462__auto___23333);
            var G__23337 = 0;
            seq__20814_23322 = G__23334;
            chunk__20815_23323 = G__23335;
            count__20816_23324 = G__23336;
            i__20817_23325 = G__23337;
            continue;
          } else {
            var arg__18890__auto___23338 = cljs.core.first.call(null, seq__20814_23332__$1);
            a__18889__auto__.push(arg__18890__auto___23338);
            var G__23339 = cljs.core.next.call(null, seq__20814_23332__$1);
            var G__23340 = null;
            var G__23341 = 0;
            var G__23342 = 0;
            seq__20814_23322 = G__23339;
            chunk__20815_23323 = G__23340;
            count__20816_23324 = G__23341;
            i__20817_23325 = G__23342;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.line.apply(null, a__18889__auto__);
  };
  var line = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return line__delegate.call(this, args__18888__auto__);
  };
  line.cljs$lang$maxFixedArity = 0;
  line.cljs$lang$applyTo = function(arglist__23343) {
    var args__18888__auto__ = cljs.core.seq(arglist__23343);
    return line__delegate(args__18888__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
quiescent.dom.path = function() {
  var path__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20822_23344 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20823_23345 = null;
    var count__20824_23346 = 0;
    var i__20825_23347 = 0;
    while (true) {
      if (i__20825_23347 < count__20824_23346) {
        var arg__18890__auto___23348 = cljs.core._nth.call(null, chunk__20823_23345, i__20825_23347);
        a__18889__auto__.push(arg__18890__auto___23348);
        var G__23349 = seq__20822_23344;
        var G__23350 = chunk__20823_23345;
        var G__23351 = count__20824_23346;
        var G__23352 = i__20825_23347 + 1;
        seq__20822_23344 = G__23349;
        chunk__20823_23345 = G__23350;
        count__20824_23346 = G__23351;
        i__20825_23347 = G__23352;
        continue;
      } else {
        var temp__4092__auto___23353 = cljs.core.seq.call(null, seq__20822_23344);
        if (temp__4092__auto___23353) {
          var seq__20822_23354__$1 = temp__4092__auto___23353;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20822_23354__$1)) {
            var c__17462__auto___23355 = cljs.core.chunk_first.call(null, seq__20822_23354__$1);
            var G__23356 = cljs.core.chunk_rest.call(null, seq__20822_23354__$1);
            var G__23357 = c__17462__auto___23355;
            var G__23358 = cljs.core.count.call(null, c__17462__auto___23355);
            var G__23359 = 0;
            seq__20822_23344 = G__23356;
            chunk__20823_23345 = G__23357;
            count__20824_23346 = G__23358;
            i__20825_23347 = G__23359;
            continue;
          } else {
            var arg__18890__auto___23360 = cljs.core.first.call(null, seq__20822_23354__$1);
            a__18889__auto__.push(arg__18890__auto___23360);
            var G__23361 = cljs.core.next.call(null, seq__20822_23354__$1);
            var G__23362 = null;
            var G__23363 = 0;
            var G__23364 = 0;
            seq__20822_23344 = G__23361;
            chunk__20823_23345 = G__23362;
            count__20824_23346 = G__23363;
            i__20825_23347 = G__23364;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.path.apply(null, a__18889__auto__);
  };
  var path = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return path__delegate.call(this, args__18888__auto__);
  };
  path.cljs$lang$maxFixedArity = 0;
  path.cljs$lang$applyTo = function(arglist__23365) {
    var args__18888__auto__ = cljs.core.seq(arglist__23365);
    return path__delegate(args__18888__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
quiescent.dom.polygon = function() {
  var polygon__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20830_23366 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20831_23367 = null;
    var count__20832_23368 = 0;
    var i__20833_23369 = 0;
    while (true) {
      if (i__20833_23369 < count__20832_23368) {
        var arg__18890__auto___23370 = cljs.core._nth.call(null, chunk__20831_23367, i__20833_23369);
        a__18889__auto__.push(arg__18890__auto___23370);
        var G__23371 = seq__20830_23366;
        var G__23372 = chunk__20831_23367;
        var G__23373 = count__20832_23368;
        var G__23374 = i__20833_23369 + 1;
        seq__20830_23366 = G__23371;
        chunk__20831_23367 = G__23372;
        count__20832_23368 = G__23373;
        i__20833_23369 = G__23374;
        continue;
      } else {
        var temp__4092__auto___23375 = cljs.core.seq.call(null, seq__20830_23366);
        if (temp__4092__auto___23375) {
          var seq__20830_23376__$1 = temp__4092__auto___23375;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20830_23376__$1)) {
            var c__17462__auto___23377 = cljs.core.chunk_first.call(null, seq__20830_23376__$1);
            var G__23378 = cljs.core.chunk_rest.call(null, seq__20830_23376__$1);
            var G__23379 = c__17462__auto___23377;
            var G__23380 = cljs.core.count.call(null, c__17462__auto___23377);
            var G__23381 = 0;
            seq__20830_23366 = G__23378;
            chunk__20831_23367 = G__23379;
            count__20832_23368 = G__23380;
            i__20833_23369 = G__23381;
            continue;
          } else {
            var arg__18890__auto___23382 = cljs.core.first.call(null, seq__20830_23376__$1);
            a__18889__auto__.push(arg__18890__auto___23382);
            var G__23383 = cljs.core.next.call(null, seq__20830_23376__$1);
            var G__23384 = null;
            var G__23385 = 0;
            var G__23386 = 0;
            seq__20830_23366 = G__23383;
            chunk__20831_23367 = G__23384;
            count__20832_23368 = G__23385;
            i__20833_23369 = G__23386;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polygon.apply(null, a__18889__auto__);
  };
  var polygon = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return polygon__delegate.call(this, args__18888__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 0;
  polygon.cljs$lang$applyTo = function(arglist__23387) {
    var args__18888__auto__ = cljs.core.seq(arglist__23387);
    return polygon__delegate(args__18888__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
quiescent.dom.polyline = function() {
  var polyline__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20838_23388 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20839_23389 = null;
    var count__20840_23390 = 0;
    var i__20841_23391 = 0;
    while (true) {
      if (i__20841_23391 < count__20840_23390) {
        var arg__18890__auto___23392 = cljs.core._nth.call(null, chunk__20839_23389, i__20841_23391);
        a__18889__auto__.push(arg__18890__auto___23392);
        var G__23393 = seq__20838_23388;
        var G__23394 = chunk__20839_23389;
        var G__23395 = count__20840_23390;
        var G__23396 = i__20841_23391 + 1;
        seq__20838_23388 = G__23393;
        chunk__20839_23389 = G__23394;
        count__20840_23390 = G__23395;
        i__20841_23391 = G__23396;
        continue;
      } else {
        var temp__4092__auto___23397 = cljs.core.seq.call(null, seq__20838_23388);
        if (temp__4092__auto___23397) {
          var seq__20838_23398__$1 = temp__4092__auto___23397;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20838_23398__$1)) {
            var c__17462__auto___23399 = cljs.core.chunk_first.call(null, seq__20838_23398__$1);
            var G__23400 = cljs.core.chunk_rest.call(null, seq__20838_23398__$1);
            var G__23401 = c__17462__auto___23399;
            var G__23402 = cljs.core.count.call(null, c__17462__auto___23399);
            var G__23403 = 0;
            seq__20838_23388 = G__23400;
            chunk__20839_23389 = G__23401;
            count__20840_23390 = G__23402;
            i__20841_23391 = G__23403;
            continue;
          } else {
            var arg__18890__auto___23404 = cljs.core.first.call(null, seq__20838_23398__$1);
            a__18889__auto__.push(arg__18890__auto___23404);
            var G__23405 = cljs.core.next.call(null, seq__20838_23398__$1);
            var G__23406 = null;
            var G__23407 = 0;
            var G__23408 = 0;
            seq__20838_23388 = G__23405;
            chunk__20839_23389 = G__23406;
            count__20840_23390 = G__23407;
            i__20841_23391 = G__23408;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polyline.apply(null, a__18889__auto__);
  };
  var polyline = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return polyline__delegate.call(this, args__18888__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 0;
  polyline.cljs$lang$applyTo = function(arglist__23409) {
    var args__18888__auto__ = cljs.core.seq(arglist__23409);
    return polyline__delegate(args__18888__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
quiescent.dom.rect = function() {
  var rect__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20846_23410 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20847_23411 = null;
    var count__20848_23412 = 0;
    var i__20849_23413 = 0;
    while (true) {
      if (i__20849_23413 < count__20848_23412) {
        var arg__18890__auto___23414 = cljs.core._nth.call(null, chunk__20847_23411, i__20849_23413);
        a__18889__auto__.push(arg__18890__auto___23414);
        var G__23415 = seq__20846_23410;
        var G__23416 = chunk__20847_23411;
        var G__23417 = count__20848_23412;
        var G__23418 = i__20849_23413 + 1;
        seq__20846_23410 = G__23415;
        chunk__20847_23411 = G__23416;
        count__20848_23412 = G__23417;
        i__20849_23413 = G__23418;
        continue;
      } else {
        var temp__4092__auto___23419 = cljs.core.seq.call(null, seq__20846_23410);
        if (temp__4092__auto___23419) {
          var seq__20846_23420__$1 = temp__4092__auto___23419;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20846_23420__$1)) {
            var c__17462__auto___23421 = cljs.core.chunk_first.call(null, seq__20846_23420__$1);
            var G__23422 = cljs.core.chunk_rest.call(null, seq__20846_23420__$1);
            var G__23423 = c__17462__auto___23421;
            var G__23424 = cljs.core.count.call(null, c__17462__auto___23421);
            var G__23425 = 0;
            seq__20846_23410 = G__23422;
            chunk__20847_23411 = G__23423;
            count__20848_23412 = G__23424;
            i__20849_23413 = G__23425;
            continue;
          } else {
            var arg__18890__auto___23426 = cljs.core.first.call(null, seq__20846_23420__$1);
            a__18889__auto__.push(arg__18890__auto___23426);
            var G__23427 = cljs.core.next.call(null, seq__20846_23420__$1);
            var G__23428 = null;
            var G__23429 = 0;
            var G__23430 = 0;
            seq__20846_23410 = G__23427;
            chunk__20847_23411 = G__23428;
            count__20848_23412 = G__23429;
            i__20849_23413 = G__23430;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rect.apply(null, a__18889__auto__);
  };
  var rect = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rect__delegate.call(this, args__18888__auto__);
  };
  rect.cljs$lang$maxFixedArity = 0;
  rect.cljs$lang$applyTo = function(arglist__23431) {
    var args__18888__auto__ = cljs.core.seq(arglist__23431);
    return rect__delegate(args__18888__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
quiescent.dom.svg = function() {
  var svg__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20854_23432 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20855_23433 = null;
    var count__20856_23434 = 0;
    var i__20857_23435 = 0;
    while (true) {
      if (i__20857_23435 < count__20856_23434) {
        var arg__18890__auto___23436 = cljs.core._nth.call(null, chunk__20855_23433, i__20857_23435);
        a__18889__auto__.push(arg__18890__auto___23436);
        var G__23437 = seq__20854_23432;
        var G__23438 = chunk__20855_23433;
        var G__23439 = count__20856_23434;
        var G__23440 = i__20857_23435 + 1;
        seq__20854_23432 = G__23437;
        chunk__20855_23433 = G__23438;
        count__20856_23434 = G__23439;
        i__20857_23435 = G__23440;
        continue;
      } else {
        var temp__4092__auto___23441 = cljs.core.seq.call(null, seq__20854_23432);
        if (temp__4092__auto___23441) {
          var seq__20854_23442__$1 = temp__4092__auto___23441;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20854_23442__$1)) {
            var c__17462__auto___23443 = cljs.core.chunk_first.call(null, seq__20854_23442__$1);
            var G__23444 = cljs.core.chunk_rest.call(null, seq__20854_23442__$1);
            var G__23445 = c__17462__auto___23443;
            var G__23446 = cljs.core.count.call(null, c__17462__auto___23443);
            var G__23447 = 0;
            seq__20854_23432 = G__23444;
            chunk__20855_23433 = G__23445;
            count__20856_23434 = G__23446;
            i__20857_23435 = G__23447;
            continue;
          } else {
            var arg__18890__auto___23448 = cljs.core.first.call(null, seq__20854_23442__$1);
            a__18889__auto__.push(arg__18890__auto___23448);
            var G__23449 = cljs.core.next.call(null, seq__20854_23442__$1);
            var G__23450 = null;
            var G__23451 = 0;
            var G__23452 = 0;
            seq__20854_23432 = G__23449;
            chunk__20855_23433 = G__23450;
            count__20856_23434 = G__23451;
            i__20857_23435 = G__23452;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.svg.apply(null, a__18889__auto__);
  };
  var svg = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return svg__delegate.call(this, args__18888__auto__);
  };
  svg.cljs$lang$maxFixedArity = 0;
  svg.cljs$lang$applyTo = function(arglist__23453) {
    var args__18888__auto__ = cljs.core.seq(arglist__23453);
    return svg__delegate(args__18888__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
quiescent.dom.text = function() {
  var text__delegate = function(args__18888__auto__) {
    var a__18889__auto__ = [];
    a__18889__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__18888__auto__)));
    var seq__20166_23454 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__18888__auto__));
    var chunk__20167_23455 = null;
    var count__20168_23456 = 0;
    var i__20169_23457 = 0;
    while (true) {
      if (i__20169_23457 < count__20168_23456) {
        var arg__18890__auto___23458 = cljs.core._nth.call(null, chunk__20167_23455, i__20169_23457);
        a__18889__auto__.push(arg__18890__auto___23458);
        var G__23459 = seq__20166_23454;
        var G__23460 = chunk__20167_23455;
        var G__23461 = count__20168_23456;
        var G__23462 = i__20169_23457 + 1;
        seq__20166_23454 = G__23459;
        chunk__20167_23455 = G__23460;
        count__20168_23456 = G__23461;
        i__20169_23457 = G__23462;
        continue;
      } else {
        var temp__4092__auto___23463 = cljs.core.seq.call(null, seq__20166_23454);
        if (temp__4092__auto___23463) {
          var seq__20166_23464__$1 = temp__4092__auto___23463;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20166_23464__$1)) {
            var c__17462__auto___23465 = cljs.core.chunk_first.call(null, seq__20166_23464__$1);
            var G__23466 = cljs.core.chunk_rest.call(null, seq__20166_23464__$1);
            var G__23467 = c__17462__auto___23465;
            var G__23468 = cljs.core.count.call(null, c__17462__auto___23465);
            var G__23469 = 0;
            seq__20166_23454 = G__23466;
            chunk__20167_23455 = G__23467;
            count__20168_23456 = G__23468;
            i__20169_23457 = G__23469;
            continue;
          } else {
            var arg__18890__auto___23470 = cljs.core.first.call(null, seq__20166_23464__$1);
            a__18889__auto__.push(arg__18890__auto___23470);
            var G__23471 = cljs.core.next.call(null, seq__20166_23464__$1);
            var G__23472 = null;
            var G__23473 = 0;
            var G__23474 = 0;
            seq__20166_23454 = G__23471;
            chunk__20167_23455 = G__23472;
            count__20168_23456 = G__23473;
            i__20169_23457 = G__23474;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.text.apply(null, a__18889__auto__);
  };
  var text = function(var_args) {
    var args__18888__auto__ = null;
    if (arguments.length > 0) {
      args__18888__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return text__delegate.call(this, args__18888__auto__);
  };
  text.cljs$lang$maxFixedArity = 0;
  text.cljs$lang$applyTo = function(arglist__23475) {
    var args__18888__auto__ = cljs.core.seq(arglist__23475);
    return text__delegate(args__18888__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
goog.provide("gin.lobby.core");
goog.require("cljs.core");
goog.require("ajax.core");
goog.require("quiescent");
goog.require("ajax.core");
goog.require("ajax.core");
goog.require("gin.event_source");
goog.require("quiescent.dom");
goog.require("quiescent.dom");
goog.require("gin.event_source");
goog.require("quiescent");
goog.require("gin.ui.dom_helpers");
goog.require("gin.ui.dom_helpers");
gin.lobby.core.csrf_token = function csrf_token() {
  return goog.dom.getElement("csrf-token").getAttribute("value");
};
gin.lobby.core.error_handler = function error_handler() {
  console.log("Error, reload page");
  return gin.ui.dom_helpers.show_element.call(null, gin.ui.dom_helpers.get_element.call(null, "network-header-error"), true);
};
gin.lobby.core.goto_url = function goto_url(url) {
  console.log("Set location to : ", url);
  return window.location = url;
};
gin.lobby.core.POST_ACTION = function POST_ACTION(url, options) {
  return ajax.core.POST.call(null, url, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "params", "params", 4313443576), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    return null;
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    return gin.lobby.core.error_handler.call(null);
  }, new cljs.core.Keyword(null, "format", "format", 4040092521), cljs.core.merge.call(null, ajax.core.edn_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function(res) {
    var res_text = res.getResponseText();
    if (cljs.core.count.call(null, res_text) > 0) {
      throw new Error([cljs.core.str("Assumed no content response has content: "), cljs.core.str(res_text)].join(""));
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN (CUSTOM)"], null)), new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", gin.lobby.core.csrf_token.call(null)], null)], null), options));
};
gin.lobby.core.invite = function invite(slug) {
  return gin.lobby.core.POST_ACTION.call(null, "/lobby/invite", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opp-slug", "opp-slug", 765077115), slug], null)], null));
};
gin.lobby.core.play = function play(slug) {
  return gin.lobby.core.POST_ACTION.call(null, "/lobby/play", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opp-slug", "opp-slug", 765077115), slug], null)], null));
};
gin.lobby.core.accept_play = function accept_play(slug) {
  return gin.lobby.core.POST_ACTION.call(null, "/lobby/start", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opp-slug", "opp-slug", 765077115), slug], null)], null));
};
gin.lobby.core.Item = quiescent.component.call(null, function(opp) {
  return quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", 1004015509), "list-group-item"], null), function() {
    var vec__20336 = cljs.core.truth_((new cljs.core.Keyword(null, "available", "available", 4574969403)).cljs$core$IFn$_invoke$arity$1(opp)) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Play", "btn-success", function(_) {
      return gin.lobby.core.play.call(null, (new cljs.core.Keyword(null, "slug", "slug", 1017437725)).cljs$core$IFn$_invoke$arity$1(opp));
    }], null) : cljs.core.truth_((new cljs.core.Keyword(null, "invited", "invited", 2973935085)).cljs$core$IFn$_invoke$arity$1(opp)) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Awaiting invite reply ...", "btn-disabled", function(_) {
      return null;
    }], null) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Invite", "btn-primary", function(_) {
      return gin.lobby.core.invite.call(null, (new cljs.core.Keyword(null, "slug", "slug", 1017437725)).cljs$core$IFn$_invoke$arity$1(opp));
    }], null) : null;
    var text = cljs.core.nth.call(null, vec__20336, 0, null);
    var btn_class = cljs.core.nth.call(null, vec__20336, 1, null);
    var f = cljs.core.nth.call(null, vec__20336, 2, null);
    return quiescent.dom.div.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.label.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", 1004015509), "opp-name"], null), (new cljs.core.Keyword(null, "username", "username", 748190792)).cljs$core$IFn$_invoke$arity$1(opp)), quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", 1004015509), [cljs.core.str("btn btn-right btn-lobby-list "), 
    cljs.core.str(btn_class)].join(""), new cljs.core.Keyword(null, "onClick", "onClick", 3956969051), f], null), text));
  }());
});
gin.lobby.core.OppList = quiescent.component.call(null, function(opps) {
  return cljs.core.apply.call(null, quiescent.dom.ul, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), "opp-list", new cljs.core.Keyword(null, "className", "className", 1004015509), "list-group opp-list-frame"], null), cljs.core.seq.call(null, opps) ? cljs.core.map.call(null, function(p1__20337_SHARP_) {
    return gin.lobby.core.Item.call(null, cljs.core.val.call(null, p1__20337_SHARP_));
  }, cljs.core.sort_by.call(null, cljs.core.key, opps)) : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", 1004015509), "list-group-item"], null), "No human opponents available")], null));
});
gin.lobby.core.start_quiescent = function start_quiescent(opps) {
  cljs.core.add_watch.call(null, opps, new cljs.core.Keyword(null, "quiescent", "quiescent", 2379764173), function(_, ___$1, old, state) {
    return quiescent.render.call(null, gin.lobby.core.OppList.call(null, state), gin.ui.dom_helpers.get_element.call(null, "opponent-list"));
  });
  return cljs.core.swap_BANG_.call(null, opps, cljs.core.identity);
};
gin.lobby.core.main = function main() {
  console.log("Hello world");
  var opps = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  gin.lobby.core.start_quiescent.call(null, opps);
  var source = gin.event_source.event_source.call(null, "/lobby/events", new cljs.core.Keyword(null, "on-message", "on-message", 1496225163), function(event) {
    console.log("ES event", cljs.core.pr_str.call(null, event));
    if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.Keyword(null, "open", "open", 1017321916))) {
      return cljs.core.reset_BANG_.call(null, opps, cljs.core.zipmap.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "slug", "slug", 1017437725), (new cljs.core.Keyword(null, "opps", "opps", 1017322262)).cljs$core$IFn$_invoke$arity$1(event)), (new cljs.core.Keyword(null, "opps", "opps", 1017322262)).cljs$core$IFn$_invoke$arity$1(event)));
    } else {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.Keyword(null, "joined", "joined", 4154342075))) {
        return cljs.core.swap_BANG_.call(null, opps, cljs.core.assoc, (new cljs.core.Keyword(null, "slug", "slug", 1017437725)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "slug", "slug", 1017437725), (new cljs.core.Keyword(null, "slug", "slug", 1017437725)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.Keyword(null, "username", "username", 748190792), (new cljs.core.Keyword(null, "username", "username", 748190792)).cljs$core$IFn$_invoke$arity$1(event)], 
        null));
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.Keyword(null, "invited", "invited", 2973935085))) {
          return cljs.core.swap_BANG_.call(null, opps, cljs.core.assoc, (new cljs.core.Keyword(null, "slug", "slug", 1017437725)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "slug", "slug", 1017437725), (new cljs.core.Keyword(null, "slug", "slug", 1017437725)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.Keyword(null, "username", "username", 748190792), (new cljs.core.Keyword(null, "username", "username", 748190792)).cljs$core$IFn$_invoke$arity$1(event), 
          new cljs.core.Keyword(null, "invited", "invited", 2973935085), true], null));
        } else {
          if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.Keyword(null, "available", "available", 4574969403))) {
            return cljs.core.swap_BANG_.call(null, opps, cljs.core.assoc, (new cljs.core.Keyword(null, "slug", "slug", 1017437725)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "slug", "slug", 1017437725), (new cljs.core.Keyword(null, "slug", "slug", 1017437725)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.Keyword(null, "username", "username", 748190792), (new cljs.core.Keyword(null, "username", "username", 748190792)).cljs$core$IFn$_invoke$arity$1(event), 
            new cljs.core.Keyword(null, "available", "available", 4574969403), true], null));
          } else {
            if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.Keyword(null, "play", "play", 1017347750))) {
              gin.lobby.core.accept_play.call(null, (new cljs.core.Keyword(null, "slug", "slug", 1017437725)).cljs$core$IFn$_invoke$arity$1(event));
              return opps;
            } else {
              if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(event), new cljs.core.Keyword(null, "game-created", "game-created", 3250098047))) {
                return gin.lobby.core.goto_url.call(null, (new cljs.core.Keyword(null, "url", "url", 1014020321)).cljs$core$IFn$_invoke$arity$1(event));
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }, new cljs.core.Keyword(null, "on-error", "on-error", 1418576908), function() {
    return gin.lobby.core.error_handler.call(null);
  });
  return null;
};
goog.exportSymbol("gin.lobby.core.main", gin.lobby.core.main);
